{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prodsys - modeling, simulating and optimizing production systems","text":"<p>This is the documentation for the prodsys package, a package for modeling, simulating, and optimizing production systems based on the product, process and resource (PPR) modelling principle.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install the package, run the following command in the terminal:</p> <pre><code>pip install prodsys\n</code></pre> <p>Please note that the package is only compatible with Python 3.11 or higher.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>The package is designed to be easy to use. The following example shows how to model a simple production system and simulate it. The production system contains a single milling machine that performs milling processes on aluminium housings. The transport is thereby performed by a worker.  At first, just import the express API of <code>prodsys</code>:</p> <pre><code>import prodsys.express as psx\n</code></pre> <p>We now create all components required for describing the production system. At first we define times for all arrival, production and transport processes:</p> <pre><code>milling_time = psx.FunctionTimeModel(distribution_function=\"normal\", location=1, scale=0.1, ID=\"milling_time\")\ntransport_time = psx.FunctionTimeModel(distribution_function=\"normal\", location=0.3, scale=0.2, ID=\"transport_time\")\narrival_time_of_housings = psx.FunctionTimeModel(distribution_function=\"exponential\", location=1.5, ID=\"arrival_time_of_housings\")\n</code></pre> <p>Next, we can define the production and transport process in the system by using the created time models:</p> <pre><code>milling_process = psx.ProductionProcess(milling_time, ID=\"milling_process\")\ntransport_process = psx.TransportProcess(transport_time, ID=\"transport_process\")\n</code></pre> <p>With the processes defined, we can now create the production and transport resources:</p> <pre><code>milling_machine = psx.ProductionResource([milling_process], location=[5, 5], ID=\"milling_machine\")\nworker = psx.TransportResource([transport_process], location=[0, 0], ID=\"worker\")\n</code></pre> <p>Now we define our product, the housing, that is produced in the system. For this example it requires only a single processsing step:</p> <pre><code>housing = psx.Product([milling_process], transport_process, ID=\"housing\")\n</code></pre> <p>Only the sources and sinks that are responsible for creating the housing and storing finished housing are misssing:</p> <pre><code>source = psx.Source(housing, arrival_time_of_housings, location=[0, 0], ID=\"source\")\nsink = psx.Sink(housing, location=[20, 20], ID=\"sink\")\n</code></pre> <p>Finally, we can create our production system, run the simulation for 60 minutes and print aggregated simulation results:</p> <pre><code>production_system = psx.ProductionSystem([milling_machine, worker], [source], [sink])\nproduction_system.run(60)\nproduction_system.runner.print_results()\n</code></pre> <p>As we can see, the system produced 39 parts in this hour with an work in progress (WIP ~ number of products in the system) of 4.125 and utilized the milling machine with 79.69% and the worker for 78.57% at the PR percentage, the rest of the time, both resource are in standby (SB). Note that these results stay the same although there are stochastic processes in the simulation. This is caused by seeding the random number generator with a fixed value. If you want to get different results, just specify another value for <code>seed</code> parameter from the <code>run</code> method.</p> <pre><code>production_system.run(60, seed=1)\nproduction_system.runner.print_results()\n</code></pre> <p>As expected, the performance of the production system changed quite strongly with the new parameters. The system now produces 26 parts in this hour with an work in progress (WIP ~ number of products in the system) of 1.68. As the arrival process of the housing is modelled by an exponential distribution and we only consider 60 minutes of simulation, this is absolutely expected.</p> <p>However, running longer simulations with multiple seeds is absolutely easy with <code>prodsys</code>. We average our results at the end to calculate the WIP to expect by utilizing the post_processor of the runner, which stores all events of a simulation and has many useful methods for analyzing the simulation results:</p> <pre><code>wip_values = []\n\nfor seed in range(5):\n    production_system.run(2000, seed=seed)\n    run_wip = production_system.post_processor.get_aggregated_wip_data()\n    wip_values.append(run_wip)\n\nprint(\"WIP values for the simulation runs:\", wip_values)\n</code></pre> <p>We can analyze these results easily with numpy seeing that the average WIP is 2.835, which is in between the two first runs, which gives us a more realistic expectation of the system's performance.</p> <pre><code>import numpy as np\nwip = np.array(wip_values).mean(axis=0)\nprint(wip)\n</code></pre> <p>These examples only cover the most basic functionalities of <code>prodsys</code>. For more elaborate guides that guide you through more of the package's features, please see the tutorials. For a complete overview of the package's functionality, please see the API reference.</p>"},{"location":"#contributing","title":"Contributing","text":"<p><code>prodsys</code> is a new project and has therefore much room for improvement. Therefore, it would be a pleasure to get feedback or support! If you want to contribute to the package, either create issues on prodsys' github page for discussing new features or contact me directly via github or email.</p>"},{"location":"#license","title":"License","text":"<p>The package is licensed under the MIT license.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>We extend our sincere thanks to the German Federal Ministry for Economic Affairs and Climate Action (BMWK) for supporting this research project 13IK001ZF \u201cSoftware-Defined Manufacturing for the automotive and supplying industry  https://www.sdm4fzi.de/\u201d.</p>"},{"location":"API_reference/API_reference_0_overview/","title":"API reference overview","text":"<p>This section contains the API reference for <code>prodsys</code>. The following modules are available:</p> <ul> <li>Models API</li> <li>Adapter</li> <li>Express API</li> <li>Factories</li> <li>Simulation</li> <li>Optimization</li> <li>Control</li> <li>Utils</li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/","title":"prodsys Models API","text":"<p>The <code>prodsys.models</code> package contains the data structures to describe a production system's structure and its performance. These data structures are utilized in prodsys to have a common format for all algorithms in simulation, optimization, analysis and the prodsys webserver. All of these formats are compatible with the <code>prodsys.express</code> API. However, the conversion works only in one direction: from <code>prodsys.express</code> to <code>prodsys.models</code>. </p> <p>The following modules are available:</p> <ul> <li><code>prodsys.models.core_asset</code>: Contains the abstract base class for data objects.</li> <li><code>prodsys.models.product_data</code>: Contains classes to represent products.</li> <li><code>prodsys.models.performance_data</code>: Contains classes to represent performance data.</li> <li><code>prodsys.models.performance_indicators</code>: Contains classes to represent performance indicators (KPIs).</li> <li><code>prodsys.models.processes_data</code>: Contains classes to represent processes.</li> <li><code>prodsys.models.queue_data</code>: Contains classes to represent queues.</li> <li><code>prodsys.models.resource_data</code>: Contains classes to represent resources.</li> <li><code>prodsys.models.scenario_data</code>: Contains classes to represent scenario data.</li> <li><code>prodsys.models.sink_data</code>: Contains classes to represent sinks.</li> <li><code>prodsys.models.source_data</code>: Contains classes to represent sources.</li> <li><code>prodsys.models.state_data</code>: Contains classes to represent states.</li> <li><code>prodsys.models.time_model_data</code>: Contains classes to represent time models.</li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.core_asset","title":"<code>core_asset</code>","text":""},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.core_asset.CoreAsset","title":"<code> CoreAsset            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a the core asset, consisting of an ID and a description.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>The unique ID of the core asset.</p> required <code>description</code> <code>str</code> <p>The description of the core asset.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.performance_data","title":"<code>performance_data</code>","text":""},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.performance_data.Event","title":"<code> Event            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents an event in the event log.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>float</code> <p>Time of the event.</p> required <code>resource</code> <code>str</code> <p>Resource of the event.</p> required <code>state</code> <code>str</code> <p>State of the event.</p> required <code>state_type</code> <code>str</code> <p>State type of the event, representing a state.StateTypeEnum.</p> required <code>activity</code> <code>str</code> <p>Activity of the event, representing a state.StateEnum.</p> required <code>product</code> <code>Optional[str]</code> <p>Product of the event. Defaults to None.</p> required <code>expected_end_time</code> <code>Optional[float]</code> <p>Expected end time of the event. Defaults to None.</p> required <code>target_location</code> <code>Optional[str]</code> <p>Target location of the event. Defaults to None.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.performance_data.Performance","title":"<code> Performance            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents the performance of a simulation run.</p> <p>Parameters:</p> Name Type Description Default <code>event_log</code> <code>List[Event]</code> <p>Event log of the simulation run.</p> required <code>kpis</code> <code>List[KPI_UNION]</code> <p>List of KPIs of the simulation run.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.performance_indicators","title":"<code>performance_indicators</code>","text":""},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.performance_indicators.DynamicKPI","title":"<code> DynamicKPI            (KPI)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a dynamic KPI. Not intended for usage but only inheritance.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.performance_indicators.KPI","title":"<code> KPI            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a KPI. Not intended for usage but only inheritance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>KPIEnum</code> <p>Name of the KPI.</p> required <code>target</code> <code>Literal[\"min\", \"max\"]</code> <p>Favourable target of the KPI.</p> required <code>weight</code> <code>Optional[float]</code> <p>Weight of the KPI. Defaults to 1.</p> required <code>value</code> <code>Optional[float]</code> <p>Value of the KPI. Defaults to None.</p> required <code>context</code> <code>Tuple[KPILevelEnum, ...]</code> <p>Context of the KPI. Defaults to None.</p> required <code>resource</code> <code>Optional[str]</code> <p>Resource of the KPI. Defaults to None.</p> required <code>product_type</code> <code>Optional[str]</code> <p>Product type of the KPI. Defaults to None.    Returns:</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.performance_indicators.KPIEnum","title":"<code> KPIEnum            (str, Enum)         </code>","text":"<p>Enum that represents the different kind of KPIs.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.performance_indicators.KPILevelEnum","title":"<code> KPILevelEnum            (str, Enum)         </code>","text":"<p>Enum that represents the different kind of KPI levels.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data","title":"<code>processes_data</code>","text":"<p>The <code>processes_data</code> module contains the <code>prodsys.models</code> classes to represent the processes that can  be performed on products by resources.</p> <p>The following processes are possible: - <code>ProductionProcessData</code>: A process that can be performed on a product by a production resource. - <code>CapabilityProcessData</code>: A process that can be performed on a product by a resource, based on the capability of the resource. - <code>TransportProcessData</code>: A process that can be performed on a product by a transport resource.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.CapabilityProcessData","title":"<code> CapabilityProcessData            (ProcessData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents capability process data. Capability processes are not compared by their IDs but their Capabilities.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the process.</p> required <code>description</code> <code>str</code> <p>Description of the process.</p> required <code>time_model_id</code> <code>str</code> <p>ID of the time model of the process.</p> required <code>type</code> <code>Literal[ProcessTypeEnum.CapabilityProcesses]</code> <p>Type of the process.</p> required <code>capability</code> <code>str</code> <p>Capability of the process.</p> required <p>Examples:</p> <p>A capability process with ID \"P1\", description \"Process 1\", time model ID \"function_time_model_1\" and capability \"C1\": <pre><code>import prodsys\nprodsys.processes_data.CapabilityProcessData(\n    ID=\"P1\",\n    description=\"Process 1\",\n    time_model_id=\"function_time_model_1\",\n    type=\"CapabilityProcesses\",\n    capability=\"C1\",\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.CapabilityProcessData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash for the capability process data considering the capability, time model and type of the process. Can be used to compare two process data objects for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter to access the time model data.</p> required <p>Returns:</p> Type Description <code>str</code> <p>hash of the capability process data.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.CompoundProcessData","title":"<code> CompoundProcessData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a compound process. A compound process is a container for multiple processes that belong together, e.g. if a hardware module enables all processes of a CompoundProcess or if multiple similar processes can be performed.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the process module.</p> required <code>description</code> <code>str</code> <p>Description of the process module.</p> required <code>process_ids</code> <code>List[str]</code> <p>Process IDs of the process module.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.CompoundProcessData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash for the compound process data considering the proces ids. Can be used to compare two process data objects for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter to access the process data.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If a process with the ID of the compound process is not found.</p> <p>Returns:</p> Type Description <code>str</code> <p>hash of the compound process data.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.ProcessData","title":"<code> ProcessData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents process data. Acts as a base class for all process data classes.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the process.</p> required <code>description</code> <code>str</code> <p>Description of the process.</p> required <code>time_model_id</code> <code>str</code> <p>ID of the time model of the process.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.ProcessData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash for the process data considering the time model data. Can be used to compare two process data objects for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter to access the time model data.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the time model with the ID of the process is not found.</p> <p>Returns:</p> Type Description <code>str</code> <p>hash of the process data. </p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.ProcessTypeEnum","title":"<code> ProcessTypeEnum            (str, Enum)         </code>","text":"<p>Enum that represents the different kind of processes.</p> <ul> <li>ProductionProcesses: A process that can be performed on a product by a production resource.</li> <li>TransportProcesses: A process that can be performed on a product by a transport resource.</li> <li>CapabilityProcesses: A process that can be performed on a product by a resource, based on the capability of the resource.</li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.ProductionProcessData","title":"<code> ProductionProcessData            (ProcessData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents production process data.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the process.</p> required <code>description</code> <code>str</code> <p>Description of the process.</p> required <code>time_model_id</code> <code>str</code> <p>ID of the time model of the process.</p> required <code>type</code> <code>Literal[ProcessTypeEnum.ProductionProcesses]</code> <p>Type of the process.</p> required <p>Examples:</p> <p>A production process with ID \"P1\", description \"Process 1\" and time model ID \"function_time_model_1\": <pre><code>import prodsys\nprodsys.processes_data.ProductionProcessData(\n    ID=\"P1\",\n    description=\"Process 1\",\n    time_model_id=\"function_time_model_1\",\n    type=\"ProductionProcesses\",\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.RequiredCapabilityProcessData","title":"<code> RequiredCapabilityProcessData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents required capability process data. Capability processes are not compared by their IDs but their Capabilities. The required capability process data does not specify a time model ID, as it is not a process that can be performed, but a capability that is required.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the process.</p> required <code>description</code> <code>str</code> <p>Description of the process.</p> required <code>type</code> <code>Literal[ProcessTypeEnum.CapabilityProcesses]</code> <p>Type of the process.</p> required <code>capability</code> <code>str</code> <p>Capability of the process.</p> required <p>Examples:</p> <p>A required capability process with ID \"P1\", description \"Process 1\", and capability \"C1\": <pre><code>import prodsys\nprodsys.processes_data.CapabilityProcessData(\n    ID=\"P1\",\n    description=\"Process 1\",\n    type=\"RequiredCapabilityProcesses\",\n    capability=\"C1\",\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.RequiredCapabilityProcessData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash for the required capability process data considering the capability and type of the process. Can be used to compare two process data objects for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter to access the time model data.</p> required <p>Returns:</p> Type Description <code>str</code> <p>hash of the required capability process data.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.processes_data.TransportProcessData","title":"<code> TransportProcessData            (ProcessData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents transport process data.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the process.</p> required <code>description</code> <code>str</code> <p>Description of the process.</p> required <code>time_model_id</code> <code>str</code> <p>ID of the time model of the process</p> required <code>type</code> <code>Literal[ProcessTypeEnum.TransportProcesses]</code> <p>Type of the process.</p> required <p>Examples:</p> <p>A transport process with ID \"TP1\", description \"Transport Process 1\" and time model ID \"manhattan_time_model_1\": <pre><code>import prodsys\nprodsys.processes_data.TransportProcessData(\n    ID=\"TP1\",\n    description=\"Transport Process 1\",\n    time_model_id=\"manhattan_time_model_1\",\n    type=\"TransportProcesses\",\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.product_data","title":"<code>product_data</code>","text":""},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.product_data.ProductData","title":"<code> ProductData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents product data, specifically the required processes and the allows tranport process.</p> <p>The processes describe thereby the process model that needs to be completed for the product to be finished. There are three different ways to describe the process model:</p> <ul> <li>Sequential process model: The processes are given as a list of process IDs. The processes are executed sequentially.</li> <li>Adjacency matrix process model: The processes are given as an adjacency matrix that describes the precedence graph of the product.</li> <li>Edges process model: The processes are given as a list of edges. The edges describe the precedence graph of the product.</li> </ul> <p>See the examples for more insights.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the product. If not given, the product type is used. Gets overwritten to the instance product ID, when an instance is created during simulation.</p> required <code>description</code> <code>str</code> <p>Description of the product.</p> required <code>product_type</code> <code>str</code> <p>Type of the product. If not given, the ID is used.</p> required <code>processes</code> <code>Union[List[str], List[List[str]], Dict[str, List[str]]]</code> <p>Processes of the product. This can be a list of process IDs, a list of edges or an adjacency matrix.</p> required <code>transport_process</code> <code>str</code> <p>Transport process of the product.</p> required <p>Examples:</p> <p>Product with sequential process model: <pre><code>import prodsys\nprodsys.product_data.ProductData(\n    ID=\"Product_1\",\n    description=\"product 1\",\n    product_type=\"Product_1\",\n    processes=[\"P1\", \"P2\", \"P3\"],\n    transport_process=\"TP1\",\n)\n</code></pre></p> <p>Product with adjacency matrix process model: <pre><code>import prodsys\nprodsys.product_data.ProductData(\n    ID=\"Product_1\",\n    description=\"Product 1\",\n    product_type=\"Product_1\",\n    processes={\n        \"P1\": [\"P2\", \"P3\"],\n        \"P2\": [\"P3\"],\n        \"P3\": [],\n    },\n    transport_process=\"TP1\",\n)\n</code></pre></p> <p>Product with graph edges process model: <pre><code>import prodsys\nprodsys.product_data.ProductData(\n    ID=\"Product_1\",\n    description=\"Product 1\",\n    product_type=\"Product_1\",\n    processes=[\n        [\"P1\", \"P2\"],\n        [\"P1\", \"P3\"],\n        [\"P2\", \"P4\"],\n        [\"P3\", \"P4\"],\n    ],\n    transport_process=\"TP1\",\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.product_data.ProductData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash of the product considering the processes and the transport process. Can be used to compare products for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter that contains the process data.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the process or transport process is not found in the adapter.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the product.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.queue_data","title":"<code>queue_data</code>","text":""},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.queue_data.QueueData","title":"<code> QueueData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a queue. If capacity is 0, the queue is considered infinite. Otherwise, the queue can hold a finite number of products cooresponding to the capacity.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the queue.</p> required <code>description</code> <code>str</code> <p>Description of the queue.</p> required <code>capacity</code> <code>Union[int, float]</code> <p>Capacity of the queue. If 0, the queue is considered infinite. Otherwise, the queue can hold a finite number of products cooresponding to the capacity.</p> required <p>Examples:</p> <p>A finite queue with ID \"Q1\", description \"Queue 1\" and capacity 10: <pre><code>import prodsys\nprodsys.queue_data.QueueData(\n    ID=\"Q1\",\n    description=\"Queue 1\",\n    capacity=10,\n)\n</code></pre> An infinite queue with ID \"Q1\", description \"Queue 1\" and capacity 0: <pre><code>import prodsys\nprodsys.queue_data.QueueData(\n    ID=\"Q1\",\n    description=\"Queue 1\",\n    capacity=0,\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.queue_data.QueueData.hash","title":"<code>hash(self)</code>","text":"<p>Returns a unique hash for the queue considering its capacity.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the queue.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.resource_data","title":"<code>resource_data</code>","text":"<p>In <code>prodsys</code> exist two different types of resources: production resources and transport resources. Production resources are resources that can perform processes on products. Transport resources are resources that can transport products from one location to another. Both types of resources are represented by the <code>ResourceData</code> class. The <code>ResourceData</code> class is an abstract base class and cannot be instantiated. Instead, the <code>ProductionResourceData</code> and <code>TransportResourceData</code> classes can be used to represent production resources and transport resources, respectively.</p> <p>The following resources are available:</p> <ul> <li><code>ProductionResourceData</code>: Class that represents a production resource.</li> <li><code>TransportResourceData</code>: Class that represents a transport resource.</li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.resource_data.ControllerEnum","title":"<code> ControllerEnum            (str, Enum)         </code>","text":"<p>Enum that represents the controller of a resource.</p> <ul> <li>PipelineController: Pipeline controller.</li> <li>TransportController: Transport controller.</li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.resource_data.ProductionResourceData","title":"<code> ProductionResourceData            (ResourceData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents production resource data.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the resource.</p> required <code>description</code> <code>str</code> <p>Description of the resource.</p> required <code>capacity</code> <code>int</code> <p>Capacity of the resource.</p> required <code>location</code> <code>List[float]</code> <p>Location of the resource. Has to be a list of length 2.</p> required <code>controller</code> <code>Literal[ControllerEnum.PipelineController]</code> <p>Controller of the resource, has to be a PipelineController.</p> required <code>control_policy</code> <code>ResourceControlPolicy</code> <p>Control policy of the resource.</p> required <code>process_ids</code> <code>List[str]</code> <p>Process IDs of the resource.</p> required <code>process_capacities</code> <code>Optional[List[int]]</code> <p>Process capacities of the resource. Defaults to None.</p> required <code>state_ids</code> <code>Optional[List[str]]</code> <p>State IDs of the resource. Defaults to [].</p> required <code>input_queues</code> <code>Optional[List[str]]</code> <p>Input queues of the resource. Defaults to None.</p> required <code>output_queues</code> <code>Optional[List[str]]</code> <p>Output queues of the resource. Defaults to None.</p> required <p>Examples:</p> <p>Creation of a production resource with a capacity of 2, a location of [10.0, 10.0], a PipelineController and a FIFO control policy: <pre><code>import prodsys\nprodsys.resource_data.ProductionResourceData(\n    ID=\"R1\",\n    description=\"Resource 1\",\n    capacity=2,\n    location=[10.0, 10.0],\n    controller=prodsys.resource_data.ControllerEnum.PipelineController,\n    control_policy=prodsys.resource_data.ResourceControlPolicy.FIFO,\n    process_ids=[\"P1\", \"P2\"],\n    process_capacities=[2, 1],\n    states=[\n        \"Breakdownstate_1\",\n        \"Setup_State_1\",\n    ],\n    input_queues=[\"IQ1\"],\n    output_queues=[\"OQ1\"],\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.resource_data.ProductionResourceData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash of the resource considering the capacity, location, controller, processes, process capacities, states, input queues and output queues. Can be used to compare resources for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter that contains the process and queue data.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If a queue, state or process is not found in the adapter.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the resource.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.resource_data.ResourceControlPolicy","title":"<code> ResourceControlPolicy            (str, Enum)         </code>","text":"<p>Enum that represents the control policy of a resource.</p> <ul> <li>FIFO: First in first out.</li> <li>LIFO: Last in first out.</li> <li>SPT: Shortest processing time first.</li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.resource_data.ResourceData","title":"<code> ResourceData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents resource data. Base class for ProductionResourceData and TransportResourceData.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the resource.</p> required <code>description</code> <code>str</code> <p>Description of the resource.</p> required <code>capacity</code> <code>int</code> <p>Capacity of the resource.</p> required <code>location</code> <code>List[float]</code> <p>Location of the resource. Has to be a list of length 2.</p> required <code>controller</code> <code>ControllerEnum</code> <p>Controller of the resource.</p> required <code>control_policy</code> <code>Union[ResourceControlPolicy, TransportControlPolicy]</code> <p>Control policy of the resource.</p> required <code>process_ids</code> <code>List[str]</code> <p>Process IDs of the resource.</p> required <code>process_capacities</code> <code>Optional[List[int]]</code> <p>Process capacities of the resource (in sequence of the capacity of the resource). Defaults to None.</p> required <code>state_ids</code> <code>Optional[List[str]]</code> <p>State IDs of the resource. Defaults to [].</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.resource_data.ResourceData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash of the resource considering the capacity, location, controller, processes, process capacities and states. Can be used to compare resources for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter that contains the process and state data.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If a state or process is not found in the adapter.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the resource.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.resource_data.TransportControlPolicy","title":"<code> TransportControlPolicy            (str, Enum)         </code>","text":"<p>Enum that represents the control policy of a transport resource.</p> <ul> <li>FIFO: First in first out.</li> <li>SPT_transport: Shortest raw transport time first. Does not consider distance to start of the transport.</li> <li>NEAREST_ORIGIN_AND_LONGEST_TARGET_QUEUES_TRANSPORT: Nearest_Origin but also sorts by the length of the target queue to make sure, something can be picked up at the target.</li> <li>NEAREST_ORIGIN_AND_SHORTEST_TARGET_INPUT_QUEUES_TRANSPORT: Nearest_Origin but also sorts by the length of the target input queue to prefer target machines, that have lower number of products waiting to be processed.</li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.resource_data.TransportResourceData","title":"<code> TransportResourceData            (ResourceData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents transport resource data.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the resource.</p> required <code>description</code> <code>str</code> <p>Description of the resource.</p> required <code>capacity</code> <code>int</code> <p>Capacity of the resource.</p> required <code>location</code> <code>List[float]</code> <p>Location of the resource. Has to be a list of length 2.</p> required <code>controller</code> <code>Literal[ControllerEnum.TransportController]</code> <p>Controller of the resource, has to be a TransportController.</p> required <code>control_policy</code> <code>TransportControlPolicy</code> <p>Control policy of the resource.</p> required <code>process_ids</code> <code>List[str]</code> <p>Process IDs of the resource.</p> required <code>process_capacities</code> <code>Optional[List[int]]</code> <p>Process capacities of the resource. Defaults to None.</p> required <code>state_ids</code> <code>Optional[List[str]]</code> <p>State IDs of the resource. Defaults to [].</p> required <p>Examples:</p> <p>Creation of a transport resource with a capacity of 1, a location of [15.0, 15.0], a TransportController and a FIFO control policy: <pre><code>import prodsys\nprodsys.resource_data.TransportResourceData(\n    ID=\"TR1\",\n    description=\"Transport Resource 1\",\n    capacity=1,\n    location=[15.0, 15.0],\n    controller=prodsys.resource_data.ControllerEnum.TransportController,\n    control_policy=prodsys.resource_data.TransportControlPolicy.FIFO,\n    process_ids=[\"TP1\"],\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.scenario_data","title":"<code>scenario_data</code>","text":"<p>This module contains the data structures for the scenario data that is used in optimization to determine the best configuration of a production system. A Scenario constists thereby of: - <code>ScenarioConstrainsData</code>: The constraints of the scenario. - <code>ScenarioOptionsData</code>: The options of the scenario. - <code>ScenarioInfoData</code>: The information of the scenario. - 'Objectives': The objectives of the scenario. - <code>ScenarioData</code>: The scenario data that contains the constraints, options, information and objectives of the scenario. </p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.scenario_data.ReconfigurationEnum","title":"<code> ReconfigurationEnum            (str, Enum)         </code>","text":"<p>Enum that represents the different levels of reconfigurations that are possible.</p> <ul> <li>ProductionCapacity: Reconfiguration of production capacity (number of machines and their configuration)</li> <li>TransportCapacity: Reconfiguration of transport capacity (number of transport resources and their configuration)</li> <li>Layout: Reconfiguration of layout (only position of resources)</li> <li>SequencingLogic: Reconfiguration of sequencing logic (only the control policy of resources)</li> <li>RoutingLogic: Reconfiguration of routing logic (only the routing heuristic of routers)</li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.scenario_data.ScenarioConstrainsData","title":"<code> ScenarioConstrainsData            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents the constraints of a scenario. The maximum limitations aim to limit the complexity of the scenario, thus optimization is possible in a reasonable time. However, by setting only a few constraints, the complexity of the scenario can be increased. E.g. you set the maximum reconfiguration cost to the targeted value and maximum numbers very high. Thereby, the optimization problem is only constrained by reconfiguration cost and not other factors.</p> <p>Parameters:</p> Name Type Description Default <code>max_reconfiguration_cost</code> <code>float</code> <p>Maximum reconfiguration cost that can be spend for new production capacity in the scenario.</p> required <code>max_num_machines</code> <code>int</code> <p>Maximum number of machines that can be used in the scenario.</p> required <code>max_num_processes_per_machine</code> <code>int</code> <p>Maximum number of processes that can be assigned to a machine in the scenario.</p> required <code>max_num_transport_resources</code> <code>int</code> <p>Maximum number of transport resources that can be used in the scenario.</p> required <code>target_product_count</code> <code>Optional[Dict[str, int]]</code> <p>Target product count for the scenario. Defaults to None. Mapping of product type to target count in the considered time range of the scenario.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.scenario_data.ScenarioData","title":"<code> ScenarioData            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a scenario and contraints data about constaints, options, information and objectives of the scenario.</p> <p>Parameters:</p> Name Type Description Default <code>constraints</code> <code>ScenarioConstrainsData</code> <p>Constraints of the scenario.</p> required <code>options</code> <code>ScenarioOptionsData</code> <p>Options of the scenario.</p> required <code>info</code> <code>ScenarioInfoData</code> <p>Information of the scenario.</p> required <code>optimize</code> <code>List[Objectives]</code> <p>List of KPIs that should be optimized.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the weights are not specified for all KPIs that should be optimized.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.scenario_data.ScenarioInfoData","title":"<code> ScenarioInfoData            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents the information of a scenario. The information is used to define some parameters that allow evaluation of the scenario.</p> <p>Parameters:</p> Name Type Description Default <code>machine_cost</code> <code>float</code> <p>Cost of a machine.</p> required <code>transport_resource_cost</code> <code>float</code> <p>Cost of a transport resource.</p> required <code>process_module_cost</code> <code>float</code> <p>Cost of a process module.</p> required <code>breakdown_cost</code> <code>Optional[float]</code> <p>Cost of a breakdown. Defaults to None.</p> required <code>time_range</code> <code>Optional[int]</code> <p>Time range of the scenario in minutes to be considered. Defaults to None.</p> required <code>maximum_breakdown_time</code> <code>Optional[int]</code> <p>Maximum allowable breakdown time in the scenario in minutes. Defaults to None.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.scenario_data.ScenarioOptionsData","title":"<code> ScenarioOptionsData            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents the options of a scenario. The options are used to define the deegrees of freedom in the optimization scenario, i.e. the different possibilities to adjust the configuration to find a solution with higher performance. Options consider possible transformations of the configuration, possible logics of controllers and routers and possible positions of machines in the layout.</p> <p>Parameters:</p> Name Type Description Default <code>transformations</code> <code>List[ReconfigurationEnum]</code> <p>List of possible transformations of the configuration.</p> required <code>machine_controllers</code> <code>List[Literal[\"FIFO\", \"LIFO\", \"SPT\"]]</code> <p>List of possible controllers for machines.</p> required <code>transport_controllers</code> <code>List[Literal[\"FIFO\", \"SPT_transport\", \"Nearest_origin_and_longest_target_queues_transport\", \"Nearest_origin_and_shortest_target_input_queues_transport\"]]</code> <p>List of possible controllers for transport resources.</p> required <code>routing_heuristics</code> <code>List[Literal[\"shortest_queue\", \"random\", \"FIFO\"]]</code> <p>List of possible routing heuristics for sources.</p> required <code>positions</code> <code>List[conlist(float, min_items=2, max_items=2)]</code> <p>List of possible positions for machines in the layout.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the positions are not a list of tuples of length 2.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.sink_data","title":"<code>sink_data</code>","text":""},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.sink_data.SinkData","title":"<code> SinkData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a sink.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the sink.</p> required <code>description</code> <code>str</code> <p>Description of the sink.</p> required <code>location</code> <code>List[float]</code> <p>Location of the sink. It has to be a list of length 2.</p> required <code>product_type</code> <code>str</code> <p>Product type of the sink.</p> required <code>input_queues</code> <code>Optional[List[str]]</code> <p>List of input queues of the sink. Defaults to None.</p> required <p>Examples:</p> <p>A sink with ID \"SK1\": <pre><code>import prodsys\nprodsys.sink_data.SinkData(\n    ID=\"SK1\",\n    description=\"Sink 1\",\n    location=[50.0, 50.0],\n    product_type=\"Product_1\",\n    input_queues=[\"SinkQueue\"],\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.sink_data.SinkData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash for the sink considering its location, product type and input queues.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter of the production system.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the product or input queue is not found in the adapter.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the sink.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.source_data","title":"<code>source_data</code>","text":""},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.source_data.RoutingHeuristic","title":"<code> RoutingHeuristic            (str, Enum)         </code>","text":"<p>Enum that represents the routing heuristic of a source.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.source_data.SourceData","title":"<code> SourceData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a source.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the source.</p> required <code>description</code> <code>str</code> <p>Description of the source.</p> required <code>location</code> <code>List[float]</code> <p>Location of the source. It has to be a list of length 2.</p> required <code>product_type</code> <code>str</code> <p>Product type of the source.</p> required <code>time_model_id</code> <code>str</code> <p>Time model ID of the source.</p> required <code>router</code> <code>RouterType</code> <p>Router of the source.</p> required <code>routing_heuristic</code> <code>RoutingHeuristic</code> <p>Routing heuristic of the source.</p> required <code>output_queues</code> <code>Optional[List[str]]</code> <p>List of output queues of the source. Defaults to None.</p> required <p>Examples:</p> <p>A source with ID \"S1\": ``` py import prodsys prodsys.source_data.SourceData(     ID=\"S1\",     description=\"Source 1\",     location=[0.0, 0.0],     product_type=\"Product_1\",     time_model_id=\"function_time_model_4\",     router=\"SimpleRouter\",     routing_heuristic=\"shortest_queue\",     output_queues=[\"SourceQueue\"], )</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.source_data.SourceData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash for the source considering its location, product type, time model, routing heuristic and output queues.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter of the production system.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the product, time model or output queue is not found in the adapter.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the source.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data","title":"<code>state_data</code>","text":"<p>The <code>state_data</code> module contains the <code>prodsys.models</code> classes to represent the states that resources  can be in during a simulation.</p> <p>The following states are possible:</p> <ul> <li><code>BreakDownStateData</code>: A state that makes a resource unavailable for a certain time.</li> <li><code>ProcessBreakDownStateData</code>: A state that makes a process unavailable for a certain time but other processes can still be performed.</li> <li><code>SetupStateData</code>: A state that represents the time needed to change the process of a resource.</li> <li><code>ProductionStateData</code>: A state that represents the time needed to process a product.</li> <li><code>TransportStateData</code>: A state that represents the time needed to transport a product.     </li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.BreakDownStateData","title":"<code> BreakDownStateData            (StateData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a breakdown state.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the state.</p> required <code>description</code> <code>str</code> <p>Description of the state.</p> required <code>time_model_id</code> <code>str</code> <p>Time model ID of the state. Specifies the time interval between breakdowns.</p> required <code>type</code> <code>StateTypeEnum</code> <p>Type of the state.</p> required <code>repair_time_model_id</code> <code>str</code> <p>Time model ID of the repair time.</p> required <p>Examples:</p> <p>Breakdown state with a function time model: <pre><code>import prodsys\nprodsys.state_data.BreakDownStateData(\n    ID=\"Breakdownstate_1\",\n    description=\"Breakdown state machine 1\",\n    time_model_id=\"function_time_model_5\",\n    repair_time_model_id=\"function_time_model_8\",\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.BreakDownStateData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash of the state considering the time model and the repair time model. Can be used to compare states for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter to access the data of the state.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>if the repair time model is not found.</p> <p>Returns:</p> Type Description <code>str</code> <p>hash of the state.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.ProcessBreakDownStateData","title":"<code> ProcessBreakDownStateData            (StateData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a process breakdown state. It is a breakdown state that is connected to a process. Other processes can still be executed while the process breakdown state is activen.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the state.</p> required <code>description</code> <code>str</code> <p>Description of the state.</p> required <code>time_model_id</code> <code>str</code> <p>Time model ID of the state.</p> required <code>type</code> <code>StateTypeEnum</code> <p>Type of the state.</p> required <code>repair_time_model_id</code> <code>str</code> <p>Time model ID of the repair time.</p> required <code>process_id</code> <code>str</code> <p>ID of the process that is broken down.</p> required <p>Examples:</p> <p>Process breakdown state with a function time model: <pre><code>import prodsys\nprodsys.state_data.ProcessBreakDownStateData(\n    ID=\"ProcessBreakDownState_1\",\n    description=\"Process Breakdown state machine 1\",\n    time_model_id=\"function_time_model_7\",\n    repair_time_model_id=\"function_time_model_8\",\n    process_id=\"P1\",\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.ProcessBreakDownStateData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash of the state considering the time model, process and repair time model. Can be used to compare states for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter to access the data of the state.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>if the process or repair time model is not found.</p> <p>Returns:</p> Type Description <code>str</code> <p>hash of the state.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.ProductionStateData","title":"<code> ProductionStateData            (StateData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a production state. By undergoing a production state, the product is processed and continues its process model. Production states don't have to be initialized because they are automatically created when a process is added to a resource.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the state.</p> required <code>description</code> <code>str</code> <p>Description of the state.</p> required <code>time_model_id</code> <code>str</code> <p>Time model ID of the state.</p> required <code>type</code> <code>StateTypeEnum</code> <p>Type of the state.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.SetupStateData","title":"<code> SetupStateData            (StateData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a setup state. By undergoing a setup state, the process is setup.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the state.</p> required <code>description</code> <code>str</code> <p>Description of the state.</p> required <code>time_model_id</code> <code>str</code> <p>Time model ID of the state.</p> required <code>type</code> <code>StateTypeEnum</code> <p>Type of the state.</p> required <code>origin_setup</code> <code>str</code> <p>ID of the origin process for the setup.</p> required <code>target_setup</code> <code>str</code> <p>ID of the target process for the setup.</p> required <p>Examples:</p> <p>Setup state with a function time model: <pre><code>import prodsys\nprodsys.state_data.SetupStateData(\n    ID=\"Setup_State_2\",\n    description=\"Setup state machine 2\",\n    time_model_id=\"function_time_model_2\",\n    origin_setup=\"P2\",\n    target_setup=\"P1\",\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.SetupStateData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash of the state considering the time model, origin and target setup process. Can be used to compare states for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter to access the data of the state.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>if the origin or target setup process is not found.</p> <p>Returns:</p> Type Description <code>str</code> <p>hash of the state.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.StateData","title":"<code> StateData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a state.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the state.</p> required <code>description</code> <code>str</code> <p>Description of the state.</p> required <code>time_model_id</code> <code>str</code> <p>Time model ID of the state.</p> required <code>type</code> <code>StateTypeEnum</code> <p>Type of the state.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.StateData.hash","title":"<code>hash(self, adapter)</code>","text":"<p>Returns a unique hash of the state considering the time model and the type of the state. Can be used to compare states for equal functionality.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>Adapter to access the data of the state.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>if the time model is not found in the adapter.</p> <p>Returns:</p> Type Description <code>str</code> <p>hash of the state.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.StateTypeEnum","title":"<code> StateTypeEnum            (str, Enum)         </code>","text":"<p>Enum that represents the different kind of states.</p> <ul> <li>BreakDownState: A state that makes a resource unavailable for a certain time.</li> <li>ProductionState: A state that represents the time needed to process a product.</li> <li>TransportState: A state that represents the time needed to transport a product.</li> <li>SetupState: A state that represents the time needed to change the process of a resource.</li> <li>ProcessBreakDownState: A state that makes a process unavailable for a certain time but other processes can still be performed.</li> </ul>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.state_data.TransportStateData","title":"<code> TransportStateData            (StateData)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a transport state. By undergoing a transport state, the product is transported and its position is changed. Transport states don't have to be initialized because they are automatically created when a transport process is added to a resource.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the state.</p> required <code>description</code> <code>str</code> <p>Description of the state.</p> required <code>time_model_id</code> <code>str</code> <p>Time model ID of the state.</p> required <code>type</code> <code>StateTypeEnum</code> <p>Type of the state.</p> required"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.time_model_data","title":"<code>time_model_data</code>","text":"<p>The <code>time_model</code> module contains classes to specify time models in the simulation for the arrival of products, performance of processes and transports and the duration of states.</p> <p>The following time models are possible: - <code>SequentialTimeModelData</code>: A time model that is based on a sequence of values. - <code>FunctionTimeModelData</code>: A time model that is based on a distribution function which gets sampled. - <code>ManhattanDistanceTimeModelData</code>: A time model that is based on the manhattan distance between two nodes and a constant velocity.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.time_model_data.FunctionTimeModelData","title":"<code> FunctionTimeModelData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a time model that is based on a function and represents the timely values by their distribution function.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the time model.</p> required <code>description</code> <code>str</code> <p>Description of the time model.</p> required <code>distribution_function</code> <code>FunctionTimeModelEnum</code> <p>Zype of the distribution function of the time model.</p> required <code>location</code> <code>float</code> <p>Location parameter of the distribution function.</p> required <code>scale</code> <code>float</code> <p>Scale parameter of the distribution function.</p> required <p>Examples:</p> <p>Normal distribution time model with 20 minutes: <pre><code>import prodsys\nprodsys.time_model_data.FunctionTimeModelData(\n    ID=\"function_time_model_1\",\n    description=\"normal distribution time model with 20 minutes\",\n    distribution_function=prodsys.FunctionTimeModelEnum.normal,\n    location=20.0,\n    scale=5.0,\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.time_model_data.FunctionTimeModelData.hash","title":"<code>hash(self)</code>","text":"<p>Returns a unique hash for the time model considering its distribution function, location and scale. Can be used to compare time models for equal functionality.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the time model.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.time_model_data.ManhattanDistanceTimeModelData","title":"<code> ManhattanDistanceTimeModelData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a time model that is based on the manhattan distance between two nodes and a constant velocity.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the time model.</p> required <code>description</code> <code>str</code> <p>Description of the time model.</p> required <code>speed</code> <code>float</code> <p>Speed of the transport.</p> required <code>reaction_time</code> <code>float</code> <p>Reaction time of the transport.</p> required <p>Examples:</p> <p>Manhattan time model with speed 180 m/min = 3 m/s and reaction time 0.15 minutes: ``` py import prodsys time_model_data.ManhattanDistanceTimeModelData(     ID=\"manhattan_time_model_1\",     description=\"manhattan time model with speed 180 m/min = 3 m/s\",     speed=180.0,     reaction_time=0.15, )</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.time_model_data.ManhattanDistanceTimeModelData.hash","title":"<code>hash(self)</code>","text":"<p>Returns a unique hash for the time model considering its speed and reaction time. Can be used to compare time models for equal functionality.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the time model.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.time_model_data.SequentialTimeModelData","title":"<code> SequentialTimeModelData            (CoreAsset)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a time model that is based on a sequence of values.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the time model.</p> required <code>description</code> <code>str</code> <p>Description of the time model.</p> required <code>sequence</code> <code>List[float]</code> <p>Sequence of time values.</p> required <p>Examples:</p> <p>Sequential time model with 7 time values: <pre><code>import prodsys\nprodsys.time_model_data.SequentialTimeModelData(\n    ID=\"sequence_time_model_1\",\n    description=\"Examplary sequence time model\",\n    sequence=[25.0, 13.0, 15.0, 16.0, 17.0, 20.0, 21.0],\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.time_model_data.SequentialTimeModelData.hash","title":"<code>hash(self)</code>","text":"<p>Returns a unique hash for the time model considering its sequence. Can be used to compare time models for equal functionality.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the time model.</p>"},{"location":"API_reference/API_reference_1_Models_API/#prodsys.models.time_model_data.TimeModelEnum","title":"<code> TimeModelEnum            (str, Enum)         </code>","text":"<p>Enum that represents the different kind time models.</p> <ul> <li>HistoryTimeModel: A time model that is based on a sequence of values.</li> <li>FunctionTimeModel: A time model that is based on a distribution function which gets sampled.</li> <li>ManhattanDistanceTimeModel: A time model that is based on the manhattan distance between two nodes and a constant velocity.</li> </ul>"},{"location":"API_reference/API_reference_2_Adapter/","title":"Adapter","text":"<p>This module contains the adapters for the production system which are data containers for the data models defined in <code>prodsys.models</code>. The adapters are used in all algorithms that analyze or optimize a production system.  The data structure of the adapter can also be used to integrate new algorithms into prodsys by utilizing its defined data structure.  The adapters is the <code>prodsys.models</code> equivalent to the <code>prodsys.express.ProductionSystem</code> class and can be created from the express object. In contrast to the adapter, the express class nests the objects in a tree structure, which makes it easier to work with when instantiating a production system, but more complicated when reviewing the data itself. The adapter comes with a data validation that ensures that entered data is syntatically, semantically and logically valid. </p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter","title":"<code>adapter</code>","text":""},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.ProductionSystemAdapter","title":"<code> ProductionSystemAdapter            (ABC, BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>A ProductionSystemAdapter serves as a n abstract base class of a data container to represent a production system. It is based on the <code>prodsys.models</code> module, but is also compatible with the <code>prodsys.express</code> API. It is used as the basis for all simulation and optimization algorithms in prodsys and comes with complete data validation.  Thereby, it is assured that the expected data is used for simulation and optimization. If the data is not valid, an error is raised with information about the reasons for invalidity. The adapter targets easy integration of algorithms with each other in different environments.  Therefore, the adapter can even be used for integration of new algorithms by serving as a defined data interface. </p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the production system. Defaults to \"\".</p> required <code>seed</code> <code>int</code> <p>Seed for the random number generator used in simulation. Defaults to 0.</p> required <code>time_model_data</code> <code>List[time_model_data.TIME_MODEL_DATA]</code> <p>List of time models used by the entities in the production system. Defaults to [].</p> required <code>state_data</code> <code>List[state_data.STATE_DATA_UNION]</code> <p>List of states used by the resources in the production system. Defaults to [].</p> required <code>process_data</code> <code>List[processes_data.PROCESS_DATA_UNION]</code> <p>List of processes required by products and provided by resources in the production system. Defaults to [].</p> required <code>queue_data</code> <code>List[queue_data.QueueData]</code> <p>List of queues used by the resources, sources and sinks in the production system. Defaults to [].</p> required <code>resource_data</code> <code>List[resource_data.RESOURCE_DATA_UNION]</code> <p>List of resources in the production system. Defaults to [].</p> required <code>product_data</code> <code>List[product_data.ProductData]</code> <p>List of products in the production system. Defaults to [].</p> required <code>sink_data</code> <code>List[sink_data.SinkData]</code> <p>List of sinks in the production system. Defaults to [].</p> required <code>source_data</code> <code>List[source_data.SourceData]</code> <p>List of sources in the production system. Defaults to [].</p> required <code>scenario_data</code> <code>Optional[scenario_data.ScenarioData]</code> <p>Scenario data of the production system used for optimization. Defaults to None.</p> required <code>valid_configuration</code> <code>bool</code> <p>Indicates if the configuration is valid. Defaults to True.</p> required <code>reconfiguration_cost</code> <code>float</code> <p>Cost of reconfiguration in a optimization scenario. Defaults to 0.</p> required"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.ProductionSystemAdapter.hash","title":"<code>hash(self)</code>","text":"<p>Generates a hash of the adapter based on the hash of all contained entities. Only information describing the physical structure and functionality of the production system is considered. Can be used to compare two production systems of adapters for functional equality.</p> <p>Returns:</p> Type Description <code>str</code> <p>Hash of the adapter</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.ProductionSystemAdapter.physical_validation","title":"<code>physical_validation(self)</code>","text":"<p>Checks if the configuration is physically valid, i.e. if all resources are positioned at different locations and if all required processes are available.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If multiple objects are positioned at the same location.</p> <code>ValueError</code> <p>If not all required process are available.</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.ProductionSystemAdapter.read_data","title":"<code>read_data(self, file_path, scenario_file_path=None)</code>","text":"<p>Reads the data from the given file path and scenario file path.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>File path for the production system configuration</p> required <code>scenario_file_path</code> <code>Optional[str]</code> <p>File path for the scenario data. Defaults to None.</p> <code>None</code>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.ProductionSystemAdapter.write_data","title":"<code>write_data(self, file_path)</code>","text":"<p>Writes the data to the given file path.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>File path for the production system configuration</p> required"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.add_default_queues_to_adapter","title":"<code>add_default_queues_to_adapter(adapter, queue_capacity=0.0)</code>","text":"<p>Convenience function to add default queues to all machines, sources and sinks in the adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object</p> required <code>queue_capacity</code> <code>float</code> <p>Capacity of the default queues. Defaults to 0.0 (infinite queue).</p> <code>0.0</code> <p>Returns:</p> Type Description <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object with default queues added to all machines, sources and sinks</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.add_default_queues_to_resources","title":"<code>add_default_queues_to_resources(adapter, queue_capacity=0.0)</code>","text":"<p>Convenience function to add default queues to all machines in the adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object</p> required <code>queue_capacity</code> <code>float</code> <p>Capacity of the default queues. Defaults to 0.0 (infinite queue).</p> <code>0.0</code> <p>Returns:</p> Type Description <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object with default queues added to all machines</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.add_default_queues_to_sinks","title":"<code>add_default_queues_to_sinks(adapter, queue_capacity=0.0)</code>","text":"<p>Convenience function to add default queues to all sinks in the adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object</p> required <code>queue_capacity</code> <code>float</code> <p>Capacity of the default queues. Defaults to 0.0 (infinite queue).</p> <code>0.0</code> <p>Returns:</p> Type Description <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object with default queues added to all sinks</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.add_default_queues_to_sources","title":"<code>add_default_queues_to_sources(adapter, queue_capacity=0.0)</code>","text":"<p>Convenience function to add default queues to all sources in the adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object</p> required <code>queue_capacity</code> <code>float</code> <p>Capacity of the default queues. Defaults to 0.0 (infinite queue).</p> <code>0.0</code> <p>Returns:</p> Type Description <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object with default queues added to all sources</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.get_default_queue_for_sink","title":"<code>get_default_queue_for_sink(sink, queue_capacity=0.0)</code>","text":"<p>Returns a default queue for the given sink.</p> <p>Parameters:</p> Name Type Description Default <code>sink</code> <code>sink_data.SinkData</code> <p>Sink for which the default queue should be returned</p> required <code>queue_capacity</code> <code>float</code> <p>Capacity of the default queue. Defaults to 0.0 (infinite queue).</p> <code>0.0</code> <p>Returns:</p> Type Description <code>queue_data.QueueData</code> <p>Default queue for the given sink</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.get_default_queue_for_source","title":"<code>get_default_queue_for_source(source, queue_capacity=0.0)</code>","text":"<p>Returns a default queue for the given source.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>source_data.SourceData</code> <p>Source for which the default queue should be returned</p> required <code>queue_capacity</code> <code>float</code> <p>Capacity of the default queue. Defaults to 0.0 (infinite queue).</p> <code>0.0</code> <p>Returns:</p> Type Description <code>queue_data.QueueData</code> <p>Default queue for the given source</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.get_default_queues_for_resource","title":"<code>get_default_queues_for_resource(resource, queue_capacity=0.0)</code>","text":"<p>Returns a tuple of two lists of default queues for the given resource. The first list contains the default input queues and the second list contains the default output queues.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>resource_data.ProductionResourceData</code> <p>Resource for which the default queues should be returned</p> required <code>queue_capacity</code> <code>Union[float, int]</code> <p>Capacity of the default queues. Defaults to 0.0 (infinite queue).</p> <code>0.0</code> <p>Returns:</p> Type Description <code>Tuple[List[queue_data.QueueData], List[queue_data.QueueData]]</code> <p>Tuple of two lists of default queues for the given resource</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.get_machines","title":"<code>get_machines(adapter)</code>","text":"<p>Returns a list of all machines in the adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object</p> required <p>Returns:</p> Type Description <code>List[resource_data.ProductionResourceData]</code> <p>List of all machines in the adapter</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.get_set_of_IDs","title":"<code>get_set_of_IDs(list_of_objects)</code>","text":"<p>Returns a set of all IDs of the objects in the list, by utilizing the ID attribute of the objects.</p> <p>Parameters:</p> Name Type Description Default <code>list_of_objects</code> <code>List[Any]</code> <p>List of objects that have an ID attribute</p> required <p>Returns:</p> Type Description <code>Set[str]</code> <p>Set of all IDs of the objects in the list</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.adapter.get_transport_resources","title":"<code>get_transport_resources(adapter)</code>","text":"<p>Returns a list of all transport resources in the adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>ProductionSystemAdapter</code> <p>ProductionSystemAdapter object</p> required <p>Returns:</p> Type Description <code>List[resource_data.TransportResourceData]</code> <p>List of all transport resources in the adapter</p>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.json_adapter","title":"<code>json_adapter</code>","text":""},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.json_adapter.JsonProductionSystemAdapter","title":"<code> JsonProductionSystemAdapter            (ProductionSystemAdapter)         </code>  <code>pydantic-model</code>","text":"<p>JsonProductionSystemAdapter is a class that implements the abstract class ProductionSystemAdapter and allows to read and write data from and to a json file.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the production system. Defaults to \"\".</p> required <code>seed</code> <code>int</code> <p>Seed for the random number generator used in simulation. Defaults to 0.</p> required <code>time_model_data</code> <code>List[time_model_data.TIME_MODEL_DATA]</code> <p>List of time models used by the entities in the production system. Defaults to [].</p> required <code>state_data</code> <code>List[state_data.STATE_DATA_UNION]</code> <p>List of states used by the resources in the production system. Defaults to [].</p> required <code>process_data</code> <code>List[processes_data.PROCESS_DATA_UNION]</code> <p>List of processes required by products and provided by resources in the production system. Defaults to [].</p> required <code>queue_data</code> <code>List[queue_data.QueueData]</code> <p>List of queues used by the resources, sources and sinks in the production system. Defaults to [].</p> required <code>resource_data</code> <code>List[resource_data.RESOURCE_DATA_UNION]</code> <p>List of resources in the production system. Defaults to [].</p> required <code>product_data</code> <code>List[product_data.ProductData]</code> <p>List of products in the production system. Defaults to [].</p> required <code>sink_data</code> <code>List[sink_data.SinkData]</code> <p>List of sinks in the production system. Defaults to [].</p> required <code>source_data</code> <code>List[source_data.SourceData]</code> <p>List of sources in the production system. Defaults to [].</p> required <code>scenario_data</code> <code>Optional[scenario_data.ScenarioData]</code> <p>Scenario data of the production system used for optimization. Defaults to None.</p> required <code>valid_configuration</code> <code>bool</code> <p>Indicates if the configuration is valid. Defaults to True.</p> required <code>reconfiguration_cost</code> <code>float</code> <p>Cost of reconfiguration in a optimization scenario. Defaults to 0.</p> required"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.json_adapter.JsonProductionSystemAdapter.read_data","title":"<code>read_data(self, file_path, scenario_file_path=None)</code>","text":"<p>Reads the data from the given file path and scenario file path.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>File path for the production system configuration</p> required <code>scenario_file_path</code> <code>Optional[str]</code> <p>File path for the scenario data. Defaults to None.</p> <code>None</code>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.json_adapter.JsonProductionSystemAdapter.read_data_old","title":"<code>read_data_old(self, file_path, scenario_file_path=None)</code>","text":"<p>Reads the data from the given file path and scenario file path.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>File path for the production system configuration</p> required <code>scenario_file_path</code> <code>Optional[str]</code> <p>File path for the scenario data. Defaults to None.</p> <code>None</code>"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.json_adapter.JsonProductionSystemAdapter.write_data","title":"<code>write_data(self, file_path)</code>","text":"<p>Writes the data to the given file path.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>File path for the production system configuration</p> required"},{"location":"API_reference/API_reference_2_Adapter/#prodsys.adapters.json_adapter.JsonProductionSystemAdapter.write_scenario_data","title":"<code>write_scenario_data(self, file_path)</code>","text":"<p>Writes the scenario data to the given file path.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>File path for the scenario data.</p> required"},{"location":"API_reference/API_reference_3_Express_API/","title":"prodsys Express API","text":"<p>This module contains the <code>prodsys.express</code> API with classes and functions to easily specify all parameters of a production system. This API is completely compatible with <code>prodsys.models</code> and every object can be converted to a data object from <code>prodsys.models</code> using the <code>to_model</code> method.</p> <p>The express API is more convenient to use than the <code>prodsys.models</code> API because the express API nests the objects in a tree structure, which makes it easier to work with when instantiating production system programatically. </p> <p>However, the express API does not support all features of the <code>prodsys.models</code> API and saved data is more complicated to review because of the nesting.</p> <p>Recommended is to use the API for programmatically specifying a production system but saving the data in the <code>prodsys.models</code> format with the <code>ProductionSystemAdapter</code>.</p> <p>The following modules are available:</p> <ul> <li><code>prodsys.express.core</code>: Contains the abstract base class for express objects. </li> <li><code>prodsys.express.product</code>: Contains classes to specify products.</li> <li><code>prodsys.express.process</code>: Contains classes to specify processes.</li> <li><code>prodsys.express.production_system</code>: Contains classes to specify a production system.</li> <li><code>prodsys.express.resources</code>: Contains classes to specify resources.</li> <li><code>prodsys.express.sink</code>: Contains classes to specify sinks.</li> <li><code>prodsys.express.source</code>: Contains classes to specify sources.</li> <li><code>prodsys.express.state</code>: Contains classes to specify states.</li> <li><code>prodsys.express.time_model</code>: Contains classes to specify time models.</li> </ul>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.core","title":"<code>core</code>","text":""},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.core.ExpressObject","title":"<code> ExpressObject            (ABC)         </code>","text":"<p>Abstract base class to represents an express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.core.ExpressObject.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>core_asset.CoreAsset</code> <p>An instance of the data object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.process","title":"<code>process</code>","text":"<p><code>process</code> module contains the <code>prodsys.express</code> classes to represent the processes that can  be performed on products by resources.</p> <p>The following processes are possible: - <code>ProductionProcess</code>: A process that can be performed on a product by a production resource. - <code>CapabilityProcess</code>: A process that can be performed on a product by a resource, based on the capability of the resource. - <code>TransportProcess</code>: A process that can be performed on a product by a transport resource.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.process.CapabilityProcess","title":"<code> CapabilityProcess            (Process, ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a capability process. For capability processes, matching of  required processes of product and provided processes by resources is done based on  the capability instead of the porcess itself.</p> <p>Parameters:</p> Name Type Description Default <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Time model of the process.</p> required <code>capability</code> <code>str</code> <p>Capability of the process.</p> required <code>ID</code> <code>str</code> <p>ID of the process.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function CapabilityProcess.&lt;lambda&gt; at 0x0000022AC1D01440&gt;, extra={})</code> <p>Attributes:</p> Name Type Description <code>type</code> <code>processes_data.ProcessTypeEnum</code> <p>Type of the process. Equals to processes_data.ProcessTypeEnum.CapabilityProcesses.</p> <p>Examples:</p> <p>Capability process with a function time model: <pre><code>import prodsys.express as psx\nwelding_time_model = psx.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=20.0,\n    scale=5.0,\n)\npsx.CapabilityProcess(\n    time_model=welding_time_model,\n    capability=\"welding\"\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.process.CapabilityProcess.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>processes_data.CapabilityProcessData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.process.DefaultProcess","title":"<code> DefaultProcess            (Process)         </code>  <code>dataclass</code>","text":"<p>Abstract base class to represents a process, with no additional attributes than type and ID.</p> <p>Parameters:</p> Name Type Description Default <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Time model of the process.</p> required <code>ID</code> <code>str</code> <p>ID of the process.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function DefaultProcess.&lt;lambda&gt; at 0x0000022AC1D00B80&gt;, extra={})</code> <p>Attributes:</p> Name Type Description <code>type</code> <code>processes_data.ProcessTypeEnum</code> <p>Type of the process.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.process.Process","title":"<code> Process            (ABC)         </code>  <code>dataclass</code>","text":"<p>Abstract base class to represents a process.</p> <p>Parameters:</p> Name Type Description Default <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Time model of the process.</p> required <p>Attributes:</p> Name Type Description <code>type</code> <code>processes_data.ProcessTypeEnum</code> <p>Type of the process.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.process.ProductionProcess","title":"<code> ProductionProcess            (DefaultProcess, ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a production process.</p> <p>Parameters:</p> Name Type Description Default <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Time model of the process.</p> required <code>ID</code> <code>str</code> <p>ID of the process.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function DefaultProcess.&lt;lambda&gt; at 0x0000022AC1D00B80&gt;, extra={})</code> <p>Attributes:</p> Name Type Description <code>type</code> <code>processes_data.ProcessTypeEnum</code> <p>Type of the process. Equals to processes_data.ProcessTypeEnum.ProductionProcesses.</p> <p>Examples:</p> <p>Production process with a function time model: <pre><code>import prodsys.express as psx\nwelding_time_model = psx.time_model_data.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=20.0,\n    scale=5.0,\n)\npsx.ProductionProcess(\n    time_model=welding_time_model,\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.process.ProductionProcess.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>processes_data.ProductionProcessData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.process.TransportProcess","title":"<code> TransportProcess            (DefaultProcess, ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a transport process. Transport processes are required to transport product from one location to another. </p> <p>Parameters:</p> Name Type Description Default <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Time model of the process.</p> required <code>ID</code> <code>str</code> <p>ID of the process.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function DefaultProcess.&lt;lambda&gt; at 0x0000022AC1D00B80&gt;, extra={})</code> <p>Attributes:</p> Name Type Description <code>type</code> <code>processes_data.ProcessTypeEnum</code> <p>Type of the process. Equals to processes_data.ProcessTypeEnum.TransportProcesses.</p> <p>Examples:</p> <p>Transport process with a manhattan distance time model: <pre><code>import prodsys.express as psx\nmanhattan_time_model = psx.ManhattenDistanceTimeModel(\n    speed=30.0,\n    reaction_time=0.15,\n)\npsx.TransportProcess(\n    time_model=manhattan_time_model\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.process.TransportProcess.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>processes_data.TransportProcessData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.product","title":"<code>product</code>","text":""},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.product.Product","title":"<code> Product            (ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a product.</p> <p>Parameters:</p> Name Type Description Default <code>processes</code> <code>List[Union[process.ProductionProcess, process.CapabilityProcess]]</code> <p>Processes of the product required for its production. These processes are executed sequentially. To have more degree of freedom with precedence graph process models, use the prodsys.datastructures API of product.</p> required <code>transport_process</code> <code>process.TransportProcess</code> <p>Transport process of the product.</p> required <code>ID</code> <code>str</code> <p>ID of the product.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function Product.&lt;lambda&gt; at 0x0000022AC1D03BA0&gt;, extra={})</code> <p>Examples:</p> <p>Product with 2 sequential processes and a transport process: <pre><code>import prodsys.express as psx\nwelding_time_model = psx.time_model_data.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=20.0,\n    scale=5.0,\n )\nwelding_process_1 = psx.process.ProductionProcess(\n    time_model=welding_time_model,\n)\nwelding_process_2 = psx.process.ProductionProcess(\n    time_model=welding_time_model,\n)\ntransport_time_model = psx.time_model_data.ManhattenDistanceTimeModel(\n    speed=10,\n    reaction_time= 0.3\n)\ntransport_process = psx.process.TransportProcess(\n    time_model=transport_time_model,\n)\npsx.Product(\n    processes=[welding_process_1, welding_process_2],\n    transport_process=transport_process\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.product.Product.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>product_data.ProductData</code> <p>An instance of the data object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.production_system","title":"<code>production_system</code>","text":""},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.production_system.ProductionSystem","title":"<code> ProductionSystem            (ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a production system. A production system containts of resources, products, sources and sinks. It is the <code>prodsys.express</code> equivalent to the 'ProductionSystemAdapter' of the <code>prodsys.adapters</code> module and can be converted to this data object. In contrast to the adapter, this class nests the objects in a tree structure, which makes it easier to work with when instantiating a production system, but more complicated when reviewing the data itself.</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[resources.Resource]</code> <p>Resources of the production system.</p> required <code>sources</code> <code>List[source.Source]</code> <p>Sources of the production system.</p> required <code>sinks</code> <code>List[sink.Sink]</code> <p>Sinks of the production system.</p> required"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.production_system.ProductionSystem.run","title":"<code>run(self, time_range=2880, seed=0)</code>","text":"<p>Runs the simulation of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>time_range</code> <code>float</code> <p>The time range of the simulation. Defaults to 2880.</p> <code>2880</code> <code>seed</code> <code>int</code> <p>The seed of the simulation. Defaults to 0.</p> <code>0</code>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.production_system.ProductionSystem.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>prodsys.adapters.Adapter</code> <p>An instance of the data object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.production_system.ProductionSystem.validate","title":"<code>validate(self)</code>","text":"<p>Validates the production system. Checks if the production system is valid.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the production system is not valid.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.production_system.remove_duplicate_items","title":"<code>remove_duplicate_items(items)</code>","text":"<p>Removes duplicate items from a list of items.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.resources","title":"<code>resources</code>","text":"<p>In <code>prodsys</code> exist two different types of resources: production resources and transport resources. Production resources are resources that can perform processes on products. Transport resources are resources that can transport products from one location to another. Both types of resources are represented by the <code>Resource</code> class. The <code>Resource</code> class is an abstract base class and cannot be instantiated. Instead, the <code>ProductionResource</code> and <code>TransportResource</code> classes can be used to represent production resources and transport resources, respectively.</p> <p>The following resources are available:</p> <ul> <li><code>ProductionResource</code>: Class that represents a production resource.</li> <li><code>TransportResource</code>: Class that represents a transport resource.</li> </ul>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.resources.ProductionResource","title":"<code> ProductionResource            (Resource, ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a production resource.</p> <p>Parameters:</p> Name Type Description Default <code>processes</code> <code>List[process.ProductionProcess]</code> <p>Processes of the resource.</p> required <code>location</code> <code>conlist(float, min_items=2, max_items=2</code> <p>Location of the resource.</p> required <code>capacity</code> <code>int</code> <p>Capacity of the resource. Defaults to 1.</p> <code>1</code> <code>states</code> <code>Optional[List[state.STATE_UNION]]</code> <p>States of the resource. Defaults to None.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;class 'list'&gt;, extra={})</code> <code>controller</code> <code>resource_data.ControllerEnum</code> <p>Controller of the resource. Defaults to resource_data.ControllerEnum.PipelineController.</p> <code>&lt;ControllerEnum.PipelineController: 'PipelineController'&gt;</code> <code>control_policy</code> <code>resource_data.ResourceControlPolicy</code> <p>Control policy of the resource. Defaults to resource_data.ResourceControlPolicy.FIFO.</p> <code>&lt;ResourceControlPolicy.FIFO: 'FIFO'&gt;</code> <code>queue_size</code> <code>Optional[int]</code> <p>Queue size of the resource. Defaults to 0 (infinte queue).</p> <code>0</code> <code>ID</code> <code>str</code> <p>ID of the resource.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function Resource.&lt;lambda&gt; at 0x0000022AC1D02F20&gt;, extra={})</code> <p>Examples:</p> <p>Production resource with a capacity of 2 and 2 production processes: <pre><code>import prodsys.express as psx\nwelding_time_model = psx.time_model_data.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=20.0,\n    scale=5.0,\n)\nscrewing_time_model = psx.time_model_data.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=10.0,\n    scale=2.0,\n)\nwelding_process = psx.process.ProductionProcess(\n    time_model=welding_time_model\n)\nscrewing_process = psx.process.ProductionProcess(\n    time_model=screwing_time_model\n)\npsx.ProductionResource(\n    processes=[welding_process, screwing_process],\n    location=[10.0, 10.0]\n    capacity=2\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.resources.ProductionResource.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>resource_data.ProductionResourceData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.resources.Resource","title":"<code> Resource            (ABC)         </code>  <code>dataclass</code>","text":"<p>Abstract base class to represents a resource.</p> <p>Parameters:</p> Name Type Description Default <code>processes</code> <code>List[process.PROCESS_UNION]</code> <p>Processes of the resource.</p> required <code>location</code> <code>conlist(float, min_items=2, max_items=2</code> <p>Location of the resource.</p> required <code>capacity</code> <code>int</code> <p>Capacity of the resource. Defaults to 1.</p> <code>1</code> <code>states</code> <code>Optional[List[state.STATE_UNION]]</code> <p>States of the resource. Defaults to None.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;class 'list'&gt;, extra={})</code> <code>controller</code> <code>resource_data.ControllerEnum</code> <p>Controller of the resource. Defaults to resource_data.ControllerEnum.PipelineController.</p> <code>&lt;ControllerEnum.PipelineController: 'PipelineController'&gt;</code> <code>control_policy</code> <code>resource_data.ResourceControlPolicy</code> <p>Control policy of the resource. Defaults to resource_data.ResourceControlPolicy.FIFO.</p> <code>&lt;ResourceControlPolicy.FIFO: 'FIFO'&gt;</code> <code>ID</code> <code>str</code> <p>ID of the resource.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function Resource.&lt;lambda&gt; at 0x0000022AC1D02F20&gt;, extra={})</code>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.resources.TransportResource","title":"<code> TransportResource            (Resource, ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a transport resource.</p> <p>Parameters:</p> Name Type Description Default <code>processes</code> <code>List[process.TransportProcess]</code> <p>Processes of the resource.</p> required <code>location</code> <code>conlist(float, min_items=2, max_items=2</code> <p>Location of the resource.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;class 'list'&gt;, extra={})</code> <code>capacity</code> <code>int</code> <p>Capacity of the resource. Defaults to 1.</p> <code>1</code> <code>states</code> <code>Optional[List[state.STATE_UNION]]</code> <p>States of the resource. Defaults to None.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;class 'list'&gt;, extra={})</code> <code>controller</code> <code>resource_data.ControllerEnum</code> <p>Controller of the resource. Defaults to resource_data.ControllerEnum.TransportController.</p> <code>&lt;ControllerEnum.TransportController: 'TransportController'&gt;</code> <code>control_policy</code> <code>resource_data.TransportControlPolicy</code> <p>Control policy of the resource. Defaults to resource_data.TransportControlPolicy.FIFO.</p> <code>&lt;TransportControlPolicy.FIFO: 'FIFO'&gt;</code> <code>ID</code> <code>str</code> <p>ID of the resource.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function Resource.&lt;lambda&gt; at 0x0000022AC1D02F20&gt;, extra={})</code> <p>Examples:</p> <p>Transport resource with a capacity of 1: <pre><code>import prodsys.express as psx\ntime_model = psx.time_model_data.ManhattanDistanceTimeModel(\n    speed=1.0,\n    reaction_time=1.0,\n)\ntransport_process = psx.process.TransportProcess(\n    time_model=time_model\n)\npsx.TransportResource(\n    processes=[transport_process],\n    location=[10.0, 10.0]\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.resources.TransportResource.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>resource_data.TransportResourceData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.sink","title":"<code>sink</code>","text":""},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.sink.Sink","title":"<code> Sink            (ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a sink.</p> <p>Parameters:</p> Name Type Description Default <code>product</code> <code>product.Product</code> <p>Product of the sink.</p> required <code>location</code> <code>conlist(float, min_items=2, max_items=2</code> <p>Location of the sink.</p> required <code>ID</code> <code>str</code> <p>ID of the sink.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function Sink.&lt;lambda&gt; at 0x0000022AC1CD85E0&gt;, extra={})</code> <p>Attributes:</p> Name Type Description <code>_input_queues</code> <code>List[queue_data.QueueData]</code> <p>Input queues of the sink.</p> <p>Examples:</p> <p>Creation of a sink with a product and a location: <pre><code>import prodsys.express as psx\nwelding_time_model = psx.time_model_data.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=20.0,\n    scale=5.0,\n)\nwelding_process_1 = psx.process.ProductionProcess(\n    time_model=welding_time_model,\n)\nwelding_process_2 = psx.process.ProductionProcess(\n    time_model=welding_time_model,\n)\ntransport_time_model = psx.time_model_data.ManhattenDistanceTimeModel(\n    speed=10,\n    reaction_time= 0.3\n)\ntransport_process = psx.process.TransportProcess(\n    time_model=transport_time_model,\n)\nproduct = psx.Product(\n    processes=[welding_process_1, welding_process_2],\n    transport_process=transport_process \n)\npsx.Sink(\n    product=product,\n    location=[0.0, 0.0],\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.sink.Sink.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>sink_data.SinkData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.source","title":"<code>source</code>","text":""},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.source.Source","title":"<code> Source            (ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a source.</p> <p>Parameters:</p> Name Type Description Default <code>product</code> <code>product.Product</code> <p>Product of the source.</p> required <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Time model of the source that determines the inter-arrival time of products.</p> required <code>location</code> <code>conlist(float, min_items=2, max_items=2</code> <p>Location of the source.</p> required <code>routing_heuristic</code> <code>source_data.RoutingHeuristic</code> <p>Routing heuristic of the source. Defaults to source_data.RoutingHeuristic.random.</p> <code>&lt;RoutingHeuristic.random: 'random'&gt;</code> <code>ID</code> <code>str</code> <p>ID of the source.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function Source.&lt;lambda&gt; at 0x0000022AC1CD80E0&gt;, extra={})</code> <p>Attributes:</p> Name Type Description <code>_output_queues</code> <code>List[queue_data.QueueData]</code> <p>Output queues of the source.</p> <p>Examples:</p> <p>Creation of a source with a product, a time model and a location: <pre><code>import prodsys.express as psx\nwelding_time_model = psx.time_model_data.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=20.0,\n    scale=5.0,\n)\nwelding_process_1 = psx.process.ProductionProcess(\n    time_model=welding_time_model,\n)\nwelding_process_2 = psx.process.ProductionProcess(\n    time_model=welding_time_model,\n)\ntransport_time_model = psx.time_model_data.ManhattenDistanceTimeModel(\n    speed=10,\n    reaction_time= 0.3\n)\ntransport_process = psx.process.TransportProcess(\n    time_model=transport_time_model,\n)\nproduct = psx.Product(\n    processes=[welding_process_1, welding_process_2],\n    transport_process=transport_process\n)\narrival_time_model = psx.time_model_data.FunctionTimeModel(\n    distribution_function=\"exponential\",\n    scale=10.0,\n)\npsx.Source(\n    product=product,\n    time_model=arrival_time_model,\n    location=[0.0, 0.0],\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.source.Source.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>source_data.SourceData</code> <p>An instance of the data object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.state","title":"<code>state</code>","text":"<p>The <code>state</code> module contains the <code>prodsys.express</code> classes to represent the states that resources  can be in during a simulation, besides processing and standby.</p> <p>The following states are possible:</p> <ul> <li><code>Breakdown</code>: A state that makes a resource unavailable for a certain time.</li> <li><code>ProcessBreakdown</code>: A state that makes a process unavailable for a certain time but other processes can still be performed.</li> <li><code>Setup</code>: A state that represents the time needed to change the process of a resource.     </li> </ul>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.state.BreakDownState","title":"<code> BreakDownState            (State, ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a breakdown state.</p> <p>Parameters:</p> Name Type Description Default <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Breakdwon occurence time model of the state.</p> required <code>repair_time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Reapit time model of the state.    </p> required <code>ID</code> <code>str</code> <p>ID of the state.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function BreakDownState.&lt;lambda&gt; at 0x0000022AC1D02020&gt;, extra={})</code> <p>Attributes:</p> Name Type Description <code>type</code> <code>state_data.StateTypeEnum</code> <p>Type of the state. Equals to state_data.StateTypeEnum.BreakDownState.</p> <p>Examples:</p> <p>Breakdown state with a function time model: <pre><code>import prodsys.express as psx\nbreakdown_time_model = psx.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=10.0,\n    scale=5.0,\n)\nrepair_time_model = psx.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=10.0,\n    scale=5.0,\n)\npsx.BreakDownState(\n    time_model=breakdown_time_model,\n    reapit_time_model=repair_time_model\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.state.BreakDownState.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>state_data.BreakDownStateData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.state.ProcessBreakdownState","title":"<code> ProcessBreakdownState            (State, ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a process breakdown state.</p> <p>Parameters:</p> Name Type Description Default <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Breakdwon occurence time model of the state.</p> required <code>repair_time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Reapit time model of the state.</p> required <code>process</code> <code>process.PROCESS_UNION</code> <p>Process that is broken down due to this breakdown state.</p> required <code>ID</code> <code>str</code> <p>ID of the state.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function ProcessBreakdownState.&lt;lambda&gt; at 0x0000022AC1D025C0&gt;, extra={})</code> <p>Attributes:</p> Name Type Description <code>type</code> <code>state_data.StateTypeEnum</code> <p>Type of the state. Equals to state_data.StateTypeEnum.ProcessBreakDownState.</p> <p>Examples:</p> <p>Process breakdown state with a normally distributed repair and breakdwon time for an examplary process:</p> <pre><code>import prodsys.express as psx\nbreakdown_time_model = psx.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=100.0,\n    scale=23.0,\n)\nrepair_time_model = psx.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=10.0,\n    scale=5.0,\n)\nprocess_time_model = psx.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=10.0,\n    scale=5.0,\n)\nprocess = psx.ProdutionProcess(\n    time_model=process_time_model\n)\npsx.ProcessBreakDownState(\n    time_model=breakdown_time_model,\n    repair_time_model=repair_time_model,\n    process=process\n)\n</code></pre>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.state.ProcessBreakdownState.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>state_data.ProcessBreakDownStateData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.state.SetupState","title":"<code> SetupState            (State, ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a setup state.</p> <p>Parameters:</p> Name Type Description Default <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Time model of the state.</p> required <code>origin_setup</code> <code>process.Process</code> <p>Process that is the origin of the setup.</p> required <code>target_setup</code> <code>process.Process</code> <p>Process that is the target of the setup.</p> required <code>ID</code> <code>str</code> <p>ID of the state.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function SetupState.&lt;lambda&gt; at 0x0000022AC1D02A20&gt;, extra={})</code> <p>Attributes:</p> Name Type Description <code>type</code> <code>state_data.StateTypeEnum</code> <p>Type of the state. Equals to state_data.StateTypeEnum.SetupState.</p> <p>Examples:</p> <p>Setup state with a function time model: <pre><code>import prodsys.express as psx\nsetup_time_model = psx.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=10.0,\n    scale=5.0,\n)\ndummy_process_time_model = psx.FunctionTimeModel(\n    distribution_function=\"constant\",\n    location=10.0,\n    scale=0.0,\n)\ndummy_origin_process = psx.ProductionProcess(\n    time_model=dummy_process_time_model\n)\ndummy_target_process = psx.ProductionProcess(\n    time_model=dummy_process_time_model\n)\npsx.SetupState(\n    time_model=setup_time_model,\n    origin_setup=dummy_origin_process,\n    target_setup=dummy_target_process\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.state.SetupState.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>state_data.SetupStateData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.state.State","title":"<code> State            (ABC)         </code>  <code>dataclass</code>","text":"<p>Abstract base class to represents a state.</p> <p>Parameters:</p> Name Type Description Default <code>time_model</code> <code>time_model.TIME_MODEL_UNION</code> <p>Time model of the state.</p> required"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.time_model","title":"<code>time_model</code>","text":"<p>The <code>time_model</code> module contains classes to specify time models in the simulation for the arrival of products, performance of processes and the duration of states.</p> <p>The following time models are possible: - <code>SequentialTimeModel</code>: A time model that is based on a sequence of values. - <code>FunctionTimeModel</code>: A time model that is based on a distribution function which gets sampled. - <code>ManhattanDistanceTimeModel</code>: A time model that is based on the manhattan distance between two nodes and a constant velocity.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.time_model.FunctionTimeModel","title":"<code> FunctionTimeModel            (ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a time model that is based on a function and represents the timely values by their distribution function.</p> <p>Parameters:</p> Name Type Description Default <code>distribution_function</code> <code>FunctionTimeModelEnum</code> <p>Function that represents the time model, can either be 'normal', 'lognormal', 'exponential' or 'constant'.</p> required <code>location</code> <code>float</code> <p>Location parameter of the distribution function.</p> required <code>scale</code> <code>float</code> <p>Scale parameter of the distribution function.</p> <code>0.0</code> <code>ID</code> <code>str</code> <p>ID of the time model.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function FunctionTimeModel.&lt;lambda&gt; at 0x0000022AC1D000E0&gt;, extra={})</code> <p>Examples:</p> <p>Normal distribution time model with 20 minutes mean and 5 minutes standard deviation: <pre><code>import prodsys.express as psx\npsx.FunctionTimeModel(\n    distribution_function=\"normal\",\n    location=20.0,\n    scale=5.0,\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.time_model.FunctionTimeModel.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>time_model_data.FunctionTimeModelData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.time_model.ManhattanDistanceTimeModel","title":"<code> ManhattanDistanceTimeModel            (ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a time model that is based on the manhattan distance between two nodes and a constant velocity.</p> <p>Parameters:</p> Name Type Description Default <code>speed</code> <code>float</code> <p>Speed of the vehicle in meters per minute.</p> required <code>reaction_time</code> <code>float</code> <p>Reaction time of the driver in minutes.</p> required <p>Examples:</p> <p>Manhattan distance time model with a speed of 50 meters per minute and a reaction time of 0.5 minutes: <pre><code>import prodsys.express as psx\npsx.ManhattenDistanceTimeModel(\n    speed=50.0,\n    reaction_time=0.5,\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.time_model.ManhattanDistanceTimeModel.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>time_model_data.ManhattanDistanceTimeModelData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.time_model.SequentialTimeModel","title":"<code> SequentialTimeModel            (ExpressObject)         </code>  <code>dataclass</code>","text":"<p>Class that represents a time model that is based on a sequence of values.</p> <p>Parameters:</p> Name Type Description Default <code>sequence</code> <code>List[float]</code> <p>Sequence of time values.</p> required <code>ID</code> <code>str</code> <p>ID of the time model.</p> <code>FieldInfo(default=PydanticUndefined, default_factory=&lt;function SequentialTimeModel.&lt;lambda&gt; at 0x0000022AC0BE3420&gt;, extra={})</code> <p>Examples:</p> <p>Sequential time model with 7 time values: <pre><code>import prodsys.express as psx\npsx.SequentialTimeModel(\n    sequence=[25.0, 13.0, 15.0, 16.0, 17.0, 20.0, 21.0],\n)\n</code></pre></p>"},{"location":"API_reference/API_reference_3_Express_API/#prodsys.express.time_model.SequentialTimeModel.to_model","title":"<code>to_model(self)</code>","text":"<p>Converts the <code>prodsys.express</code> object to a data object from <code>prodsys.models</code>.</p> <p>Returns:</p> Type Description <code>time_model_data.SequentialTimeModelData</code> <p>Data object of the express object.</p>"},{"location":"API_reference/API_reference_4_factories/","title":"Factories","text":"<p>The <code>prodsys.factories</code> package contains the factory classes to create <code>prodsys.simulation</code> objects from <code>prodsys.models</code> objects in order to initialize a simulation run.</p> <p>The following modules are available:</p> <ul> <li><code>prodsys.factories.product_factory</code>: Contains the factory class to create products.</li> <li><code>prodsys.factories.process_factory</code>: Contains the factory class to create processes.</li> <li><code>prodsys.factories.queue_factory</code>: Contains the factory class to create queues.</li> <li><code>prodsys.factories.resource_factory</code>: Contains the factory class to create resources.</li> <li><code>prodsys.factories.sink_factory</code>: Contains the factory class to create sinks.</li> <li><code>prodsys.factories.source_factory</code>: Contains the factory class to create sources.</li> <li><code>prodsys.factories.state_factory</code>: Contains the factory class to create states.</li> <li><code>prodsys.factories.time_model_factory</code>: Contains the factory class to create time models.</li> </ul>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.process_factory","title":"<code>process_factory</code>","text":""},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.process_factory.ProcessFactory","title":"<code> ProcessFactory            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Factory class that creates and stores <code>prodsys.simulation</code> process objects based on the given process data according to <code>prodsys.models.processes_data.PROCESS_UNION</code>.</p> <p>Parameters:</p> Name Type Description Default <code>time_model_factory</code> <code>time_model_factory.TimeModelFactory</code> <p>Factory that creates time model objects.</p> required <code>processes</code> <code>List[process.PROCESS_UNION]</code> <p>List of process objects. Defaults to [] and is filled by the <code>create_processes</code> method.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.process_factory.ProcessFactory.create_processes","title":"<code>create_processes(self, adapter)</code>","text":"<p>Creates process objects based on the given adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapter.ProductionSystemAdapter</code> <p>Adapter that contains the process data.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.process_factory.ProcessFactory.get_process","title":"<code>get_process(self, ID)</code>","text":"<p>Returns a process object based on the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the process object.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the process object is not found.</p> <p>Returns:</p> Type Description <code>Optional[process.PROCESS_UNION]</code> <p>Process object based on the given ID.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.process_factory.ProcessFactory.get_processes_in_order","title":"<code>get_processes_in_order(self, IDs)</code>","text":"<p>Returns a list of process objects in the order of the given IDs.</p> <p>Parameters:</p> Name Type Description Default <code>IDs</code> <code>List[str]</code> <p>List of IDs that is used to sort the process objects.</p> required <p>Returns:</p> Type Description <code>List[process.PROCESS_UNION]</code> <p>List of process objects in the order of the given IDs.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.product_factory","title":"<code>product_factory</code>","text":""},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.product_factory.ProductFactory","title":"<code> ProductFactory            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Factory class that creates and stores <code>prodsys.simulation</code> product objects from <code>prodsys.models</code> product objects.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>prodsys simulation environment.</p> required <code>process_factory</code> <code>process_factory.ProcessFactory</code> <p>Factory that creates process objects.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.product_factory.ProductFactory.create_process_model","title":"<code>create_process_model(self, product_data)</code>","text":"<p>Creates a process model based on the given product data.</p> <p>Parameters:</p> Name Type Description Default <code>product_data</code> <code>product_data.ProductData</code> <p>Product data that is used to create the process model.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the process model is not recognized.</p> <p>Returns:</p> Type Description <code>proces_models.ProcessModel</code> <p>Created process model.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.product_factory.ProductFactory.create_product","title":"<code>create_product(self, product_data, router)</code>","text":"<p>Creates a product object based on the given product data and router.</p> <p>Parameters:</p> Name Type Description Default <code>product_data</code> <code>product_data.ProductData</code> <p>Product data that is used to create the product object.</p> required <code>router</code> <code>router.Router</code> <p>Router that is used to route the product object.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the transport process is not found.</p> <p>Returns:</p> Type Description <code>product.Product</code> <p>Created product object.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.product_factory.ProductFactory.get_product","title":"<code>get_product(self, ID)</code>","text":"<p>Returns the product object with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the product object.</p> required <p>Returns:</p> Type Description <code>product.Product</code> <p>Product object with the given ID.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.product_factory.ProductFactory.register_finished_product","title":"<code>register_finished_product(self, product)</code>","text":"<p>Registers the given product object as a finished product object.</p> <p>Parameters:</p> Name Type Description Default <code>product</code> <code>product.Product</code> <p>Product object that is registered as a finished product object.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.product_factory.ProductFactory.remove_product","title":"<code>remove_product(self, product)</code>","text":"<p>Removes the given product object from the product factory list of current product objects.</p> <p>Parameters:</p> Name Type Description Default <code>product</code> <code>product.Product</code> <p>Product object that is removed.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.queue_factory","title":"<code>queue_factory</code>","text":""},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.queue_factory.QueueFactory","title":"<code> QueueFactory            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Factory class that creates and stores <code>prodsys.simulation</code> queue objects from <code>prodsys.models</code> queue objects.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>prodsys simulation environment.</p> required <p>Returns:</p> Type Description <code>_type_</code> <p>description</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.queue_factory.QueueFactory.create_queues","title":"<code>create_queues(self, adapter)</code>","text":"<p>Creates queue objects based on the given adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapter.ProductionSystemAdapter</code> <p>description</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.queue_factory.QueueFactory.get_queue","title":"<code>get_queue(self, ID)</code>","text":"<p>Metthod returns a queue object with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the queue object.</p> required <p>Returns:</p> Type Description <code>store.Queue</code> <p>Queue object with the given ID.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.queue_factory.QueueFactory.get_queues","title":"<code>get_queues(self, IDs)</code>","text":"<p>Method returns a list of queue objects with the given IDs.</p> <p>Parameters:</p> Name Type Description Default <code>IDs</code> <code>List[str]</code> <p>List of IDs of the queue objects.</p> required <p>Returns:</p> Type Description <code>List[store.Queue]</code> <p>List of queue objects with the given IDs.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.resource_factory","title":"<code>resource_factory</code>","text":""},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.resource_factory.ResourceFactory","title":"<code> ResourceFactory            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Factory class that creates and stores <code>prodsys.simulation</code> resource objects from <code>prodsys.models</code> resource objects.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>prodsys simulation environment.</p> required <code>process_factory</code> <code>process_factory.ProcessFactory</code> <p>Factory that creates process objects.</p> required <code>state_factory</code> <code>state_factory.StateFactory</code> <p>Factory that creates state objects.</p> required <code>queue_factory</code> <code>queue_factory.QueueFactory</code> <p>Factory that creates queue objects.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.resource_factory.ResourceFactory.create_resources","title":"<code>create_resources(self, adapter)</code>","text":"<p>Creates resource objects based on the given adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapter.ProductionSystemAdapter</code> <p>Adapter that contains the resource data.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.resource_factory.ResourceFactory.get_controller_of_resource","title":"<code>get_controller_of_resource(self, _resource)</code>","text":"<p>Method returns the controller of the given resource.</p> <p>Parameters:</p> Name Type Description Default <code>_resource</code> <code>resources.Resource</code> <p>Resource object.</p> required <p>Returns:</p> Type Description <code>Optional[Union[control.ProductionController, control.TransportController]]</code> <p>Controller of the given resource.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.resource_factory.ResourceFactory.get_resource","title":"<code>get_resource(self, ID)</code>","text":"<p>Method returns a resource object with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the resource object.</p> required <p>Returns:</p> Type Description <code>resources.RESOURCE_UNION</code> <p>Resource object with the given ID.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.resource_factory.ResourceFactory.get_resources","title":"<code>get_resources(self, IDs)</code>","text":"<p>Method returns a list of resource objects with the given IDs.</p> <p>Parameters:</p> Name Type Description Default <code>IDs</code> <code>List[str]</code> <p>List of IDs that is used to sort the resource objects.</p> required <p>Returns:</p> Type Description <code>List[resources.Resource]</code> <p>List of resource objects with the given IDs.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.resource_factory.ResourceFactory.get_resources_with_process","title":"<code>get_resources_with_process(self, target_process)</code>","text":"<p>Method returns a list of resource objects that contain the given process.</p> <p>Parameters:</p> Name Type Description Default <code>target_process</code> <code>process.Process</code> <p>Process object that is used to filter the resource objects.</p> required <p>Returns:</p> Type Description <code>List[resources.Resource]</code> <p>List of resource objects that contain the given process.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.resource_factory.ResourceFactory.start_resources","title":"<code>start_resources(self)</code>","text":"<p>Method starts the simpy processes of the controllers of the resources to initialize the simulation.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.sink_factory","title":"<code>sink_factory</code>","text":""},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.sink_factory.SinkFactory","title":"<code> SinkFactory            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Factory class that creates and stores <code>prodsys.simulation</code> sink objects from <code>prodsys.models</code> sink objects.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>prodsys simulation environment.</p> required <code>product_factory</code> <code>product_factory.ProductFactory</code> <p>Factory that creates product objects.</p> required <code>queue_factory</code> <code>queue_factory.QueueFactory</code> <p>Factory that creates queue objects.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.sink_factory.SinkFactory.create_sinks","title":"<code>create_sinks(self, adapter)</code>","text":"<p>Creates sink objects based on the given adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapter.ProductionSystemAdapter</code> <p>Adapter that contains the sink data.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.sink_factory.SinkFactory.get_sink","title":"<code>get_sink(self, ID)</code>","text":"<p>Method returns a sink object with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the sink object.</p> required <p>Returns:</p> Type Description <code>sink.Sink</code> <p>Sink object with the given ID.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.sink_factory.SinkFactory.get_sinks","title":"<code>get_sinks(self, IDs)</code>","text":"<p>Method returns a list of sink objects with the given IDs.</p> <p>Parameters:</p> Name Type Description Default <code>IDs</code> <code>List[str]</code> <p>List of IDs that is used to sort the sink objects.</p> required <p>Returns:</p> Type Description <code>List[sink.Sink]</code> <p>List of sink objects with the given IDs.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.sink_factory.SinkFactory.get_sinks_with_product_type","title":"<code>get_sinks_with_product_type(self, _SinkFactory__product_type)</code>","text":"<p>Method returns a list of sink objects with the given product type.</p> <p>Parameters:</p> Name Type Description Default <code>__product_type</code> <code>str</code> <p>Product type that is used to sort the sink objects.</p> required <p>Returns:</p> Type Description <code>List[sink.Sink]</code> <p>List of sink objects with the given product type.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.source_factory","title":"<code>source_factory</code>","text":""},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.source_factory.SourceFactory","title":"<code> SourceFactory            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Factory class that creates and stores <code>prodsys.simulation</code> source objects based on the given source data according to <code>prodsys.models.source_data.SourceData</code>.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>prodsys simulation environment.</p> required <code>product_factory</code> <code>product_factory.ProductFactory</code> <p>Factory that creates product objects.</p> required <code>time_model_factory</code> <code>time_model_factory.TimeModelFactory</code> <p>Factory that creates time model objects.</p> required <code>queue_factory</code> <code>queue_factory.QueueFactory</code> <p>Factory that creates queue objects.</p> required <code>resource_factory</code> <code>resource_factory.ResourceFactory</code> <p>Factory that creates resource objects.</p> required <code>sink_factory</code> <code>sink_factory.SinkFactory</code> <p>Factory that creates sink objects.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.source_factory.SourceFactory.create_sources","title":"<code>create_sources(self, adapter)</code>","text":"<p>Creates source objects based on the given adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapter.ProductionSystemAdapter</code> <p>Adapter that contains the source data.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.source_factory.SourceFactory.get_source","title":"<code>get_source(self, ID)</code>","text":"<p>Returns a source object with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID of the source object.</p> required <p>Returns:</p> Type Description <code>source.Source</code> <p>Source object with the given ID.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.source_factory.SourceFactory.get_sources","title":"<code>get_sources(self, IDs)</code>","text":"<p>Method returns a list of source objects with the given IDs.</p> <p>Parameters:</p> Name Type Description Default <code>IDs</code> <code>List[str]</code> <p>List of IDs that is used to sort the source objects.</p> required <p>Returns:</p> Type Description <code>List[source.Source]</code> <p>List of source objects with the given IDs.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.source_factory.SourceFactory.get_sources_with_product_type","title":"<code>get_sources_with_product_type(self, _SourceFactory__product_type)</code>","text":"<p>Method returns a list of source objects with the given product type.</p> <p>Parameters:</p> Name Type Description Default <code>__product_type</code> <code>str</code> <p>Product type that is used to sort the source objects. </p> required <p>Returns:</p> Type Description <code>List[source.Source]</code> <p>List of source objects with the given product type.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.source_factory.SourceFactory.start_sources","title":"<code>start_sources(self)</code>","text":"<p>Starts the processes of all source objects, i.e. initializes the simulation.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.state_factory","title":"<code>state_factory</code>","text":""},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.state_factory.StateFactory","title":"<code> StateFactory            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Factory class that creates and stores <code>prodsys.simulation</code> state objects from <code>prodsys.models</code> state objects.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>prodsys simulation environment.</p> required <code>time_model_factory</code> <code>time_model_factory.TimeModelFactory</code> <p>Factory that creates time model objects.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.state_factory.StateFactory.create_states","title":"<code>create_states(self, adapter)</code>","text":"<p>Creates state objects based on the given adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapter.ProductionSystemAdapter</code> <p>Adapter that contains the state data.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.state_factory.StateFactory.get_states","title":"<code>get_states(self, IDs)</code>","text":"<p>Returns a list of state objects with the given IDs.</p> <p>Parameters:</p> Name Type Description Default <code>IDs</code> <code>List[str]</code> <p>List of IDs that is used to sort the state objects.</p> required <p>Returns:</p> Type Description <code>List[state.STATE_UNION]</code> <p>List of state objects with the given IDs.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.time_model_factory","title":"<code>time_model_factory</code>","text":""},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.time_model_factory.TimeModelFactory","title":"<code> TimeModelFactory            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Factory class that creates and stores <code>prodsys.simulation</code> time model objects based on the given time model data according to <code>prodsys.models.time_model_data.TIME_MODEL_DATA</code>.</p> <p>Returns:</p> Type Description <code>_type_</code> <p>description</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.time_model_factory.TimeModelFactory.create_time_models","title":"<code>create_time_models(self, adapter)</code>","text":"<p>Creates time model objects based on the given adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapter.ProductionSystemAdapter</code> <p>Adapter that contains the time model data.</p> required"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.time_model_factory.TimeModelFactory.get_time_model","title":"<code>get_time_model(self, ID)</code>","text":"<p>Returns a time model object with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>ID that is used to filter the time model objects.</p> required <p>Returns:</p> Type Description <code>time_model.TimeModel</code> <p>Time model object with the given ID.</p>"},{"location":"API_reference/API_reference_4_factories/#prodsys.factories.time_model_factory.TimeModelFactory.get_time_models","title":"<code>get_time_models(self, IDs)</code>","text":"<p>Returns a list of time model objects with the given IDs.</p> <p>Parameters:</p> Name Type Description Default <code>IDs</code> <code>List[str]</code> <p>List of IDs that is used to filter the time model objects.</p> required <p>Returns:</p> Type Description <code>List[time_model.TimeModel]</code> <p>List of time model objects with the given IDs.</p>"},{"location":"API_reference/API_reference_5_Simulation/","title":"Simulation","text":"<p>This package contains the simulation module. It is based on the SimPy package and uses the <code>prodsys.models</code> API for running the simulation. Objects are created with the <code>prodsys.factories</code>.</p> <p>The simulation module contains the following modules:</p> <ul> <li><code>prodsys.simulation.control</code>: Contains the logic for controlling the processes of resources in the simulation.</li> <li><code>prodsys.simulation.logger</code>: Used for logging events in the simulation for later analysis.</li> <li><code>prodsys.simulation.observer</code>: Can be used to observe the simulation and its processes while simulation.</li> <li><code>prodsys.simulation.process_models</code>: Contains process models for products for the simulation.</li> <li><code>prodsys.simulation.process</code>: All processes used in the simulation for product processing or transport.</li> <li><code>prodsys.simulation.product</code>: Contains the logic for the product object in the simulation.</li> <li><code>prodsys.simulation.request</code>: Has classes for representing requests of products to resources for processing or transport.</li> <li><code>prodsys.simulation.resources</code>: Contains the logic for all resources in the simulation.</li> <li><code>prodsys.simulation.router</code>: Contains the logic for routing products in the simulation.</li> <li><code>prodsys.simulation.sim</code>: Simulation class for running the simulation.</li> <li><code>prodsys.simulation.sink</code>: Contains the logic for sinks in the simulation.</li> <li><code>prodsys.simulation.source</code>: Contains the logic for sources in the simulation.</li> <li><code>prodsys.simulation.state</code>: Contains the logic for the state of resources in the simulation.</li> <li><code>prodsys.simulation.store</code>: Contains the logic for product queues of resources in the simulation.</li> <li><code>prodsys.simulation.time_model</code>: Contains the logic for time models in the simulation.</li> </ul>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control","title":"<code>control</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.BatchController","title":"<code> BatchController            (Controller)         </code>  <code>pydantic-model</code>","text":"<p>A controller that processes the requests in batches.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.Controller","title":"<code> Controller            (ABC, BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>A controller is responsible for controlling the processes of a resource. The controller is requested by products requiring processes. The controller decides has a control policy that determines with which sequence requests are processed.</p> <p>Parameters:</p> Name Type Description Default <code>control_policy</code> <code>Callable[[List[request.Request]], None]</code> <p>The control policy that determines the sequence of requests to be processed.</p> required <code>env</code> <code>sim.Environment</code> <p>The environment in which the controller is running.</p> required <p>Attributes:</p> Name Type Description <code>resource</code> <code>resources.Resource</code> <p>The resource that is controlled by the controller.</p> <code>requested</code> <code>events.Event</code> <p>An event that is triggered when a request is made to the controller.</p> <code>requests</code> <code>List[request.Request]</code> <p>A list of requests that are made to the controller.</p> <code>running_processes</code> <code>List[events.Event]</code> <p>A list of (simpy) processes that are currently running on the resource.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.Controller.control_loop","title":"<code>control_loop(self)</code>","text":"<p>The control loop is the main process of the controller. It has to run indefinetely. It should repeatedly check if requests are made or a process is finished and then start the next process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.Controller.get_next_product_for_process","title":"<code>get_next_product_for_process(self, resource, process)</code>","text":"<p>Get the next product for a process. The product is removed (get) from the queues.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>resources.Resource</code> <p>The resource to take the product from.</p> required <code>process</code> <code>process.Process</code> <p>The process that is requesting the product.</p> required <p>Returns:</p> Type Description <code>List[events.Event]</code> <p>The event that is triggered when the product is taken from the queue (multiple events for multiple products, e.g. for a batch process or an assembly).</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.Controller.request","title":"<code>request(self, process_request)</code>","text":"<p>Request the controller consider the request in the future for processing.</p> <p>Parameters:</p> Name Type Description Default <code>process_request</code> <code>request.Request</code> <p>The request to be processed.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.ProductionController","title":"<code> ProductionController            (Controller)         </code>  <code>pydantic-model</code>","text":"<p>A production controller is responsible for controlling the processes of a production resource. The controller is requested by products requiring processes. The controller decides has a control policy that determines with which sequence requests are processed.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.ProductionController.control_loop","title":"<code>control_loop(self)</code>","text":"<p>The control loop is the main process of the controller. It has to run indefinetely.</p> <p>The logic is the control loop of a production resource is the following:</p> <ol> <li>Wait until a request is made or a process is finished.</li> <li>If a request is made, add it to the list of requests.</li> <li>If a process is finished, remove it from the list of running processes.</li> <li>If the resource is full or there are no requests, go to 1.</li> <li>Sort the queue according to the control policy.</li> <li>Start the next process. Go to 1.</li> </ol> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator yields when a request is made or a process is finished.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.ProductionController.get_next_product_for_process","title":"<code>get_next_product_for_process(self, resource, product)</code>","text":"<p>Get the next product for a process. The product is removed (get) from the input queues of the resource.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>resources.Resource</code> <p>The resource to take the product from.</p> required <code>product</code> <code>product.Product</code> <p>The product that is requesting the product.</p> required <p>Returns:</p> Type Description <code>List[events.Event]</code> <p>The event that is triggered when the product is taken from the queue (multiple events for multiple products, e.g. for a batch process or an assembly).</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.ProductionController.put_product_to_output_queue","title":"<code>put_product_to_output_queue(self, resource, products)</code>","text":"<p>Place a product to the output queue (put) of the resource.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>resources.Resource</code> <p>The resource to place the product to.</p> required <code>products</code> <code>List[product.Product]</code> <p>The products to be placed.</p> required <p>Returns:</p> Type Description <code>List[events.Event]</code> <p>The event that is triggered when the product is placed in the queue (multiple events for multiple products, e.g. for a batch process or an assembly).</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.ProductionController.run_process","title":"<code>run_process(self, input_state, target_product)</code>","text":"<p>Run the process of a product. The process is started and the product is logged.</p> <p>Parameters:</p> Name Type Description Default <code>input_state</code> <code>state.State</code> <p>The production state of the process.</p> required <code>target_product</code> <code>product.Product</code> <p>The product that is processed.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.ProductionController.start_process","title":"<code>start_process(self)</code>","text":"<p>Start the next process with the following logic:</p> <ol> <li>Setup the resource for the process.</li> <li>Wait until the resource is free for the process.</li> <li>Retrieve the product from the queue.</li> <li>Run the process and wait until finished.</li> <li>Place the product in the output queue.</li> </ol> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator yields when the process is finished.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.TransportController","title":"<code> TransportController            (Controller)         </code>  <code>pydantic-model</code>","text":"<p>Controller for transport resources.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.TransportController.control_loop","title":"<code>control_loop(self)</code>","text":"<p>The control loop is the main process of the controller. It has to run indefinetely.</p> <p>The logic is the control loop of a production resource is the following:</p> <ol> <li>Wait until a request is made or a process is finished.</li> <li>If a request is made, add it to the list of requests.</li> <li>If a process is finished, remove it from the list of running processes.</li> <li>If the resource is full or there are no requests, go to 1.</li> <li>Sort the queue according to the control policy.</li> <li>Start the next process. Go to 1.</li> </ol> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator yields when a request is made or a process is finished.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.TransportController.get_next_product_for_process","title":"<code>get_next_product_for_process(self, resource, product)</code>","text":"<p>Get the next product for a process from the input queue of a resource.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>product.Location</code> <p>Resource or Source to get the product from.</p> required <code>product</code> <code>product.Product</code> <p>The product that shall be transported.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the product is not in the queue.</p> <code>ValueError</code> <p>If the resource is not a  ProductionResource or Source.</p> <p>Returns:</p> Type Description <code>List[events.Event]</code> <p>The event that is triggered when the product is in the queue.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.TransportController.put_product_to_input_queue","title":"<code>put_product_to_input_queue(self, resource, product)</code>","text":"<p>Put a product to the input queue of a resource.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>product.Location</code> <p>Resource or Sink to put the product to.</p> required <code>product</code> <code>product.Product</code> <p>The product that shall be transported.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the resource is not a  ProductionResource or Sink.</p> <p>Returns:</p> Type Description <code>List[events.Event]</code> <p>The event that is triggered when the product is in the queue.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.TransportController.run_process","title":"<code>run_process(self, input_state, product, target, empty_transport)</code>","text":"<p>Run the process of a product. The process is started and the product is logged.</p> <p>Parameters:</p> Name Type Description Default <code>input_state</code> <code>state.State</code> <p>The transport state of the process.</p> required <code>product</code> <code>product.Product</code> <p>The product that is transported.</p> required <code>target</code> <code>product.Location</code> <p>The target of the transport.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.TransportController.start_process","title":"<code>start_process(self)</code>","text":"<p>Start the next process.</p> <p>The logic is the following:</p> <ol> <li>Get the next request.</li> <li>Get the resource, process, product, origin and target from the request.</li> <li>Setup the resource for the process.</li> <li>Wait until the resource is free.</li> <li>If the origin is not the location of the transport resource, wait until the transport is free.</li> <li>Move transport resource to the origin.</li> <li>Get the product from the origin.</li> <li>Move transport resource to the target.</li> <li>Put the product to the target.</li> <li>Go to 1.</li> </ol> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator yields when the transport is over.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.TransportController.update_location","title":"<code>update_location(self, location)</code>","text":"<p>Set the current position of the transport resource.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>product.Location</code> <p>The current position.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.FIFO_control_policy","title":"<code>FIFO_control_policy(requests)</code>","text":"<p>Sort the requests according to the FIFO principle.</p> <p>Parameters:</p> Name Type Description Default <code>requests</code> <code>List[request.Request]</code> <p>The list of requests.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.LIFO_control_policy","title":"<code>LIFO_control_policy(requests)</code>","text":"<p>Sort the requests according to the LIFO principle (reverse the list).</p> <p>Parameters:</p> Name Type Description Default <code>requests</code> <code>List[request.Request]</code> <p>The list of requests.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.SPT_control_policy","title":"<code>SPT_control_policy(requests)</code>","text":"<p>Sort the requests according to the SPT principle (shortest process time first).</p> <p>Parameters:</p> Name Type Description Default <code>requests</code> <code>List[request.Request]</code> <p>The list of requests.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.SPT_transport_control_policy","title":"<code>SPT_transport_control_policy(requests)</code>","text":"<p>Sort the requests according to the SPT principle (shortest process time first).</p> <p>Parameters:</p> Name Type Description Default <code>requests</code> <code>List[request.TransportResquest]</code> <p>The list of requests.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.agent_control_policy","title":"<code>agent_control_policy(gym_env, requests)</code>","text":"<p>Sort the requests according to the agent's policy.</p> <p>Parameters:</p> Name Type Description Default <code>gym_env</code> <code>gym_env.ProductionControlEnv</code> <p>A gym environment, where the agent can interact with the simulation.</p> required <code>requests</code> <code>List[request.Request]</code> <p>The list of requests.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.nearest_origin_and_longest_target_queues_transport_control_policy","title":"<code>nearest_origin_and_longest_target_queues_transport_control_policy(requests)</code>","text":"<p>Sort the requests according to nearest origin without considering the target location.  Second order sorting by descending length of the target output queues, to prefer targets where a product can be picked up.</p> <p>Parameters:</p> Name Type Description Default <code>requests</code> <code>List[request.TransportResquest]</code> <p>The list of requests.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.control.nearest_origin_and_shortest_target_input_queues_transport_control_policy","title":"<code>nearest_origin_and_shortest_target_input_queues_transport_control_policy(requests)</code>","text":"<p>Sort the requests according to nearest origin without considering the target location. Second order sorting by ascending length of the target input queue so that resources with empty input queues get material to process.</p> <p>Parameters:</p> Name Type Description Default <code>requests</code> <code>List[request.TransportResquest]</code> <p>The list of requests.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger","title":"<code>logger</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.EventLogger","title":"<code> EventLogger            (Logger)         </code>  <code>pydantic-model</code>","text":"<p>Logger for logging events.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.EventLogger.get_data_as_dataframe","title":"<code>get_data_as_dataframe(self)</code>","text":"<p>Get the data as a pandas DataFrame.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>The data as a pandas DataFrame.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.EventLogger.observe_resource_states","title":"<code>observe_resource_states(self, resource_factory)</code>","text":"<p>Create patch to observe the resource states.</p> <p>Parameters:</p> Name Type Description Default <code>resource_factory</code> <code>resource_factory.ResourceFactory</code> <p>The resource factory.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.EventLogger.observe_terminal_product_states","title":"<code>observe_terminal_product_states(self, product)</code>","text":"<p>Create path to observe the terminal product states.</p> <p>Parameters:</p> Name Type Description Default <code>product</code> <code>product.Product</code> <p>The product.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.Logger","title":"<code> Logger            (BaseModel, ABC)         </code>  <code>pydantic-model</code>","text":"<p>Base class for all loggers.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.Logger.get_data_as_dataframe","title":"<code>get_data_as_dataframe(self)</code>","text":"<p>Abstract method for returning the data as a pandas DataFrame.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>The data as a pandas DataFrame.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.Logger.log_data_to_csv","title":"<code>log_data_to_csv(self, filepath)</code>","text":"<p>Log the data to a csv file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the csv file.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.Logger.log_data_to_json","title":"<code>log_data_to_json(self, filepath)</code>","text":"<p>Log the data to a json file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the json file.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.Logger.register_patch","title":"<code>register_patch(self, data, object, attr, pre=None, post=None)</code>","text":"<p>Register a patch for the object.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data to log to used for preloading the pre and post functions.</p> required <code>object</code> <code>Any</code> <p>The object to patch.</p> required <code>attr</code> <code>List[str]</code> <p>The attributes of the object to patch.</p> required <code>pre</code> <code>Optional[Callable]</code> <p>The function to call before each operation. Defaults to None.</p> <code>None</code> <code>post</code> <code>Optional[Callable]</code> <p>The function to call after each operation. Defaults to None.</p> <code>None</code>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.post_monitor_product_info","title":"<code>post_monitor_product_info(data, product_info)</code>","text":"<p>Post function for monitoring product info. With this post monitor, every product creation and finish is logged.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[dict]</code> <p>The data to log to.</p> required <code>product_info</code> <code>product.ProductInfo</code> <p>The product info object.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.logger.post_monitor_resource_states","title":"<code>post_monitor_resource_states(data, state_info)</code>","text":"<p>Post function for monitoring resource states. With this post monitor, every state change is logged.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[dict]</code> <p>The data to log to.</p> required <code>state_info</code> <code>state.StateInfo</code> <p>The state info object.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models","title":"<code>proces_models</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.ListProcessModel","title":"<code> ListProcessModel            (ProcessModel)         </code>  <code>pydantic-model</code>","text":"<p>Process model that is based on a list of processes. The processes are executed sequentially in the order of the list.</p> <p>Parameters:</p> Name Type Description Default <code>process_list</code> <code>List[process.PROCESS_UNION]</code> <p>List of processes that are executed sequentially.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.ListProcessModel.get_next_possible_processes","title":"<code>get_next_possible_processes(self)</code>","text":"<p>Returns the next possible processes.</p> <p>Returns:</p> Type Description <code>Optional[List[process.PROCESS_UNION]]</code> <p>List of possible processes.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.ListProcessModel.update_marking_from_transition","title":"<code>update_marking_from_transition(self, chosen_process)</code>","text":"<p>Updates the marking of the process model based on the chosen process.</p> <p>Parameters:</p> Name Type Description Default <code>chosen_process</code> <code>process.PROCESS_UNION</code> <p>The chosen process that is executed.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.PrecedenceGraphProcessModel","title":"<code> PrecedenceGraphProcessModel            (ProcessModel)         </code>  <code>pydantic-model</code>","text":"<p>Process model that is based on a precedence graph.</p> <p>Attributes:</p> Name Type Description <code>nodes</code> <code>List[PrecendeGraphNode]</code> <p>List of nodes in the precedence graph.</p> <code>current_marking</code> <code>Optional[PrecendeGraphNode]</code> <p>The current marking, i.e. the node that represents the previously executed process, of the process model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.PrecedenceGraphProcessModel.add_node","title":"<code>add_node(self, process, successors, predecessors)</code>","text":"<p>Adds a node to the process model. If the processes of the successors and predecessors are not in the process model, they are added as well, with for now empty lists of successors and predecessors.</p> <p>Parameters:</p> Name Type Description Default <code>process</code> <code>process.PROCESS_UNION</code> <p>Process that is represented by the node.</p> required <code>successors</code> <code>List[process.PROCESS_UNION]</code> <p>List of successor processes.</p> required <code>predecessors</code> <code>List[process.PROCESS_UNION]</code> <p>List of predecessor processes.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.PrecedenceGraphProcessModel.get_next_possible_processes","title":"<code>get_next_possible_processes(self)</code>","text":"<p>Returns the next possible processes.</p> <p>Returns:</p> Type Description <code>Optional[List[process.PROCESS_UNION]]</code> <p>List of possible processes.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.PrecedenceGraphProcessModel.get_node_process_ids","title":"<code>get_node_process_ids(self)</code>","text":"<p>Returns the process IDs of all nodes in the process model.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of process IDs of all nodes in the process model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.PrecedenceGraphProcessModel.set_initial_marking","title":"<code>set_initial_marking(self)</code>","text":"<p>Sets the initial marking of the process model. The initial marking is a node that has no predecessing nodes.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If no initial marking is found.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.PrecedenceGraphProcessModel.update_marking_from_transition","title":"<code>update_marking_from_transition(self, chosen_process)</code>","text":"<p>Updates the marking of the process model based on the chosen process.</p> <p>Parameters:</p> Name Type Description Default <code>chosen_process</code> <code>process.PROCESS_UNION</code> <p>The chosen process that is executed.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.PrecendeGraphNode","title":"<code> PrecendeGraphNode            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a node in a precedence graph.</p> <p>Parameters:</p> Name Type Description Default <code>process</code> <code>process.PROCESS_UNION</code> <p>The process that is represented by the node.</p> required <code>successors</code> <code>Optional[List[PrecendeGraphNode]]</code> <p>List of successor nodes.</p> required <code>predecessors</code> <code>Optional[List[PrecendeGraphNode]]</code> <p>List of predecessor nodes.</p> required <p>Attributes:</p> Name Type Description <code>marking</code> <code>bool</code> <p>Indicates if the node is marked.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.PrecendeGraphNode.update_marking","title":"<code>update_marking(self)</code>","text":"<p>Updates the marking of the node, to save that the process has been executed.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.ProcessModel","title":"<code> ProcessModel            (ABC, BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Abstract process model base class that defines the interface for all process models.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.ProcessModel.get_next_possible_processes","title":"<code>get_next_possible_processes(self)</code>","text":"<p>Returns the next possible processes.</p> <p>Returns:</p> Type Description <code>Optional[List[process.PROCESS_UNION]]</code> <p>List of possible processes.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.ProcessModel.update_marking_from_transition","title":"<code>update_marking_from_transition(self, chosen_process)</code>","text":"<p>Updates the marking of the process model based on the chosen process.</p> <p>Parameters:</p> Name Type Description Default <code>chosen_process</code> <code>process.PROCESS_UNION</code> <p>The chosen process that is executed.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.get_adjacency_matrix_from_edges","title":"<code>get_adjacency_matrix_from_edges(edges)</code>","text":"<p>Returns the adjacency matrix of a process model from a list of edges.</p> <p>Parameters:</p> Name Type Description Default <code>edges</code> <code>List[List[str]]</code> <p>List of edges. Each edge is a list of two process IDs. The first process ID is the predecessor and the second process ID is the successor.</p> required <p>Returns:</p> Type Description <code>Dict[str, List[str]]</code> <p>Adjacency matrix of the process model. The keys are the process IDs and the values are the IDs of the successor processes.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.get_predecessor_processes","title":"<code>get_predecessor_processes(target_process_id, adjacency_matrix)</code>","text":"<p>Returns the predecessing processes' IDs of a ID of a process.</p> <p>Parameters:</p> Name Type Description Default <code>target_process_id</code> <code>str</code> <p>process ID of the process for which the predecessing processes' IDs are returned.</p> required <code>adjacency_matrix</code> <code>Dict[str, List[str]]</code> <p>Adjacency matrix of the process model. The keys are the process IDs and the values are the IDs of the successor processes.</p> required <p>Returns:</p> Type Description <code>List[process.PROCESS_UNION]</code> <p>List of predecessing processes' IDs.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.proces_models.get_predecessors_adjacency_matrix","title":"<code>get_predecessors_adjacency_matrix(adjacency_matrix)</code>","text":"<p>Returns the predecessing processes' IDs of all processes in a process model.</p> <p>Parameters:</p> Name Type Description Default <code>adjacency_matrix</code> <code>Dict[str, List[str]]</code> <p>Adjacency matrix of the process model. The keys are the process IDs and the values are the IDs of the successor processes.</p> required <p>Returns:</p> Type Description <code>Dict[str, List[str]]</code> <p>Predecessor adjacency matrix of the process model. The keys are the process IDs and the values are the IDs of the predecessing processes.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process","title":"<code>process</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.PROCESS_UNION","title":"<code>PROCESS_UNION</code>","text":"<p>Union type for all processes.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.CapabilityProcess","title":"<code> CapabilityProcess            (Process)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a capability process.</p> <p>Parameters:</p> Name Type Description Default <code>process_data</code> <code>processes_data.CapabilityProcessData</code> <p>The process data.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.CapabilityProcess.get_expected_process_time","title":"<code>get_expected_process_time(self)</code>","text":"<p>Returns the expected time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Expected time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.CapabilityProcess.get_process_time","title":"<code>get_process_time(self)</code>","text":"<p>Returns the time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.CapabilityProcess.matches_request","title":"<code>matches_request(self, request)</code>","text":"<p>Returns True if the process matches the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request.Request</code> <p>The request.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the process matches the request.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.CompoundProcess","title":"<code> CompoundProcess            (Process)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a compound process.</p> <p>Parameters:</p> Name Type Description Default <code>process_data</code> <code>processes_data.CompoundProcessData</code> <p>The process data.</p> required <code>processes</code> <code>List[Union[ProductionProcess, TransportProcess, CapabilityProcess, RequiredCapabilityProcess]]</code> <p>The processes.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.CompoundProcess.get_expected_process_time","title":"<code>get_expected_process_time(self)</code>","text":"<p>Returns the expected time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Expected time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.CompoundProcess.get_process_time","title":"<code>get_process_time(self)</code>","text":"<p>Returns the time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.CompoundProcess.matches_request","title":"<code>matches_request(self, request)</code>","text":"<p>Returns True if the process matches the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request.Request</code> <p>The request.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the process matches the request.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.Process","title":"<code> Process            (ABC, BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Abstract process base class that defines the interface for all processes.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.Process.get_expected_process_time","title":"<code>get_expected_process_time(self, *args)</code>","text":"<p>Returns the expected time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Expected time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.Process.get_process_time","title":"<code>get_process_time(self, *args)</code>","text":"<p>Returns the time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.Process.matches_request","title":"<code>matches_request(self, request)</code>","text":"<p>Returns True if the process matches the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request.Request</code> <p>The request.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the process matches the request.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.ProductionProcess","title":"<code> ProductionProcess            (Process)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a production process.</p> <p>Parameters:</p> Name Type Description Default <code>process_data</code> <code>processes_data.ProductionProcessData</code> <p>The process data.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.ProductionProcess.get_expected_process_time","title":"<code>get_expected_process_time(self)</code>","text":"<p>Returns the expected time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Expected time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.ProductionProcess.get_process_time","title":"<code>get_process_time(self)</code>","text":"<p>Returns the time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.ProductionProcess.matches_request","title":"<code>matches_request(self, request)</code>","text":"<p>Returns True if the process matches the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request.Request</code> <p>The request.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the process matches the request.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.RequiredCapabilityProcess","title":"<code> RequiredCapabilityProcess            (Process)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a required capability process.</p> <p>Parameters:</p> Name Type Description Default <code>process_data</code> <code>processes_data.RequiredCapabilityProcessData</code> <p>The process data.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.RequiredCapabilityProcess.get_expected_process_time","title":"<code>get_expected_process_time(self)</code>","text":"<p>Returns the expected time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Expected time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.RequiredCapabilityProcess.get_process_time","title":"<code>get_process_time(self)</code>","text":"<p>Returns the time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.RequiredCapabilityProcess.matches_request","title":"<code>matches_request(self, request)</code>","text":"<p>Returns True if the process matches the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request.Request</code> <p>The request.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the process matches the request.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.TransportLinkProcess","title":"<code> TransportLinkProcess            (Process)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a transport link process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.TransportLinkProcess.get_expected_process_time","title":"<code>get_expected_process_time(self)</code>","text":"<p>Returns the expected time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Expected time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.TransportLinkProcess.get_process_time","title":"<code>get_process_time(self)</code>","text":"<p>Returns the time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.TransportLinkProcess.matches_request","title":"<code>matches_request(self, request)</code>","text":"<p>Returns True if the process matches the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request.Request</code> <p>The request.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the process matches the request.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.TransportProcess","title":"<code> TransportProcess            (Process)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a transport process.</p> <p>Parameters:</p> Name Type Description Default <code>process_data</code> <code>processes_data.TransportProcessData</code> <p>The process data.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.TransportProcess.get_expected_process_time","title":"<code>get_expected_process_time(self, *args)</code>","text":"<p>Returns the expected time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Expected time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.TransportProcess.get_process_time","title":"<code>get_process_time(self, origin, target)</code>","text":"<p>Returns the time it takes to execute the process.</p> <p>Returns:</p> Type Description <code>float</code> <p>Time it takes to execute the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.process.TransportProcess.matches_request","title":"<code>matches_request(self, request)</code>","text":"<p>Returns True if the process matches the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request.Request</code> <p>The request.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the process matches the request.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product","title":"<code>product</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.Product","title":"<code> Product            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a product in the discrete event simulation. For easier instantion of the class, use the ProductFactory at prodsys.factories.product_factory.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>prodsys simulation environment.</p> required <code>product_data</code> <code>product_data.ProductData</code> <p>Product data that represents the meta information of the simulation product object.</p> required <code>process_model</code> <code>proces_models.ProcessModel</code> <p>Process model that represents the required manufacturing processes and the current state of the product.</p> required <code>transport_process</code> <code>process.Process</code> <p>Transport process that represents the required transport processes.</p> required <code>product_router</code> <code>router.Router</code> <p>Router that is used to route the product object.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.Product.get_request_for_production_process","title":"<code>get_request_for_production_process(self)</code>","text":"<p>Returns a request for the next production process of the product object.</p> <p>Returns:</p> Type Description <code>request.Request</code> <p>The request for the next production process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.Product.get_request_for_transport_process","title":"<code>get_request_for_transport_process(self, production_request)</code>","text":"<p>Returns a request for the next transport process of the product object.</p> <p>Returns:</p> Type Description <code>request.Request</code> <p>The request for the next transport process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.Product.get_request_for_transport_to_sink","title":"<code>get_request_for_transport_to_sink(self)</code>","text":"<p>Returns a request for the transport to the sink of the product object.</p> <p>Returns:</p> Type Description <code>request.Request</code> <p>The request for the transport to the sink.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.Product.request_process","title":"<code>request_process(self, processing_request)</code>","text":"<p>Requests the next production process of the product object from the next production resource by creating a request event and registering it at the environment.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.Product.set_next_production_process","title":"<code>set_next_production_process(self)</code>","text":"<p>Sets the next process of the product object based on the current state of the product and its process model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.Product.update_location","title":"<code>update_location(self, resource)</code>","text":"<p>Updates the location of the product object.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>Location</code> <p>Location of the product object.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.ProductInfo","title":"<code> ProductInfo            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents information of the current state of a product.</p> <p>Parameters:</p> Name Type Description Default <code>resource_ID</code> <code>str</code> <p>ID of the resource that the product is currently at.</p> required <code>state_ID</code> <code>str</code> <p>ID of the state that the product is currently at.</p> required <code>event_time</code> <code>float</code> <p>Time of the event.</p> required <code>activity</code> <code>state.StateEnum</code> <p>Activity of the product.</p> required <code>product_ID</code> <code>str</code> <p>ID of the product.</p> required <code>state_type</code> <code>state.StateTypeEnum</code> <p>Type of the state.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.ProductInfo.log_create_product","title":"<code>log_create_product(self, resource, _product, event_time)</code>","text":"<p>Logs the creation of a product.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>Union[resources.Resource, sink.Sink, source.Source]</code> <p>New resource of the product.</p> required <code>_product</code> <code>Product</code> <p>Product that is created.</p> required <code>event_time</code> <code>float</code> <p>Time of the event.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.ProductInfo.log_end_process","title":"<code>log_end_process(self, resource, _product, event_time, state_type)</code>","text":"<p>Logs the end of a process.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>resources.Resource</code> <p>Resource that the product is processed at.</p> required <code>_product</code> <code>Product</code> <p>Product that is processed.</p> required <code>event_time</code> <code>float</code> <p>Time of the event.</p> required <code>state_type</code> <code>state.StateTypeEnum</code> <p>Type of the state.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.ProductInfo.log_finish_product","title":"<code>log_finish_product(self, resource, _product, event_time)</code>","text":"<p>Logs the finish of a product.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>Union[resources.Resource, sink.Sink, source.Source]</code> <p>New resource of the product.</p> required <code>_product</code> <code>Product</code> <p>Product that is finished.</p> required <code>event_time</code> <code>float</code> <p>Time of the event.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.product.ProductInfo.log_start_process","title":"<code>log_start_process(self, resource, _product, event_time, state_type)</code>","text":"<p>Logs the start of a process.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>resources.Resource</code> <p>Resource that the product is processed at.</p> required <code>_product</code> <code>Product</code> <p>Product that is processed.</p> required <code>event_time</code> <code>float</code> <p>Time of the event.</p> required <code>state_type</code> <code>state.StateTypeEnum</code> <p>Type of the state.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request","title":"<code>request</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.Request","title":"<code> Request        </code>","text":"<p>Class to represents requests of a product for a process to be executed by a resource.</p> <p>Parameters:</p> Name Type Description Default <code>process</code> <code>process.PROCESS_UNION</code> <p>The process.</p> required <code>product</code> <code>product.Product</code> <p>The product.</p> required <code>resource</code> <code>resources.Resource</code> <p>The resource.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.Request.get_process","title":"<code>get_process(self)</code>","text":"<p>Returns the process or the capability process of the request </p> <p>Returns:</p> Type Description <code>process.PROCESS_UNION</code> <p>The process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.Request.get_product","title":"<code>get_product(self)</code>","text":"<p>Returns the product of the request.</p> <p>Returns:</p> Type Description <code>product.Product</code> <p>The product.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.Request.get_resource","title":"<code>get_resource(self)</code>","text":"<p>Returns the resource of the request.</p> <p>Returns:</p> Type Description <code>resources.Resource</code> <p>The resource.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.Request.set_resource","title":"<code>set_resource(self, resource)</code>","text":"<p>Sets the resource of the request.</p> <p>Parameters:</p> Name Type Description Default <code>resource</code> <code>resources.Resource</code> <p>The resource.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.TransportResquest","title":"<code> TransportResquest            (Request)         </code>","text":"<p>Class to represents requests of a product for a transport process to be executed by a transport resource. Additionally, it contains the origin and target locations of the transport.</p> <p>Parameters:</p> Name Type Description Default <code>process</code> <code>process.TransportProcess</code> <p>The transport process.</p> required <code>product</code> <code>product.Product</code> <p>The product.</p> required <code>resource</code> <code>resources.TransportResource</code> <p>The transport resource.</p> required <code>origin</code> <code>product.Location</code> <p>The origin location, either a resource, source or sink.</p> required <code>target</code> <code>product.Location</code> <p>The target location, either a resource, source or sink.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.TransportResquest.get_origin","title":"<code>get_origin(self)</code>","text":"<p>Returns the origin location of the transport request.</p> <p>Returns:</p> Type Description <code>product.Location</code> <p>The origin location.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.TransportResquest.get_process","title":"<code>get_process(self)</code>","text":"<p>Returns the transport process of the transport request.</p> <p>Returns:</p> Type Description <code>process.TransportProcess</code> <p>The transport process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.TransportResquest.get_resource","title":"<code>get_resource(self)</code>","text":"<p>Returns the transport resource of the transport request.</p> <p>Returns:</p> Type Description <code>resources.TransportResource</code> <p>The transport resource.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.request.TransportResquest.get_target","title":"<code>get_target(self)</code>","text":"<p>Returns the target location of the transport request.</p> <p>Returns:</p> Type Description <code>product.Location</code> <p>The target location.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources","title":"<code>resources</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.RESOURCE_UNION","title":"<code>RESOURCE_UNION</code>","text":"<p>Union Type for Resources. </p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.ProductionResource","title":"<code> ProductionResource            (Resource)         </code>  <code>pydantic-model</code>","text":"<p>A production resource to perform production processes. Has additionally to a Resource input and output queues and a fixed location.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>The simpy environment.</p> required <code>data</code> <code>ProductionResourceData</code> <p>The resource data.</p> required <code>processes</code> <code>List[process.PROCESS_UNION]</code> <p>The processes.</p> required <code>controller</code> <code>control.ProductionController</code> <p>The controller.</p> required <code>states</code> <code>List[state.State]</code> <p>The states of the resource for breakdowns.</p> required <code>production_states</code> <code>List[state.State]</code> <p>The states of the resource for production.</p> required <code>setup_states</code> <code>List[state.SetupState]</code> <p>The states of the resource for setups.</p> required <code>got_free</code> <code>events.Event</code> <p>The event that is triggered when the resource gets free of processes.</p> required <code>active</code> <code>events.Event</code> <p>The event that is triggered when the resource is active.</p> required <code>current_setup</code> <code>process.PROCESS_UNION</code> <p>The current setup.</p> required <code>reserved_setup</code> <code>process.PROCESS_UNION</code> <p>The reserved setup.</p> required <code>input_queues</code> <code>List[store.Queue]</code> <p>The input queues.</p> required <code>output_queues</code> <code>List[store.Queue]</code> <p>The output queues.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource","title":"<code> Resource            (BaseModel, ABC, Resource)         </code>  <code>pydantic-model</code>","text":"<p>Base class for all resources.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>The simpy environment.</p> required <code>data</code> <code>RESOURCE_DATA_UNION</code> <p>The resource data.</p> required <code>processes</code> <code>List[process.PROCESS_UNION]</code> <p>The processes.</p> required <code>controller</code> <code>control.Controller</code> <p>The controller.</p> required <code>states</code> <code>List[state.State]</code> <p>The states of the resource for breakdowns.</p> required <code>production_states</code> <code>List[state.State]</code> <p>The states of the resource for production.</p> required <code>setup_states</code> <code>List[state.SetupState]</code> <p>The states of the resource for setups.</p> required <code>got_free</code> <code>events.Event</code> <p>The event that is triggered when the resource gets free of processes.</p> required <code>active</code> <code>events.Event</code> <p>The event that is triggered when the resource is active.</p> required <code>current_setup</code> <code>process.PROCESS_UNION</code> <p>The current setup.</p> required <code>reserved_setup</code> <code>process.PROCESS_UNION</code> <p>The reserved setup.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.capacity_current_setup","title":"<code>capacity_current_setup: int</code>  <code>property</code> <code>readonly</code>","text":"<p>Returns the capacity of the resource for the current setup with considering that the resource could be in a setup process.</p> <p>Returns:</p> Type Description <code>int</code> <p>The capacity of the resource for the current setup.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.full","title":"<code>full: bool</code>  <code>property</code> <code>readonly</code>","text":"<p>Returns if the resource is full.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the resource is full or in setup, False otherwise.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.in_setup","title":"<code>in_setup: bool</code>  <code>property</code> <code>readonly</code>","text":"<p>Returns if the resource is in a setup process.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the resource is in a setup process, False otherwise.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.activate","title":"<code>activate(self)</code>","text":"<p>Activates the resource after a breakdwon.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.add_production_state","title":"<code>add_production_state(self, input_state)</code>","text":"<p>Adds a production state to the resource.</p> <p>Parameters:</p> Name Type Description Default <code>input_state</code> <code>state.ProductionState</code> <p>The production state to add.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.add_state","title":"<code>add_state(self, input_state)</code>","text":"<p>Adds a state to the resource.</p> <p>Parameters:</p> Name Type Description Default <code>input_state</code> <code>state.STATE_UNION</code> <p>The state to add.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_controller","title":"<code>get_controller(self)</code>","text":"<p>Returns the controller of the resource.</p> <p>Returns:</p> Type Description <code>control.Controller</code> <p>The controller of the resource.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_free_of_processes_in_preparation","title":"<code>get_free_of_processes_in_preparation(self)</code>","text":"<p>Returns a generator that yields when all processes in preparation are finished.</p> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator of the yield, which is yielded when all processes in preparation are finished.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_free_of_setups","title":"<code>get_free_of_setups(self)</code>","text":"<p>Returns a generator that yields when all setups are finished.</p> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator of the yield, which is yielded when all setups are finished.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_free_process","title":"<code>get_free_process(self, process)</code>","text":"<p>Returns a free ProductionState or CapabilityState of the resource for a process.</p> <p>Parameters:</p> Name Type Description Default <code>process</code> <code>process.PROCESS_UNION</code> <p>The process to get the state for.</p> required <p>Returns:</p> Type Description <code>Optional[state.State]</code> <p>The state of the resource for the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_input_queue_length","title":"<code>get_input_queue_length(self)</code>","text":"<p>Returns total number of items in all input_queues.</p> <p>Returns:</p> Type Description <code>int</code> <p>Sum of items in the resources input-queues.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_location","title":"<code>get_location(self)</code>","text":"<p>Returns the location of the resource.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>The location of the resource. Has to have length 2.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_output_queue_length","title":"<code>get_output_queue_length(self)</code>","text":"<p>Returns total number of items in all output_queues.</p> <p>Returns:</p> Type Description <code>int</code> <p>Sum of items in the resources output-queues.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_process","title":"<code>get_process(self, process)</code>","text":"<p>Returns the ProducitonState or CapabilityState of the resource for a process.</p> <p>Parameters:</p> Name Type Description Default <code>process</code> <code>process.PROCESS_UNION</code> <p>The process to get the state for.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the process is not found in the resource.</p> <p>Returns:</p> Type Description <code>state.State</code> <p>The state of the resource for the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_processes","title":"<code>get_processes(self, process)</code>","text":"<p>Returns the ProducitonState or CapabilityState of the resource for a process.</p> <p>Parameters:</p> Name Type Description Default <code>process</code> <code>process.PROCESS_UNION</code> <p>The process to get the state for.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the process is not found in the resource.</p> <p>Returns:</p> Type Description <code>List[state.State]</code> <p>The state of the resource for the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.get_states","title":"<code>get_states(self)</code>","text":"<p>Returns the states of the resource.</p> <p>Returns:</p> Type Description <code>List[state.State]</code> <p>The states of the resource.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.interrupt_states","title":"<code>interrupt_states(self)</code>","text":"<p>Interrupts the states of the resource.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.reserve_setup","title":"<code>reserve_setup(self, process)</code>","text":"<p>Reserves the setup of the resource for a process. This is used to prevent that capacity is wrong estimated during setup.</p> <p>Parameters:</p> Name Type Description Default <code>process</code> <code>process.PROCESS_UNION</code> <p>The process that wants to reserve the setup.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.set_location","title":"<code>set_location(self, new_location)</code>","text":"<p>Sets the location of the resource.</p> <p>Parameters:</p> Name Type Description Default <code>new_location</code> <code>List[float]</code> <p>The new location of the resource. Has to have length 2.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.setup","title":"<code>setup(self, _process)</code>","text":"<p>Sets up the resource for a process.</p> <p>Parameters:</p> Name Type Description Default <code>_process</code> <code>process.PROCESS_UNION</code> <p>The process to set up the resource for.</p> required <p>Yields:</p> Type Description <code>Generator</code> <p>The type of the yield depends on the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.start_states","title":"<code>start_states(self)</code>","text":"<p>Starts the simpy processes of the states of the resource in simpy.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.Resource.unreserve_setup","title":"<code>unreserve_setup(self)</code>","text":"<p>Unreserves the setup of the resource. This is used to prevent that the resource is used for another process while it is in a setup process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.resources.TransportResource","title":"<code> TransportResource            (Resource)         </code>  <code>pydantic-model</code>","text":"<p>A transport resource to perform transport processes. Can change its and the product's location during transport processes.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>The simpy environment.</p> required <code>data</code> <code>TransportResourceData</code> <p>The resource data.</p> required <code>processes</code> <code>List[process.PROCESS_UNION]</code> <p>The processes.</p> required <code>controller</code> <code>control.TransportController</code> <p>The controller.</p> required <code>states</code> <code>List[state.State]</code> <p>The states of the resource for breakdowns.</p> required <code>production_states</code> <code>List[state.State]</code> <p>The states of the resource for production.</p> required <code>setup_states</code> <code>List[state.SetupState]</code> <p>The states of the resource for setups.</p> required <code>got_free</code> <code>events.Event</code> <p>The event that is triggered when the resource gets free of processes.</p> required <code>active</code> <code>events.Event</code> <p>The event that is triggered when the resource is active.</p> required <code>current_setup</code> <code>process.PROCESS_UNION</code> <p>The current setup.</p> required <code>reserved_setup</code> <code>process.PROCESS_UNION</code> <p>The reserved setup.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router","title":"<code>router</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.ROUTING_HEURISTIC","title":"<code>ROUTING_HEURISTIC</code>","text":"<p>A dictionary of available routing heuristics.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.Router","title":"<code> Router        </code>","text":"<p>Base class for all routers.</p> <p>Parameters:</p> Name Type Description Default <code>resource_factory</code> <code>resource_factory.ResourceFactory</code> <p>The resource factory of the production system.</p> required <code>sink_factory</code> <code>sink_factory.SinkFactory</code> <p>The sink factory of the production system.</p> required <code>routing_heuristic</code> <code>Callable[[List[resources.Resource]], resources.Resource]</code> <p>The routing heuristic to be used, needs to be a callable that takes a list of resources and returns a resource.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.Router.can_reach_resource","title":"<code>can_reach_resource(self, product, resource)</code>","text":"<p>Checks if a product can reach a resource.</p> <p>Parameters:</p> Name Type Description Default <code>product</code> <code>product.Product</code> <p>The product.</p> required <code>resource</code> <code>resources.Resource</code> <p>The resource.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the product can reach the resource, False otherwise.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.Router.get_free_resources","title":"<code>get_free_resources(self, possible_resources)</code>","text":"<p>Abstract mehtod that returns a list of resources that have space in their input queues for the requested process.</p> <p>Parameters:</p> Name Type Description Default <code>requested_process</code> <code>process.Process</code> <p>The requested process.</p> required <p>Returns:</p> Type Description <code>List[resources.Resource]</code> <p>A list of resources that have space in their input queues for the requested process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.Router.get_possible_resources","title":"<code>get_possible_resources(self, processing_request)</code>","text":"<p>Returns a list of possible resources for a processing request.</p> <p>Parameters:</p> Name Type Description Default <code>processing_request</code> <code>request.Request</code> <p>The processing request.</p> required <p>Returns:</p> Type Description <code>List[resources.Resource]</code> <p>A list of possible resources for the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.Router.get_sink","title":"<code>get_sink(self, _product_type)</code>","text":"<p>Returns the sink for a product type.</p> <p>Parameters:</p> Name Type Description Default <code>_product_type</code> <code>str</code> <p>The product type.</p> required <p>Returns:</p> Type Description <code>sink.Sink</code> <p>The sink for the product type.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.Router.route_request","title":"<code>route_request(self, processing_request)</code>","text":"<p>Routes a processing request to a resource and assigns the resource to the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request.Request</code> <p>The request.</p> required <p>Returns:</p> Type Description <code>Generator</code> <p>A generator that yields when the request is routed.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.FIFO_routing_heuristic","title":"<code>FIFO_routing_heuristic(possible_resources)</code>","text":"<p>Sorts the list by the FIFO principle.</p> <p>Parameters:</p> Name Type Description Default <code>possible_resources</code> <code>List[resources.Resource]</code> <p>A list of possible resources.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.agent_routing_heuristic","title":"<code>agent_routing_heuristic(gym_env, possible_resources)</code>","text":"<p>Sorts the list of possible resources by an reinforcement learning agent</p> <p>Parameters:</p> Name Type Description Default <code>gym_env</code> <code>gym_env.ProductionRoutingEnv</code> <p>Environment for the reinforcement learning agent.</p> required <code>possible_resources</code> <code>List[resources.Resource]</code> <p>A list of possible resources.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.random_routing_heuristic","title":"<code>random_routing_heuristic(possible_resources)</code>","text":"<p>Shuffles the list of possible resources.</p> <p>Parameters:</p> Name Type Description Default <code>possible_resources</code> <code>List[resources.Resource]</code> <p>A list of possible resources.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.router.shortest_queue_routing_heuristic","title":"<code>shortest_queue_routing_heuristic(possible_resources)</code>","text":"<p>Sorts the list of possible resources by the length of their input queues and returns the first resource. For Transport resources, the next resource is chosen by the resource with the shortest request queue.</p> <p>Parameters:</p> Name Type Description Default <code>possible_resources</code> <code>List[resources.Resource]</code> <p>A list of possible resources.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sim","title":"<code>sim</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sim.VERBOSE","title":"<code>VERBOSE</code>","text":"<p>Determines whether the simulation should be verbose or not. If set to 1, a progress bar will be shown. Otherwise, no progress bar will be shown.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sim.Environment","title":"<code> Environment            (Environment)         </code>","text":"<p>Class to represent the simulation environment. It is a subclass of simpy.Environment and adds a progress bar to the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>The seed to set for the simulation run. Defaults to 0.</p> <code>0</code> <p>Attributes:</p> Name Type Description <code>seed</code> <code>int</code> <p>The seed to set for the simulation run.</p> <code>pbar</code> <code>Any</code> <p>The progress bar.</p> <code>last_update</code> <code>int</code> <p>The last time the progress bar was updated.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sim.Environment.request_process_of_resource","title":"<code>request_process_of_resource(self, request)</code>","text":"<p>Requests the process of a resource. Connects requests of products with controllers in the environment.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>request.Request</code> <p>The request to process.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sim.Environment.run","title":"<code>run(self, time_range)</code>","text":"<p>Runs the simulation for a given time range.</p> <p>Parameters:</p> Name Type Description Default <code>time_range</code> <code>int</code> <p>The time range to run the simulation for in minutes.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sim.Environment.run_until","title":"<code>run_until(self, until)</code>","text":"<p>Runs the simulation until a given event.</p> <p>Parameters:</p> Name Type Description Default <code>until</code> <code>events.Event</code> <p>The event to run the simulation until.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sim.temp_seed","title":"<code>temp_seed(seed)</code>","text":"<p>Context manager for temporarily setting the seed of the random number generators. Is necessary when optimizing with another random seed but still wanting to use the same seed for the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>The seed to set for the simulation run.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sink","title":"<code>sink</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sink.Sink","title":"<code> Sink            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a sink.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>The simulation environment.</p> required <code>data</code> <code>sink_data.SinkData</code> <p>The sink data.</p> required <code>product_factory</code> <code>product_factory.ProductFactory</code> <p>The product factory.</p> required <code>input_queues</code> <code>List[store.Queue]</code> <p>The input queues. Defaults to [].</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sink.Sink.add_input_queues","title":"<code>add_input_queues(self, input_queues)</code>","text":"<p>Adds input queues to the sink.</p> <p>Parameters:</p> Name Type Description Default <code>input_queues</code> <code>List[store.Queue]</code> <p>The input queues.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sink.Sink.get_input_queue_length","title":"<code>get_input_queue_length(self)</code>","text":"<p>Returns total number of items in all input_queues. Defaults to 0 for a sink.</p> <p>Returns:</p> Type Description <code>int</code> <p>int(0)</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sink.Sink.get_location","title":"<code>get_location(self)</code>","text":"<p>Returns the location of the sink.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>The location. Has to be a list of length 2.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sink.Sink.get_output_queue_length","title":"<code>get_output_queue_length(self)</code>","text":"<p>Returns zero. Needed for transport control policies that use the target locations output queue for request ordering.</p> <p>Returns:</p> Type Description <code>int</code> <p>int(0)</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.sink.Sink.register_finished_product","title":"<code>register_finished_product(self, product)</code>","text":"<p>Registers a finished product when it reaches the sink.</p> <p>Parameters:</p> Name Type Description Default <code>product</code> <code>product.Product</code> <p>The finished product.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.source","title":"<code>source</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.source.Source","title":"<code> Source            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents a source.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>sim.Environment</code> <p>The simulation environment.</p> required <code>data</code> <code>source_data.SourceData</code> <p>The source data.</p> required <code>product_data</code> <code>product_data.ProductData</code> <p>The product data of the products to be created.</p> required <code>product_factory</code> <code>product_factory.ProductFactory</code> <p>The product factory.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model of the source.</p> required <code>router</code> <code>router.Router</code> <p>The router of the created products.</p> required <code>output_queues</code> <code>List[store.Queue]</code> <p>The output queues. Defaults to [].</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.source.Source.add_output_queues","title":"<code>add_output_queues(self, output_queues)</code>","text":"<p>Adds output queues to the source.</p> <p>Parameters:</p> Name Type Description Default <code>output_queues</code> <code>List[store.Queue]</code> <p>The output queues.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.source.Source.create_product_loop","title":"<code>create_product_loop(self)</code>","text":"<p>Simpy process that creates products and puts them in the output queues.</p> <p>Yields:</p> Type Description <code>Generator</code> <p>Yields when a product is created or when a product is put in an output queue.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.source.Source.get_input_queue_length","title":"<code>get_input_queue_length(self)</code>","text":"<p>Returns total number of items in all input_queues.</p> <p>Returns:</p> Type Description <code>int</code> <p>int(0)</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.source.Source.get_location","title":"<code>get_location(self)</code>","text":"<p>Returns the location of the source.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>The location. Has to be a list of length 2.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.source.Source.get_output_queue_length","title":"<code>get_output_queue_length(self)</code>","text":"<p>Returns total number of items in all output_queues.</p> <p>Returns:</p> Type Description <code>int</code> <p>Sum of items in the source output-queues.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.source.Source.start_source","title":"<code>start_source(self)</code>","text":"<p>Starts the source simpy process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state","title":"<code>state</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.STATE_UNION","title":"<code>STATE_UNION</code>","text":"<p>Union Type of all states.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.BreakDownState","title":"<code> BreakDownState            (State)         </code>  <code>pydantic-model</code>","text":"<p>Represents a breakdown state of a resource in the simulation. A breakdown state has a process that simulates the breakdown of a resource. All other running production, transport or setup states get interrupted.</p> <p>Parameters:</p> Name Type Description Default <code>state_data</code> <code>BreakDownStateData</code> <p>The data of the state.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model of the state.</p> required <code>env</code> <code>sim.Environment</code> <p>The simulation environment.</p> required <code>active</code> <code>events.Event</code> <p>Event that indidcates if the state is active. Defaults to None.</p> required <code>finished_process</code> <code>events.Event</code> <p>Event that indicates if the state is finished. Defaults to None.</p> required <code>resource</code> <code>resources.Resource</code> <p>The resource the state belongs to. Defaults to None.</p> required <code>process</code> <code>Optional[events.Process]</code> <p>The process of the state. Defaults to None.</p> required <code>state_info</code> <code>StateInfo</code> <p>The state information of the state. Defaults to None.</p> required <code>repair_time_model</code> <code>time_model.TimeModel</code> <p>The time model of the repair time. Defaults to None.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.BreakDownState.interrupt_process","title":"<code>interrupt_process(self)</code>","text":"<p>Interrupts the process of the state. </p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.BreakDownState.process_state","title":"<code>process_state(self)</code>","text":"<p>Runs a single process of the state. The process is the key component for the behavior of the state while simulating. All the logic of the state is implemented in the process.</p> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator of the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.ProcessBreakDownState","title":"<code> ProcessBreakDownState            (State)         </code>  <code>pydantic-model</code>","text":"<p>Represents a process breakdown state of a resource in the simulation. A process breakdown state has a process that simulates the breakdown of a process of a resource. Only production states of this type of process get interrupted. Also all setup states get interrupted.</p> <p>Parameters:</p> Name Type Description Default <code>state_data</code> <code>ProcessBreakDownStateData</code> <p>The data of the state.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model of the state.</p> required <code>env</code> <code>sim.Environment</code> <p>The simulation environment.</p> required <code>active</code> <code>events.Event</code> <p>Event that indidcates if the state is active. Defaults to None.</p> required <code>finished_process</code> <code>events.Event</code> <p>Event that indicates if the state is finished. Defaults to None.</p> required <code>resource</code> <code>resources.Resource</code> <p>The resource the state belongs to. Defaults to None.</p> required <code>process</code> <code>Optional[events.Process]</code> <p>The process of the state. Defaults to None.</p> required <code>state_info</code> <code>StateInfo</code> <p>The state information of the state. Defaults to None.</p> required <code>production_states</code> <code>List[State]</code> <p>The production states of the process. Defaults to None.</p> required <code>repair_time_model</code> <code>time_model.TimeModel</code> <p>The time model of the repair time. Defaults to None.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.ProcessBreakDownState.interrupt_process","title":"<code>interrupt_process(self)</code>","text":"<p>Interrupts the process of the state. </p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.ProcessBreakDownState.process_state","title":"<code>process_state(self)</code>","text":"<p>Runs a single process of the state. The process is the key component for the behavior of the state while simulating. All the logic of the state is implemented in the process.</p> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator of the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.ProductionState","title":"<code> ProductionState            (State)         </code>  <code>pydantic-model</code>","text":"<p>Represents a production state of a resource in the simulation. A production state has a process that simulates the production process which takes some time. The production state continues the creation process of a product. If a resource has a higher capacity than 1 for a process, multiple production states exist, that can run in parallel.</p> <p>Parameters:</p> Name Type Description Default <code>state_data</code> <code>ProductionStateData</code> <p>The data of the state.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model of the state.</p> required <code>env</code> <code>sim.Environment</code> <p>The simulation environment.</p> required <code>active</code> <code>events.Event</code> <p>Event that indidcates if the state is active. Defaults to None.</p> required <code>finished_process</code> <code>events.Event</code> <p>Event that indicates if the state is finished. Defaults to None.</p> required <code>resource</code> <code>resources.Resource</code> <p>The resource the state belongs to. Defaults to None.</p> required <code>process</code> <code>Optional[events.Process]</code> <p>The process of the state. Defaults to None.</p> required <code>state_info</code> <code>StateInfo</code> <p>The state information of the state. Defaults to None.</p> required <code>start</code> <code>float</code> <p>The start time of the state. Defaults to 0.0.</p> required <code>done_in</code> <code>float</code> <p>The ramaining time for the state to finish. Defaults to 0.0.</p> required <code>interrupted</code> <code>bool</code> <p>Indicates if the state is interrupted. Defaults to False.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.ProductionState.activate_state","title":"<code>activate_state(self)</code>","text":"<p>Activates the state and at start of the simulation.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.ProductionState.interrupt_process","title":"<code>interrupt_process(self)</code>","text":"<p>Interrupts the process of the state. </p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.ProductionState.prepare_for_run","title":"<code>prepare_for_run(self)</code>","text":"<p>Prepares the state for running the process of a state.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.ProductionState.process_state","title":"<code>process_state(self)</code>","text":"<p>Runs a single process of the state. The process is the key component for the behavior of the state while simulating. All the logic of the state is implemented in the process.</p> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator of the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.SetupState","title":"<code> SetupState            (State)         </code>  <code>pydantic-model</code>","text":"<p>Represents a setup state of a resource in the simulation. A setup state has a process that simulates the setup of a resource. This changes the current setup of the resource and allows it processing of other types of processes with their associated production or transport states.</p> <p>Parameters:</p> Name Type Description Default <code>state_data</code> <code>SetupStateData</code> <p>The data of the state.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model of the state.</p> required <code>env</code> <code>sim.Environment</code> <p>The simulation environment.</p> required <code>active</code> <code>events.Event</code> <p>Event that indidcates if the state is active. Defaults to None.</p> required <code>finished_process</code> <code>events.Event</code> <p>Event that indicates if the state is finished. Defaults to None.</p> required <code>resource</code> <code>resources.Resource</code> <p>The resource the state belongs to. Defaults to None.</p> required <code>process</code> <code>Optional[events.Process]</code> <p>The process of the state. Defaults to None.</p> required <code>state_info</code> <code>StateInfo</code> <p>The state information of the state. Defaults to None.</p> required <code>start</code> <code>float</code> <p>The start time of the state. Defaults to 0.0.</p> required <code>done_in</code> <code>float</code> <p>The time the state is done in. Defaults to 0.0.</p> required <p>Attributes:</p> Name Type Description <code>interrupt_processed</code> <code>events.Event</code> <p>Event that indicates if the state is interrupted. Defaults to None.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.SetupState.activate_state","title":"<code>activate_state(self)</code>","text":"<p>Activates the state and at start of the simulation.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.SetupState.interrupt_process","title":"<code>interrupt_process(self)</code>","text":"<p>Interrupts the process of the state. </p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.SetupState.prepare_for_run","title":"<code>prepare_for_run(self)</code>","text":"<p>Prepares the state for running the process of a state.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.SetupState.process_state","title":"<code>process_state(self)</code>","text":"<p>Runs a single process of the state. The process is the key component for the behavior of the state while simulating. All the logic of the state is implemented in the process.</p> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator of the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.State","title":"<code> State            (ABC, BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Abstract class that represents a state of a resource in the simulation. A state has a process that is simulated when the resource starts a state. States can exist in parallel and can interrupt each other.</p> <p>Parameters:</p> Name Type Description Default <code>state_data</code> <code>StateData</code> <p>The data of the state.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model of the state.</p> required <code>env</code> <code>sim.Environment</code> <p>The simulation environment.</p> required <code>active</code> <code>events.Event</code> <p>Event that indidcates if the state is active. Defaults to None.</p> required <code>finished_process</code> <code>events.Event</code> <p>Event that indicates if the state is finished. Defaults to None.</p> required <code>resource</code> <code>resources.Resource</code> <p>The resource the state belongs to. Defaults to None.</p> required <code>process</code> <code>Optional[events.Process]</code> <p>The process of the state. Defaults to None.</p> required <code>state_info</code> <code>StateInfo</code> <p>The state information of the state. Defaults to None.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.State.activate","title":"<code>activate(self)</code>","text":"<p>Activates the state by triggering the active event.</p> <p>Exceptions:</p> Type Description <code>RuntimeError</code> <p>If the state is allready active.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.State.activate_state","title":"<code>activate_state(self)</code>","text":"<p>Activates the state and at start of the simulation.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.State.deactivate","title":"<code>deactivate(self)</code>","text":"<p>Deactivates the state by setting the active event to a new event which is not yet triggered.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.State.interrupt_process","title":"<code>interrupt_process(self)</code>","text":"<p>Interrupts the process of the state. </p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.State.prepare_for_run","title":"<code>prepare_for_run(self)</code>","text":"<p>Prepares the state for running the process of a state.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.State.process_state","title":"<code>process_state(self)</code>","text":"<p>Runs a single process of the state. The process is the key component for the behavior of the state while simulating. All the logic of the state is implemented in the process.</p> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator of the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.State.set_resource","title":"<code>set_resource(self, resource_model)</code>","text":"<p>Sets the resource of the state.</p> <p>Parameters:</p> Name Type Description Default <code>resource_model</code> <code>resources.Resource</code> <p>The resource the state belongs to.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.StateEnum","title":"<code> StateEnum            (str, Enum)         </code>","text":"<p>Enum for the different types a state can be in.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.StateInfo","title":"<code> StateInfo            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class that represents the current event information of a state while simulating.</p> <p>Parameters:</p> Name Type Description Default <code>ID</code> <code>str</code> <p>The ID of the state.</p> required <code>resource_ID</code> <code>str</code> <p>The ID of the resource the state belongs to.</p> required <code>_event_time</code> <code>Optional[float]</code> <p>The time of the event. Defaults to 0.0.</p> required <code>_expected_end_time</code> <code>Optional[float]</code> <p>The expected end time of the state. Defaults to 0.0.</p> required <code>_activity</code> <code>Optional[StateEnum]</code> <p>The activity of the state. Defaults to None.</p> required <code>_state_type</code> <code>Optional[StateTypeEnum]</code> <p>The type of the state. Defaults to None.</p> required <code>_product_ID</code> <code>str</code> <p>The ID of the product the state belongs to. Defaults to \"\".</p> required <code>_target_ID</code> <code>str</code> <p>The ID of the target the state belongs to. Defaults to \"\".</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.StateInfo.log_end_interrupt_state","title":"<code>log_end_interrupt_state(self, end_time, expected_end_time, state_type)</code>","text":"<p>Logs the end of an interrupt of a state.</p> <p>Parameters:</p> Name Type Description Default <code>end_time</code> <code>float</code> <p>The end time of the interruption.</p> required <code>expected_end_time</code> <code>float</code> <p>The expected end time of the state.</p> required <code>state_type</code> <code>StateTypeEnum</code> <p>The type of the state.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.StateInfo.log_end_state","title":"<code>log_end_state(self, end_time, state_type)</code>","text":"<p>Logs the end of a state.</p> <p>Parameters:</p> Name Type Description Default <code>end_time</code> <code>float</code> <p>The end time of the state.</p> required <code>state_type</code> <code>StateTypeEnum</code> <p>The type of the state.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.StateInfo.log_product","title":"<code>log_product(self, _product, state_type)</code>","text":"<p>Logs the product of a transport or production state.</p> <p>Parameters:</p> Name Type Description Default <code>_product</code> <code>product.Product</code> <p>The product.</p> required <code>state_type</code> <code>StateTypeEnum</code> <p>The type of the state.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.StateInfo.log_start_interrupt_state","title":"<code>log_start_interrupt_state(self, start_time, state_type)</code>","text":"<p>Logs the start of an interrupt of a state.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>float</code> <p>The start time of the interruption.</p> required <code>state_type</code> <code>StateTypeEnum</code> <p>The type of the state.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.StateInfo.log_start_state","title":"<code>log_start_state(self, start_time, expected_end_time, state_type)</code>","text":"<p>Logs the start of a state.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>float</code> <p>The start time of the state.</p> required <code>expected_end_time</code> <code>float</code> <p>The expected end time of the state.</p> required <code>state_type</code> <code>StateTypeEnum</code> <p>The type of the state.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.StateInfo.log_transport","title":"<code>log_transport(self, origin, target, state_type, empty_transport)</code>","text":"<p>Logs the target location of a transport state.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>product.Location</code> <p>The target location, either a resource, source or a sink.</p> required <code>state_type</code> <code>StateTypeEnum</code> <p>The type of the state.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.StateTypeEnum","title":"<code> StateTypeEnum            (str, Enum)         </code>","text":"<p>Enum for the different types of states.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.TransportState","title":"<code> TransportState            (State)         </code>  <code>pydantic-model</code>","text":"<p>Represents a transport state of a resource in the simulation. A transport state has a process that simulates the transport of a product. The transport state continues the transport process of a product. If a resource has a higher capacity than 1 for a process, multiple transport states exist, that can run in parallel but only with the same target and end location.</p> <p>Parameters:</p> Name Type Description Default <code>state_data</code> <code>TransportStateData</code> <p>The data of the state.</p> required <code>time_model</code> <code>time_model.TimeModel</code> <p>The time model of the state.</p> required <code>env</code> <code>sim.Environment</code> <p>The simulation environment.</p> required <code>active</code> <code>events.Event</code> <p>Event that indidcates if the state is active. Defaults to None.</p> required <code>finished_process</code> <code>events.Event</code> <p>Event that indicates if the state is finished. Defaults to None.</p> required <code>resource</code> <code>resources.Resource</code> <p>The resource the state belongs to. Defaults to None.</p> required <code>process</code> <code>Optional[events.Process]</code> <p>The process of the state. Defaults to None.</p> required <code>state_info</code> <code>StateInfo</code> <p>The state information of the state. Defaults to None.</p> required <code>start</code> <code>float</code> <p>The start time of the state. Defaults to 0.0.</p> required <code>done_in</code> <code>float</code> <p>The ramaining time for the state to finish. Defaults to 0.0.</p> required <code>interrupted</code> <code>bool</code> <p>Indicates if the state is interrupted. Defaults to False.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.TransportState.activate_state","title":"<code>activate_state(self)</code>","text":"<p>Activates the state and at start of the simulation.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.TransportState.interrupt_process","title":"<code>interrupt_process(self)</code>","text":"<p>Interrupts the process of the state. </p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.TransportState.prepare_for_run","title":"<code>prepare_for_run(self)</code>","text":"<p>Prepares the state for running the process of a state.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.TransportState.process_state","title":"<code>process_state(self, target)</code>","text":"<p>Runs a single process of the state. The process is the key component for the behavior of the state while simulating. All the logic of the state is implemented in the process.</p> <p>Yields:</p> Type Description <code>Generator</code> <p>The generator of the process.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.state.debug_logging","title":"<code>debug_logging(state_instance, msg)</code>","text":"<p>Logs a debug message for a state.</p> <p>Parameters:</p> Name Type Description Default <code>state_instance</code> <code>State</code> <p>The state.</p> required <code>msg</code> <code>str</code> <p>The message.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.store","title":"<code>store</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.store.Queue","title":"<code> Queue            (FilterStore)         </code>","text":"<p>Class for storing products in a queue. The queue is a filter store with a limited or unlimited capacity, where product can be put and get from. </p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>simpy.Environment</code> <p>The simulation environment.</p> required <code>queue_data</code> <code>queue_data.QueueData</code> <p>The queue data object.</p> required <p>Attributes:</p> Name Type Description <code>capacity</code> <code>int</code> <p>The capacity of the queue. If 0 in the queue_data, the capacity is set to infinity.</p> <code>_pending_put</code> <code>int</code> <p>The number of products that are reserved for being put into the queue. Avoids bottleneck in the simulation.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.store.Queue.full","title":"<code>full: bool</code>  <code>property</code> <code>readonly</code>","text":"<p>Checks if the queue is full.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the queue is full, False otherwise.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.store.Queue.reserve","title":"<code>reserve(self)</code>","text":"<p>Reserves a spot in the queue for a product to be put into.</p> <p>Exceptions:</p> Type Description <code>RuntimeError</code> <p>If the queue is full.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.store.Queue.unreseve","title":"<code>unreseve(self)</code>","text":"<p>Unreserves a spot in the queue for a product to be put into after the put is completed.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model","title":"<code>time_model</code>","text":""},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.TIME_MODEL","title":"<code>TIME_MODEL</code>","text":"<p>Union type for all time models.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.FunctionTimeModel","title":"<code> FunctionTimeModel            (TimeModel)         </code>  <code>pydantic-model</code>","text":"<p>Class for time models that are based on a function.</p> <p>Parameters:</p> Name Type Description Default <code>time_model_data</code> <code>FunctionTimeModelData</code> <p>The time model data object.</p> required <code>statistics_buffer</code> <code>List[float]</code> <p>A buffer for the statistics. Defaults to [].</p> required <code>distribution_function_object</code> <code>Callable[[FunctionTimeModelData], List[float]]</code> <p>The distribution function object. Defaults to FUNCTION_DICT[FunctionTimeModelEnum.Constant].</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.FunctionTimeModel.get_expected_time","title":"<code>get_expected_time(self, origin=None, target=None)</code>","text":"<p>Returns the expected time for a time model based on the expected value of the distribution function.</p> <p>Returns:</p> Type Description <code>float</code> <p>The expected time of the time model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.FunctionTimeModel.get_next_time","title":"<code>get_next_time(self, origin=None, target=None)</code>","text":"<p>Returns the next time for a time model based on a sample value of the distribution function.</p> <p>Returns:</p> Type Description <code>float</code> <p>The next time of the time model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.ManhattanDistanceTimeModel","title":"<code> ManhattanDistanceTimeModel            (TimeModel)         </code>  <code>pydantic-model</code>","text":"<p>Class for time models that are based on the manhattan distance between two points and time calculation based on reaction time and speed.</p> <p>Parameters:</p> Name Type Description Default <code>time_model_data</code> <code>ManhattanDistanceTimeModelData</code> <p>The time model data object.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.ManhattanDistanceTimeModel.get_expected_time","title":"<code>get_expected_time(self, origin=None, target=None)</code>","text":"<p>Returns the expected time for a time model based on the manhattan distance between two points and time calculation based on reaction time and speed.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>Optional[List[float]]</code> <p>The origin of the product for a transport. Defaults to None.</p> <code>None</code> <code>target</code> <code>Optional[List[float]]</code> <p>The target of the product for a transport. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>The expected time of the time model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.ManhattanDistanceTimeModel.get_next_time","title":"<code>get_next_time(self, origin=None, target=None)</code>","text":"<p>Returns the next time for a time model based on the manhattan distance between two points and time calculation based on reaction time and speed.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>Optional[List[float]]</code> <p>The origin of the product for a transport. Defaults to None.</p> <code>None</code> <code>target</code> <code>Optional[List[float]]</code> <p>The target of the product for a transport. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>The next time of the time model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.SequentialTimeModel","title":"<code> SequentialTimeModel            (TimeModel)         </code>  <code>pydantic-model</code>","text":"<p>Class for time models that are based on a sequence of values. A random value from the sequence is returned.</p> <p>Parameters:</p> Name Type Description Default <code>time_model_data</code> <code>SequentialTimeModelData</code> <p>The time model data object.</p> required"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.SequentialTimeModel.get_expected_time","title":"<code>get_expected_time(self, origin=None, target=None)</code>","text":"<p>Returns the expected time of the time model.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>Optional[List[float]]</code> <p>The origin of the product for a transport. Defaults to None.</p> <code>None</code> <code>target</code> <code>Optional[List[float]]</code> <p>The target of the product for a transport. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>The expected time of the time model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.SequentialTimeModel.get_next_time","title":"<code>get_next_time(self, origin=None, target=None)</code>","text":"<p>Returns the next time for a time model based on a sample value of the sequence.</p> <p>Returns:</p> Type Description <code>float</code> <p>The next time of the time model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.TimeModel","title":"<code> TimeModel            (ABC, BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Abstract base class for time models.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.TimeModel.get_expected_time","title":"<code>get_expected_time(self, origin=None, target=None)</code>","text":"<p>Returns the expected time of the time model.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>Optional[List[float]]</code> <p>The origin of the product for a transport. Defaults to None.</p> <code>None</code> <code>target</code> <code>Optional[List[float]]</code> <p>The target of the product for a transport. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>The expected time of the time model.</p>"},{"location":"API_reference/API_reference_5_Simulation/#prodsys.simulation.time_model.TimeModel.get_next_time","title":"<code>get_next_time(self, origin=None, target=None)</code>","text":"<p>Returns the next time of the time model.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>Optional[List[float]]</code> <p>The origin of the product for a transport. Defaults to None.</p> <code>None</code> <code>target</code> <code>Optional[List[float]]</code> <p>The target of the product for a transport. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>The next time of the time model.</p>"},{"location":"API_reference/API_reference_6_Optimization/","title":"Optimization","text":"<p>The <code>optimization</code> package of <code>prodsys</code> provides different optimization algorithms for configuration planning of production systems. </p> <p>In configuration planning, the goal is to find a configuration of a production system that maximizes a given objective function. The objective function is a function that maps a configuration to a real number. The configuration is a set of parameters that describe the production system. For example, the configuration of a production system could be the number of machines of a certain type. The objective function could be the output of the production system. The goal is then to find the configuration that maximizes the output. With <code>prodsys.optimization</code>, you can use the modelling capacities of  <code>prodsys.adapters</code> to specifiy configurations and optimize them according to a scenario and chosen degrees of freedom for optimization.</p> <p>The following degrees of freedom are supported and can be specified by the scenario data attribute <code>transformations</code>:</p> <ul> <li>Adding or removing production resources</li> <li>Adding or removing transport resources</li> <li>Adding or removing processes of a production resource</li> <li>Changing the position of production resources</li> <li>Moving processes between production resources</li> <li>Changing the control policy of a production resource</li> <li>Changing the control policy of a transport resource</li> <li>Changing the routing policy of product types</li> </ul> <p>The following algorithms are supported:</p> <ul> <li>Evolutionary Algorithms (NGSGA-II)</li> <li>Simulated Annealing</li> <li>Tabu Search</li> <li>Mathematical optimization (Gurobi, only a restricted set of degrees of freedom is supported)</li> </ul> <p>Whilst the mathematical optimization uses a mathematical model for evalutation of production system performance, the other algorithms use <code>prodsys.simulation</code> for evaluation. This allows these algorithms to consider more degrees of freedom and optimize according to multiple objectives.</p> <p>The following KPIs are supported for objectives in optimization with the simulation based optimization algorithms:</p> <ul> <li>Minimize the WIP (Work in Progress)</li> <li>Minimize the throughput time</li> <li>Minimize the reconfiguration cost considering capital expenditure (CAPEX)</li> <li>Maximize the output / throughput</li> </ul> <p>For a more detailed explanation on the algorithms, degrees of freedom and choice of objectives, please consider the following literature: Paper</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.VERBOSE","title":"<code>VERBOSE</code>","text":"<p>The verbosity level of the optimization algorithms. The higher the level, the more information is printed to the console.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.evolutionary_algorithm","title":"<code>evolutionary_algorithm</code>","text":""},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.evolutionary_algorithm.EvolutionaryAlgorithmHyperparameters","title":"<code> EvolutionaryAlgorithmHyperparameters            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Hyperparameters for configuration optimization using an evolutionary algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>Seed for the random number generator.</p> required <code>number_of_generations</code> <code>int</code> <p>Number of generations to run the algorithm.</p> required <code>population_size</code> <code>int</code> <p>Number of individuals in each generation.</p> required <code>mutation_rate</code> <code>float</code> <p>Probability of mutating an individual.</p> required <code>crossover_rate</code> <code>float</code> <p>Probability of crossover between two individuals.</p> required <code>number_of_seeds</code> <code>int</code> <p>Number of seeds to use for simulation.</p> required <code>number_of_processes</code> <code>int</code> <p>Number of processes to use for parallelization.</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.evolutionary_algorithm.EvolutionaryAlgorithmHyperparameters.seed","title":"<code>seed: int</code>  <code>pydantic-field</code>","text":"<p>Seed for the random number generator.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.evolutionary_algorithm.evolutionary_algorithm_optimization","title":"<code>evolutionary_algorithm_optimization(base_configuration, hyper_parameters, save_folder='results', initial_solutions_folder='', full_save=False)</code>","text":"<p>Optimize a production system configuration using an evolutionary algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>base_configuration</code> <code>adapters.ProductionSystemAdapter</code> <p>production system to optimize.</p> required <code>hyper_parameters</code> <code>EvolutionaryAlgorithmHyperparameters</code> <p>Hyperparameters for configuration optimization using an evolutionary algorithm.</p> required <code>save_folder</code> <code>str</code> <p>Folder to save the results in. Defaults to \"results\".</p> <code>'results'</code> <code>initial_solutions_folder</code> <code>str</code> <p>If specified, the initial solutions are read from this folder and considered in optimization. Defaults to \"\".</p> <code>''</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.evolutionary_algorithm.optimize_configuration","title":"<code>optimize_configuration(base_configuration_file_path, scenario_file_path, save_folder, hyper_parameters, full_save=False)</code>","text":"<p>Optimize a configuration using an evolutionary algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>base_configuration_file_path</code> <code>str</code> <p>File path of the serialized base configuration (<code>prodsys.adapters.JsonProductionSystemAdapter</code>)</p> required <code>scenario_file_path</code> <code>str</code> <p>File path of the serialized scenario (<code>prodsys.models.scenario_data.ScenarioData</code>)</p> required <code>save_folder</code> <code>str</code> <p>Folder to save the results in.</p> required <code>hyper_parameters</code> <code>EvolutionaryAlgorithmHyperparameters</code> <p>Hyperparameters for configuration optimization using an evolutionary algorithm.</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.evolutionary_algorithm.run_evolutionary_algorithm","title":"<code>run_evolutionary_algorithm(save_folder, base_configuration_file_path, scenario_file_path, full_save, seed, ngen, population_size, mutation_rate, crossover_rate, n_seeds, n_processes)</code>","text":"<p>Run an evolutionary algorithm for configuration optimization.</p> <p>Parameters:</p> Name Type Description Default <code>save_folder</code> <code>str</code> <p>Folder to save the results in.</p> required <code>base_configuration_file_path</code> <code>str</code> <p>File path of the serialized base configuration (<code>prodsys.adapters.JsonProductionSystemAdapter</code>)</p> required <code>scenario_file_path</code> <code>str</code> <p>File path of the serialized scenario (<code>prodsys.models.scenario_data.ScenarioData</code>)</p> required <code>full_save</code> <code>bool</code> <p>If True, the full event log of solutions is saved. If False, only the KPIs of solutions are saved.</p> required <code>seed</code> <code>int</code> <p>Random seed for optimization.</p> required <code>ngen</code> <code>int</code> <p>Number of generations to run the algorithm.</p> required <code>population_size</code> <code>int</code> <p>Number of individuals in each generation.</p> required <code>mutation_rate</code> <code>float</code> <p>Probability of mutating an individual.</p> required <code>crossover_rate</code> <code>float</code> <p>Probability of crossover between two individuals.</p> required <code>n_seeds</code> <code>int</code> <p>Number of seeds to use for simulation.</p> required <code>n_processes</code> <code>int</code> <p>Number of processes to use for parallelization.</p> required <code>initial_solutions_folder</code> <code>str</code> <p>If specified, the initial solutions are read from this folder and considered in optimization. Defaults to \"\".</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt","title":"<code>math_opt</code>","text":""},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt.MathOptHyperparameters","title":"<code> MathOptHyperparameters            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Hyperparameters for configuration optimization with mathematical optimization. For mathetical optimization, only production capacity is optimized.. Mathematical optimization is performed with Gurobi, so a valid Gurobi license is required.</p> <p>Parameters:</p> Name Type Description Default <code>optimization_time_portion</code> <code>float</code> <p>Portion of the total time that is used for optimization.</p> required <code>number_of_solutions</code> <code>int</code> <p>Number of solutions that are generated.</p> required <code>adjusted_number_of_transport_resources</code> <code>int</code> <p>Number of transport resources that are used for the optimization.</p> required <code>number_of_seeds</code> <code>int</code> <p>Number of seeds for the simulation runs.</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt.MathOptimizer","title":"<code> MathOptimizer            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Mathematical optimizer for configuration planning of production systems. For mathetical optimization, only production capacity, cosidering the number of production resources and their processes. Here, only configuration cost can be optimized. However, the mathematical optimization set the expected number of produced products as a constraint, thus allowing for a target output.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapters.ProductionSystemAdapter</code> <p>Adapter that contains the configuration of the production system to use for optimization.</p> required <code>optimization_time_portion</code> <code>float</code> <p>Portion of the total time that is used for optimization. Can reduce computation time significantly.</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt.MathOptimizer.optimize","title":"<code>optimize(self, n_solutions=1)</code>","text":"<p>Optimize the configuration of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>n_solutions</code> <code>int</code> <p>Number of solutions to find. Defaults to 1.</p> <code>1</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt.MathOptimizer.save_model","title":"<code>save_model(self, save_folder)</code>","text":"<p>Saves the optimization model to a file with the name 'MILP.lp'.</p> <p>Parameters:</p> Name Type Description Default <code>save_folder</code> <code>str</code> <p>Folder to save the model in.</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt.MathOptimizer.save_results","title":"<code>save_results(self, save_folder, adjusted_number_of_transport_resources=1, number_of_seeds=1, full_save=False)</code>","text":"<p>Saves the results of the optimization, i.e. system configuration (<code>prodsys.adapters.JsonProductionSystemAdapter</code>) and performance of the found configuration in a simulation run. </p> <p>For saving the configuration, some defaults attributes are used for non-found degrees of freedom in the optimization:</p> <ul> <li>random location of a production resource</li> <li>FIFO control policy for a production resource</li> <li>FIFO control policy for a transport resource</li> </ul> <p>Parameters:</p> Name Type Description Default <code>save_folder</code> <code>str</code> <p>Folder to save the results in.</p> required <code>adjusted_number_of_transport_resources</code> <code>int</code> <p>Number of transport resources that are used for the optimization. Defaults to 1.</p> <code>1</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt.adjust_number_of_transport_resources","title":"<code>adjust_number_of_transport_resources(adapter_object, number_of_transport_resources)</code>","text":"<p>Adjusts the number of transport resources in the adapter object.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.Adapter</code> <p>Adapter object.</p> required <code>number_of_transport_resources</code> <code>int</code> <p>Number of transport resources.</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt.mathematical_optimization","title":"<code>mathematical_optimization(base_configuration, hyper_parameters, save_folder='results', full_save=False)</code>","text":"<p>Optimize the configuration of the production system with mathematical optimization.</p> <p>Parameters:</p> Name Type Description Default <code>base_configuration</code> <code>adapters.ProductionSystemAdapter</code> <p>Base configuration for the optimization.</p> required <code>hyper_parameters</code> <code>MathOptHyperparameters</code> <p>Hyperparameters for configuration optimization with mathematical optimization.</p> required <code>save_folder</code> <code>str</code> <p>Folder to save the results in. Defaults to \"results\".</p> <code>'results'</code> <code>full_save</code> <code>bool</code> <p>Indicates if the full results are saved. Defaults to False.</p> <code>False</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt.optimize_configuration","title":"<code>optimize_configuration(base_configuration_file_path, scenario_file_path, save_folder, hyper_parameters, full_save=False)</code>","text":"<p>Optimize the configuration of the production system with mathematical optimization.</p> <p>Parameters:</p> Name Type Description Default <code>base_configuration_file_path</code> <code>str</code> <p>File path of the serialized base configuration (<code>prodsys.adapters.JsonProductionSystemAdapter</code>)</p> required <code>scenario_file_path</code> <code>str</code> <p>File path of the serialized scenario (<code>prodsys.models.scenario_data.ScenarioData</code>)</p> required <code>save_folder</code> <code>str</code> <p>Folder to save the results in.</p> required <code>hyper_parameters</code> <code>MathOptHyperparameters</code> <p>Hyperparameters for configuration optimization with mathematical optimization.</p> required <code>full_save</code> <code>bool</code> <p>Indicates if the full results are saved. Defaults to False.</p> <code>False</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.math_opt.run_mathematical_optimization","title":"<code>run_mathematical_optimization(save_folder, base_configuration_file_path, scenario_file_path, full_save, optimization_time_portion, number_of_solutions, adjusted_number_of_transport_resources, number_of_seeds=1)</code>","text":"<p>Run a mathematical optimization for configuration planning of production systems. </p> <p>Parameters:</p> Name Type Description Default <code>save_folder</code> <code>str</code> <p>Folder to save the results in.</p> required <code>base_configuration_file_path</code> <code>str</code> <p>File path of the serialized base configuration (<code>prodsys.adapters.JsonProductionSystemAdapter</code>)</p> required <code>scenario_file_path</code> <code>str</code> <p>File path of the serialized scenario (<code>prodsys.models.scenario_data.ScenarioData</code>)</p> required <code>optimization_time_portion</code> <code>float</code> <p>Portion of the total time that is used for optimization. Can reduce computation time significantly.</p> required <code>number_of_solutions</code> <code>int</code> <p>Number of solutions to find.</p> required <code>adjusted_number_of_transport_resources</code> <code>int</code> <p>Number of transport resources that are used when saving the model.</p> required <code>number_of_seeds</code> <code>int</code> <p>Number of seeds for the simulation runs. Defaults to 1.</p> <code>1</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_analysis","title":"<code>optimization_analysis</code>","text":""},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_analysis.get_pareto_solutions_from_result_files","title":"<code>get_pareto_solutions_from_result_files(file_path)</code>","text":"<p>Analyses an optimization result file and returns the IDs of the pareto efficient solutions.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Filepath of the json file containing the optimization results.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of IDs of the pareto efficient solutions.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_analysis.is_pareto_efficient","title":"<code>is_pareto_efficient(costs)</code>","text":"<p>Find the pareto-efficient points</p> <p>Parameters:</p> Name Type Description Default <code>costs</code> <code>np.ndarray</code> <p>An (n_points, n_costs) array</p> required <p>Returns:</p> Type Description <code>np.ndarray</code> <p>A (n_points, ) boolean array, indicating whether each point is Pareto efficient</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_analysis.is_pareto_efficient_simple","title":"<code>is_pareto_efficient_simple(costs)</code>","text":"<p>Find the pareto-efficient points</p> <p>Parameters:</p> Name Type Description Default <code>costs</code> <code>np.ndarray</code> <p>An (n_points, n_costs) array</p> required <p>Returns:</p> Type Description <code>np.ndarray</code> <p>A (n_points, ) boolean array, indicating whether each point is Pareto efficient</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_analysis.read_optimization_results_file_to_df","title":"<code>read_optimization_results_file_to_df(filepath, label)</code>","text":"<p>Function reads the results of an optimization run from a json file and returns a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Filepath to the json file.</p> required <code>label</code> <code>str</code> <p>Label to specify the utilized optimizer.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Dataframe containing the optimization results.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util","title":"<code>optimization_util</code>","text":"<p>Module containts utility functions for the optimization module. These functions can be used to change the production system configuration and evaluate its performance.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.add_machine","title":"<code>add_machine(adapter_object)</code>","text":"<p>Function that adds a random machine to the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a machine was added, False otherwise (if adding is not possible due to constraint violations).</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.add_process_module","title":"<code>add_process_module(adapter_object)</code>","text":"<p>Function that adds a random process module to a random machine of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a process module was added, False otherwise (if adding is not possible due to constraint violations).</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.add_transport_resource","title":"<code>add_transport_resource(adapter_object)</code>","text":"<p>Function that adds a random transport resource to the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a transport resource was added, False otherwise (if adding is not possible due to constraint violations).</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.adjust_process_capacities","title":"<code>adjust_process_capacities(adapter_object)</code>","text":"<p>Function that adjusts the process capacities of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with adjusted process capacities.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.change_control_policy","title":"<code>change_control_policy(adapter_object)</code>","text":"<p>Function that changes the control policy of a random resource of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the control policy was changed, False otherwise (if changing is not possible due to constraint violations).</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.change_routing_policy","title":"<code>change_routing_policy(adapter_object)</code>","text":"<p>Function that changes the routing policy of a random source of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.check_breakdown_state_available","title":"<code>check_breakdown_state_available(adapter_object, breakdown_state_id)</code>","text":"<p>Function that checks if breakdown states are available in the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if breakdown states are available, False otherwise.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.check_breakdown_states_available","title":"<code>check_breakdown_states_available(adapter_object)</code>","text":"<p>Function that checks if breakdown states are available in the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if breakdown states are available, False otherwise.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.check_heterogenous_time_models","title":"<code>check_heterogenous_time_models(time_models)</code>","text":"<p>Function that checks if heterogenous time models are present in the list.</p> <p>Parameters:</p> Name Type Description Default <code>time_models</code> <code>List[time_model_data.TIME_MODEL_DATA]</code> <p>List of time models.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if heterogenous time models are available, False otherwise.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.check_states_for_heterogenous_time_models","title":"<code>check_states_for_heterogenous_time_models(states, adapter_object)</code>","text":"<p>Function that checks if the states have heterogenous time models.</p> <p>Parameters:</p> Name Type Description Default <code>states</code> <code>List[Union[state_data.BreakDownStateData, state_data.ProcessBreakDownStateData]]</code> <p>List of states.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the states are compatible, False otherwise.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.check_valid_configuration","title":"<code>check_valid_configuration(configuration, base_configuration)</code>","text":"<p>Function that checks if a configuration is valid.</p> <p>Parameters:</p> Name Type Description Default <code>configuration</code> <code>adapters.ProductionSystemAdapter</code> <p>Configuration to be checked.</p> required <code>base_configuration</code> <code>adapters.ProductionSystemAdapter</code> <p>Baseline configuration.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the configuration is valid, False otherwise.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.evaluate","title":"<code>evaluate(base_scenario, solution_dict, performances, number_of_seeds, full_save_folder_file_path, individual)</code>","text":"<p>Function that evaluates a configuration.</p> <p>Parameters:</p> Name Type Description Default <code>base_scenario</code> <code>adapters.ProductionSystemAdapter</code> <p>Baseline configuration.</p> required <code>solution_dict</code> <code>Dict[str, Union[list, str]]</code> <p>Dictionary containing the ids of existing solutions.</p> required <code>performances</code> <code>dict</code> <p>Dictionary containing the performances of the current and previous generations.</p> required <code>number_of_seeds</code> <code>int</code> <p>Number of seeds for the simulation runs.</p> required <code>individual</code> <code>List[adapters.ProductionSystemAdapter]</code> <p>List if length 1 containing the configuration to be evaluated.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the time range is not defined in the scenario data.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>List of the fitness values of the configuration.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.get_random_control_policies","title":"<code>get_random_control_policies(adapter_object)</code>","text":"<p>Function that randomly assigns control policies to the machines and transport resources of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data and assigned control policies.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.get_random_layout","title":"<code>get_random_layout(adapter_object)</code>","text":"<p>Function that randomly arranges the machines of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data and arranged machines.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.get_random_production_capacity","title":"<code>get_random_production_capacity(adapter_object)</code>","text":"<p>Function that adds a random number of machines to the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data and added machines.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.get_random_routing_logic","title":"<code>get_random_routing_logic(adapter_object)</code>","text":"<p>Function that randomly assigns routing logics to the sources of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data and assigned routing logics.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.get_random_transport_capacity","title":"<code>get_random_transport_capacity(adapter_object)</code>","text":"<p>Function that adds a random number of transport resources to the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data and added transport resources.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.get_weights","title":"<code>get_weights(adapter, direction)</code>","text":"<p>Get the weights for the objectives of the optimization from an adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <code>direction</code> <code>Literal[&amp;quot;min&amp;quot;, &amp;quot;max&amp;quot;]</code> <p>Optimization target direction of the optimizer.</p> required <p>Returns:</p> Type Description <code>Tuple[float, ...]</code> <p>Tuple of weights for the objectives.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.move_machine","title":"<code>move_machine(adapter_object)</code>","text":"<p>Function that moves a random machine to a random position of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a machine was moved, False otherwise (if moving is not possible due to constraint violations).</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.move_process_module","title":"<code>move_process_module(adapter_object)</code>","text":"<p>Function that moves a random process module from a random machine to another random machine of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a process module was moved, False otherwise (if moving is not possible due to constraint violations).</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.random_configuration","title":"<code>random_configuration(baseline)</code>","text":"<p>Function that creates a random configuration based on a baseline configuration.</p> <p>Parameters:</p> Name Type Description Default <code>baseline</code> <code>adapters.ProductionSystemAdapter</code> <p>Baseline configuration.</p> required <p>Returns:</p> Type Description <code>adapters.ProductionSystemAdapter</code> <p>Random configuration based on a baseline configuration.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.random_configuration_with_initial_solution","title":"<code>random_configuration_with_initial_solution(initial_adapters)</code>","text":"<p>Function that creates a random configuration based on an list of initial solutions.</p> <p>Parameters:</p> Name Type Description Default <code>initial_adapters</code> <code>List[adapters.ProductionSystemAdapter]</code> <p>List of initial solutions.</p> required <p>Returns:</p> Type Description <code>adapters.ProductionSystemAdapter</code> <p>Random configuration based on an initial solution.</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.remove_machine","title":"<code>remove_machine(adapter_object)</code>","text":"<p>Function that removes a random machine from the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a machine was removed, False otherwise (if removing is not possible due to constraint violations).</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.remove_process_module","title":"<code>remove_process_module(adapter_object)</code>","text":"<p>Function that removes a random process module from a random machine of the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a process module was removed, False otherwise (if removing is not possible due to constraint violations).</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.optimization_util.remove_transport_resource","title":"<code>remove_transport_resource(adapter_object)</code>","text":"<p>Function that removes a random transport resource from the production system.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapters.ProductionSystemAdapter</code> <p>Production system configuration with specified scenario data.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if a transport resource was removed, False otherwise (if removing is not possible due to constraint violations).</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.simulated_annealing","title":"<code>simulated_annealing</code>","text":""},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.simulated_annealing.ProductionSystemOptimization","title":"<code> ProductionSystemOptimization            (Annealer)         </code>","text":""},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.simulated_annealing.ProductionSystemOptimization.energy","title":"<code>energy(self)</code>","text":"<p>Calculate state's energy</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.simulated_annealing.ProductionSystemOptimization.move","title":"<code>move(self)</code>","text":"<p>Create a state change</p>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.simulated_annealing.SimulatedAnnealingHyperparameters","title":"<code> SimulatedAnnealingHyperparameters            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Hyperparameters to perform a configuration optimization with simulated annealing.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>Seed for random number generator</p> required <code>Tmax</code> <code>int</code> <p>Maximum temperature</p> required <code>Tmin</code> <code>int</code> <p>Minimum temperature</p> required <code>steps</code> <code>int</code> <p>Number of steps</p> required <code>updates</code> <code>int</code> <p>Number of updates</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.simulated_annealing.optimize_configuration","title":"<code>optimize_configuration(base_configuration_file_path, scenario_file_path, save_folder, hyper_parameters, full_save=False)</code>","text":"<p>Optimize a configuration with simulated annealing.</p> <p>Parameters:</p> Name Type Description Default <code>base_configuration_file_path</code> <code>str</code> <p>File path of the serialized base configuration (<code>prodsys.adapters.JsonProductionSystemAdapter</code>)</p> required <code>scenario_file_path</code> <code>str</code> <p>File path of the serialized scenario (<code>prodsys.models.scenario_data.ScenarioData</code>)</p> required <code>save_folder</code> <code>str</code> <p>Folder to save the results in.</p> required <code>hyper_parameters</code> <code>SimulatedAnnealingHyperparameters</code> <p>Hyperparameters to perform a configuration optimization with simulated annealing.</p> required <code>full_save</code> <code>bool</code> <p>Save the full results of the optimization. Defaults to False.</p> <code>False</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.simulated_annealing.run_simulated_annealing","title":"<code>run_simulated_annealing(save_folder, base_configuration_file_path, scenario_file_path, full_save, seed, Tmax, Tmin, steps, updates, number_of_seeds, initial_solution_file_path='')</code>","text":"<p>Run a simulated annealing algorithm for configuration optimization.</p> <p>Parameters:</p> Name Type Description Default <code>save_folder</code> <code>str</code> <p>Folder to save the results in.</p> required <code>base_configuration_file_path</code> <code>str</code> <p>File path of the serialized base configuration (<code>prodsys.adapters.JsonProductionSystemAdapter</code>)</p> required <code>scenario_file_path</code> <code>str</code> <p>File path of the serialized scenario (<code>prodsys.models.scenario_data.ScenarioData</code>)</p> required <code>full_save</code> <code>bool</code> <p>Save the full results of the optimization.</p> required <code>seed</code> <code>int</code> <p>Random seed for optimization.</p> required <code>Tmax</code> <code>int</code> <p>Maximum temperature</p> required <code>Tmin</code> <code>int</code> <p>Minimum temperature</p> required <code>steps</code> <code>int</code> <p>Steps for annealing</p> required <code>updates</code> <code>int</code> <p>Number of updates</p> required <code>number_of_seeds</code> <code>int</code> <p>Number of seeds for optimization</p> required <code>initial_solution_file_path</code> <code>str</code> <p>File path to an initial solution. Defaults to \"\".</p> <code>''</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.simulated_annealing.simulated_annealing_optimization","title":"<code>simulated_annealing_optimization(base_configuration, hyper_parameters, save_folder='results', initial_solution=None, full_save=False)</code>","text":"<p>Optimize a production system configuration using simulated anealing.</p> <p>Parameters:</p> Name Type Description Default <code>base_configuration</code> <code>adapters.ProductionSystemAdapter</code> <p>production system to optimize.</p> required <code>hyper_parameters</code> <code>SimulatedAnnealingHyperparameters</code> <p>Hyperparameters for simulated annealing.</p> required <code>save_folder</code> <code>str</code> <p>Folder to save the results in. Defaults to \"results\".</p> <code>'results'</code> <code>initial_solution</code> <code>adapters.ProductionSystemAdapter</code> <p>Initial solution for optimization. Defaults to None.</p> <code>None</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.tabu_search","title":"<code>tabu_search</code>","text":""},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.tabu_search.TabuSearchHyperparameters","title":"<code> TabuSearchHyperparameters            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Hyperparameters for configuration optimization with tabu search.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>Seed for random number generator</p> required <code>tabu_size</code> <code>int</code> <p>Size of tabu list</p> required <code>max_steps</code> <code>int</code> <p>Maximum number of steps</p> required <code>max_score</code> <code>float</code> <p>Maximum score</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.tabu_search.optimize_configuration","title":"<code>optimize_configuration(base_configuration_file_path, scenario_file_path, save_folder, hyper_parameters, full_save=False)</code>","text":"<p>Optimize configuration with tabu search.</p> <p>Parameters:</p> Name Type Description Default <code>base_configuration_file_path</code> <code>str</code> <p>File path of the serialized base configuration (<code>prodsys.adapters.JsonProductionSystemAdapter</code>)</p> required <code>scenario_file_path</code> <code>str</code> <p>File path of the serialized scenario (<code>prodsys.models.scenario_data.ScenarioData</code>)</p> required <code>save_folder</code> <code>str</code> <p>Folder to save the results in.</p> required <code>hyper_parameters</code> <code>TabuSearchHyperparameters</code> <p>Hyperparameters for configuration optimization with tabu search.</p> required"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.tabu_search.run_tabu_search","title":"<code>run_tabu_search(save_folder, base_configuration_file_path, scenario_file_path, seed, tabu_size, max_steps, max_score, number_of_seeds=1, initial_solution_file_path='', full_save=False)</code>","text":"<p>Runs tabu search optimization.</p> <p>Parameters:</p> Name Type Description Default <code>save_folder</code> <code>str</code> <p>Folder to save the results in.</p> required <code>base_configuration_file_path</code> <code>str</code> <p>File path of the serialized base configuration (<code>prodsys.adapters.JsonProductionSystemAdapter</code>)</p> required <code>scenario_file_path</code> <code>str</code> <p>File path of the serialized scenario (<code>prodsys.models.scenario_data.ScenarioData</code>)</p> required <code>seed</code> <code>int</code> <p>Random seed for optimization.</p> required <code>tabu_size</code> <code>int</code> <p>Size of the tabu list.</p> required <code>max_steps</code> <code>int</code> <p>Maximum number of steps.</p> required <code>max_score</code> <code>int</code> <p>Maximum score to stop optimization.</p> required <code>number_of_seeds</code> <code>int</code> <p>Number of seeds for optimization. Defaults to 1.</p> <code>1</code> <code>initial_solution_file_path</code> <code>str</code> <p>File path to an initial solution. Defaults to \"\".</p> <code>''</code>"},{"location":"API_reference/API_reference_6_Optimization/#prodsys.optimization.tabu_search.tabu_search_optimization","title":"<code>tabu_search_optimization(base_configuration, hyper_parameters, save_folder, initial_solution=None, full_save=False)</code>","text":"<p>Optimize a production system configuration using tabu search.</p> <p>Parameters:</p> Name Type Description Default <code>base_configuration</code> <code>adapters.ProductionSystemAdapter</code> <p>production system to optimize.</p> required <code>hyper_parameters</code> <code>SimulatedAnnealingHyperparameters</code> <p>Hyperparameters for tabu search.</p> required <code>save_folder</code> <code>str</code> <p>Folder to save the results in. Defaults to \"results\".</p> required <code>initial_solution</code> <code>adapters.ProductionSystemAdapter</code> <p>Initial solution for optimization. Defaults to None.</p> <code>None</code>"},{"location":"API_reference/API_reference_7_Control/","title":"Control","text":"<p>This package contains the control module. It is used for controlling the resource controllers or routers in the simulation with RL agents.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env","title":"<code>routing_control_env</code>","text":""},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv","title":"<code> AbstractRoutingControlEnv            (Env, ABC)         </code>","text":"<p>Abstract Gym environment for controlling a router of a production system with an reinforcement learning agent. This class defines the methods that need to be implemented in order to use a Reinforcement learning agent for production routing control.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapters.ProductionSystemAdapter</code> <p>The adapter.</p> required <code>observation_space</code> <code>Optional[spaces.Space]</code> <p>The observation space of the environment.</p> <code>None</code> <code>action_space</code> <code>Optional[spaces.Space]</code> <p>The action space of the environment.</p> <code>None</code> <code>render_mode</code> <code>Optional[str]</code> <p>The render mode of the environment. Defaults to None.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>adapter</code> <code>adapters.ProductionSystemAdapter</code> <p>The adapter.</p> <code>observation_space</code> <code>Optional[spaces.Space]</code> <p>The observation space of the environment.</p> <code>action_space</code> <code>Optional[spaces.Space]</code> <p>The action space of the environment.</p> <code>render_mode</code> <code>Optional[str]</code> <p>The render mode of the environment. Defaults to None.</p> <code>runner</code> <code>runner.Runner</code> <p>The runner of the adapter.</p> <code>router</code> <code>router.Router</code> <p>(router.Router): The router of the adapter.</p> <code>possible_resources</code> <code>List[resources.Resource]</code> <p>The possible resources to route to.</p> <code>interrupt_simulation_event</code> <code>events.Event</code> <p>The event to interrupt the simulation when an agent interaction is needed.</p> <code>observers</code> <code>List[observer.ResourceObserver]</code> <p>The observers for the reosurces to route to.</p> <code>step_count</code> <code>int</code> <p>The number of steps taken in the environment.</p> <code>reward</code> <code>float</code> <p>The reward of the environment.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.get_chosen_resource","title":"<code>get_chosen_resource(self)</code>","text":"<p>Get the chosen resource of the RL agent for the router.</p> <p>Returns:</p> Type Description <code>resources.Resource</code> <p>The chosen resource.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.get_info","title":"<code>get_info(self)</code>","text":"<p>Get info of the environment.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The info.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.get_observation","title":"<code>get_observation(self)</code>","text":"<p>Get observation of the environment.</p> <p>Returns:</p> Type Description <code>np.ndarray</code> <p>The observation.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.get_reward","title":"<code>get_reward(self, invalid_action=False)</code>","text":"<p>Get reward of the environment.</p> <p>Parameters:</p> Name Type Description Default <code>invalid_action</code> <code>bool</code> <p>Whether the last action was invalid. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>float</code> <p>The reward.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.get_termination_condition","title":"<code>get_termination_condition(self)</code>","text":"<p>Get termination condition of the environment.</p> <p>Returns:</p> Type Description <code>bool</code> <p>The termination condition.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.render","title":"<code>render(self)</code>","text":"<p>Render the environment.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.reset","title":"<code>reset(self, seed=None)</code>","text":"<p>Reset env for new episode and run until first point of observation.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>Optional[int]</code> <p>The seed for the environment. Defaults to None.</p> <code>None</code> <code>options</code> <code>Optional[dict]</code> <p>The options for the environment. Defaults to None.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.set_action_space","title":"<code>set_action_space(self, action_space)</code>","text":"<p>Set the action space of the environment.</p> <p>Parameters:</p> Name Type Description Default <code>action_space</code> <code>spaces.Space</code> <p>The action space of the environment.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.set_binary_box_action_space_from_shape","title":"<code>set_binary_box_action_space_from_shape(self, shape)</code>","text":"<p>Set the action space of the environment to a binary box space.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Tuple[int, ...]</code> <p>The shape of the action space.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.set_binary_box_observation_space_from_shape","title":"<code>set_binary_box_observation_space_from_shape(self, shape)</code>","text":"<p>Set the observation space of the environment to a binary box space.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Tuple[int, ...]</code> <p>The shape of the observation space.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.set_observation_space","title":"<code>set_observation_space(self, observation_space)</code>","text":"<p>Set the observation space of the environment.</p> <p>Parameters:</p> Name Type Description Default <code>observation_space</code> <code>spaces.Space</code> <p>The observation space of the environment.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.set_possible_resources","title":"<code>set_possible_resources(self, resources)</code>","text":"<p>Set possible resources for the RL agent environment.</p> <p>Parameters:</p> Name Type Description Default <code>resources</code> <code>List[resources.Resource]</code> <p>The possible resources.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.routing_control_env.AbstractRoutingControlEnv.step","title":"<code>step(self, action)</code>","text":"<p>Take a step in the environment.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>np.ndarray</code> <p>The output of the agent for actions.</p> required <p>Returns:</p> Type Description <code>Tuple[np.ndarray, float, bool, dict]</code> <p>The observation, reward, done, and info.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env","title":"<code>sequencing_control_env</code>","text":""},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv","title":"<code> AbstractSequencingControlEnv            (Env, ABC)         </code>","text":"<p>Abstract Gym environment for controlling a controller of a resource wtih an agent. This class defines the methods that need to be implemented in order to use a Reinforcement learning agent for production control.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapters.ProductionSystemAdapter</code> <p>The adapter.</p> required <code>resource_id</code> <code>str</code> <p>The ID of the resource to control.</p> required <code>observation_space</code> <code>Optional[spaces.Space]</code> <p>The observation space of the environment.</p> <code>None</code> <code>action_space</code> <code>Optional[spaces.Space]</code> <p>The action space of the environment.</p> <code>None</code> <code>render_mode</code> <code>Optional[str]</code> <p>The render mode of the environment. Defaults to None.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>adapter</code> <code>adapters.ProductionSystemAdapter</code> <p>The adapter.</p> <code>resource_id</code> <code>str</code> <p>The ID of the resource to control.</p> <code>observation_space</code> <code>Optional[spaces.Space]</code> <p>The observation space of the environment.</p> <code>action_space</code> <code>Optional[spaces.Space]</code> <p>The action space of the environment.</p> <code>render_mode</code> <code>Optional[str]</code> <p>The render mode of the environment. Defaults to None.</p> <code>runner</code> <code>runner.Runner</code> <p>The runner of the adapter.</p> <code>interrupt_simulation_event</code> <code>events.Event</code> <p>The event to interrupt the simulation when an agent interaction is needed.</p> <code>resource_controller</code> <code>control.Controller</code> <p>The controller of the resource.</p> <code>resource</code> <code>resources.Resource</code> <p>The resource to control.</p> <code>observer</code> <code>observer.ResourceObserver</code> <p>The observer of the resource.</p> <code>step_count</code> <code>int</code> <p>The number of steps taken in the environment.</p> <code>reward</code> <code>float</code> <p>The reward of the environment.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.get_info","title":"<code>get_info(self)</code>","text":"<p>Get info of the environment.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The info.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.get_observation","title":"<code>get_observation(self)</code>","text":"<p>Get observation of the environment.</p> <p>Returns:</p> Type Description <code>np.ndarray</code> <p>The observation.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.get_reward","title":"<code>get_reward(self, processed_request, invalid_action=False)</code>","text":"<p>Get reward of the environment.</p> <p>Parameters:</p> Name Type Description Default <code>processed_request</code> <code>request.Request</code> <p>The processed request of the last step.</p> required <code>invalid_action</code> <code>bool</code> <p>Whether the last action was invalid. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>float</code> <p>The reward.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.get_termination_condition","title":"<code>get_termination_condition(self)</code>","text":"<p>Get termination condition of the environment.</p> <p>Returns:</p> Type Description <code>bool</code> <p>The termination condition.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.render","title":"<code>render(self)</code>","text":"<p>Render the environment.</p>"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.reset","title":"<code>reset(self, seed=None)</code>","text":"<p>Reset env for new episode and run until first point of observation.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>Optional[int]</code> <p>The seed for the environment. Defaults to None.</p> <code>None</code> <code>options</code> <code>Optional[dict]</code> <p>The options for the environment. Defaults to None.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.set_action_space","title":"<code>set_action_space(self, action_space)</code>","text":"<p>Set the action space of the environment.</p> <p>Parameters:</p> Name Type Description Default <code>action_space</code> <code>spaces.Space</code> <p>The action space of the environment.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.set_binary_box_action_space_from_shape","title":"<code>set_binary_box_action_space_from_shape(self, shape)</code>","text":"<p>Set the action space of the environment to a binary box space.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Tuple[int, ...]</code> <p>The shape of the action space.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.set_binary_box_observation_space_from_shape","title":"<code>set_binary_box_observation_space_from_shape(self, shape)</code>","text":"<p>Set the observation space of the environment to a binary box space.</p> <p>Parameters:</p> Name Type Description Default <code>shape</code> <code>Tuple[int, ...]</code> <p>The shape of the observation space.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.set_observation_space","title":"<code>set_observation_space(self, observation_space)</code>","text":"<p>Set the observation space of the environment.</p> <p>Parameters:</p> Name Type Description Default <code>observation_space</code> <code>spaces.Space</code> <p>The observation space of the environment.</p> required"},{"location":"API_reference/API_reference_7_Control/#prodsys.control.sequencing_control_env.AbstractSequencingControlEnv.step","title":"<code>step(self, action)</code>","text":"<p>Take a step in the environment.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>np.ndarray</code> <p>The output of the agent for actions.</p> required <p>Returns:</p> Type Description <code>Tuple[np.ndarray, float, bool, dict]</code> <p>The observation, reward, done, and info.</p>"},{"location":"API_reference/API_reference_8_util/","title":"Util","text":"<p>Contains utility functions for the prodsys package.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.kpi_visualization","title":"<code>kpi_visualization</code>","text":""},{"location":"API_reference/API_reference_8_util/#prodsys.util.kpi_visualization.plot_WIP","title":"<code>plot_WIP(post_processor)</code>","text":"<p>Plots the WIP of the production system over time of the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>post_processor</code> <code>post_processing.PostProcessor</code> <p>Post processor of the simulation.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.kpi_visualization.plot_WIP_per_resource","title":"<code>plot_WIP_per_resource(post_processor)</code>","text":"<p>Plots the WIP of the production system and the resources in the production system over time of the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>post_processor</code> <code>post_processing.PostProcessor</code> <p>Post processor of the simulation.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.kpi_visualization.plot_WIP_with_range","title":"<code>plot_WIP_with_range(post_processor)</code>","text":"<p>Plots the WIP of the production system over time of the simulation with a range of the WIP based on a standard deviation.</p> <p>Parameters:</p> Name Type Description Default <code>post_processor</code> <code>post_processing.PostProcessor</code> <p>Post processor of the simulation.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.kpi_visualization.plot_throughput_time_distribution","title":"<code>plot_throughput_time_distribution(post_processor)</code>","text":"<p>Plots the throughput time distribution of the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>post_processor</code> <code>post_processing.PostProcessor</code> <p>Post processor of the simulation.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.kpi_visualization.plot_throughput_time_over_time","title":"<code>plot_throughput_time_over_time(post_processor)</code>","text":"<p>Plots the throughput time over time of the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>post_processor</code> <code>post_processing.PostProcessor</code> <p>Post processor of the simulation.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.kpi_visualization.plot_time_per_state_of_resources","title":"<code>plot_time_per_state_of_resources(post_processor, normalized=True)</code>","text":"<p>Plots the time per state of the resources of the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>post_processor</code> <code>post_processing.PostProcessor</code> <p>Post processor of the simulation.</p> required <code>normalized</code> <code>bool</code> <p>If True, the time per state is normalized with the total time of the simulation. Defaults to True.</p> <code>True</code>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.kpi_visualization.print_aggregated_data","title":"<code>print_aggregated_data(post_processor)</code>","text":"<p>Prints the aggregated data of the simulation, comprising the throughput, WIP, throughput time and resource states.</p> <p>Parameters:</p> Name Type Description Default <code>post_processor</code> <code>post_processing.PostProcessor</code> <p>Post processor of the simulation.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing","title":"<code>post_processing</code>","text":""},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor","title":"<code> PostProcessor        </code>  <code>dataclass</code>","text":"<p>Class that represents a post processor for the simulation results. It provides methods to read the simulation results from a csv file and to calculate simulation result analysis data and KPIs.</p> <p>The data frame that contains the raw simulation results contains the following columns:</p> <pre><code>-Time: Time of the event\n-Resource: ID fo the Resource that performed the event\n-State: ID of the State of the resource (production states, transport states, breakdown states, setup states)\n-State Type: Type of the state according to the prodsys.simulation.state.StateTypeEnum\n-Activity: Activity of the resource according to the prodsys.simulation.state.StateEnum\n-Product: ID of the Product that is processed by the resource only for creation and production states\n-Expected End Time: Expected end time of the state at the beginning of the process\n-Target location: Target location of the product at the end of the process\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to the csv file with the simulation results.</p> <code>''</code> <code>df_raw</code> <code>pd.DataFrame</code> <p>Data frame with the simulation results.</p> <code>None</code>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.WIP_KPIs","title":"<code>WIP_KPIs: List[prodsys.models.performance_indicators.KPI]</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a list of average WIP KPI values for each product type and the whole system.</p> <p>Returns:</p> Type Description <code>List[performance_indicators.KPI]</code> <p>List of average WIP KPI values.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.aggregated_throughput_time_KPIs","title":"<code>aggregated_throughput_time_KPIs: List[prodsys.models.performance_indicators.KPI]</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a list of average Throughput Time KPI values for each product type.</p> <p>Returns:</p> Type Description <code>List[performance_indicators.KPI]</code> <p>List of average Throughput Time KPI values.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_WIP","title":"<code>df_WIP: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the WIP over time in the total production system.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the WIP over time in the total production system.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_WIP_per_product","title":"<code>df_WIP_per_product: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the WIP over time for each product type.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the WIP over time for each product type.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_WIP_per_resource","title":"<code>df_WIP_per_resource: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the WIP over time for each resource.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the WIP over time for each resource.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_aggregated_WIP","title":"<code>df_aggregated_WIP: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the average WIP for each product type and the whole system.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Dataframe with the average WIP for each product type and the whole system.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_aggregated_output","title":"<code>df_aggregated_output: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the total output for each product type.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the total output for each product type.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_aggregated_output_and_throughput","title":"<code>df_aggregated_output_and_throughput: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the average throughput and output for each product type.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the average throughput and output for each product type.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_aggregated_resource_states","title":"<code>df_aggregated_resource_states: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the total time spent in each state of each resource. </p> <p>There are 4 different states a resource can spend its time:     -SB: A resource is in standby state, could process but no product is available     -PR: A resource is in productive state and performs a process     -UD: A resource is in unscheduled downtime state due to a breakdown     -ST: A resource is in setup state</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the total time spent in each state of each resource.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_aggregated_throughput_time","title":"<code>df_aggregated_throughput_time: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the average throughput time for each product type.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the average throughput time for each product type.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_finished_product","title":"<code>df_finished_product: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a prepared data frame (df_prepared) with only finished products.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with only finished products.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_prepared","title":"<code>df_prepared: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Adds to self.df_raw the following columns:</p> <pre><code>-DateTime: Time of the event\n-Combined_activity: Activity and state of the event combined for easier filtering\n-Product_type: Type of the product\n-State_type: Type of the state according to the StateTypeEnum\n-State_sorting_Index: Index to sort the states in the correct order\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the simulation results and the added columns.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_resource_states","title":"<code>df_resource_states: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the machine states and the time spent in each state.  There are 4 different states a resource can spend its time:      -SB: A resource is in standby state, could process but no product is available     -PR: A resource is in productive state and performs a process     -UD: A resource is in unscheduled downtime state due to a breakdown     -ST: A resource is in setup state</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the machine states and the time spent in each state.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.df_throughput","title":"<code>df_throughput: DataFrame</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a data frame with the throughput time for each finished product.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the throughput time for each finished product.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.dynamic_WIP_KPIs","title":"<code>dynamic_WIP_KPIs: List[prodsys.models.performance_indicators.KPI]</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a list of Dynamic WIP KPI values for the WIP over time for each product type and the whole system.</p> <p>Returns:</p> Type Description <code>List[performance_indicators.KPI]</code> <p>List of Dynamic WIP KPI values.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.dynamic_thoughput_time_KPIs","title":"<code>dynamic_thoughput_time_KPIs: List[prodsys.models.performance_indicators.KPI]</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a list of Dynamic Throughput KPI values for the throughput time of each finished product.</p> <p>Returns:</p> Type Description <code>List[performance_indicators.KPI]</code> <p>List of Dynamic Throughput KPI values.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.machine_state_KPIS","title":"<code>machine_state_KPIS: List[prodsys.models.performance_indicators.KPI]</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a list of KPI values for the time spent in each state of each resource.</p> <p>Returns:</p> Type Description <code>List[performance_indicators.KPI]</code> <p>List of KPI values for the time spent in each state of each resource.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.throughput_and_output_KPIs","title":"<code>throughput_and_output_KPIs: List[prodsys.models.performance_indicators.KPI]</code>  <code>cached</code> <code>property</code> <code>writable</code>","text":"<p>Returns a list of average Throughput and Output KPI values for each product type.</p> <p>Returns:</p> Type Description <code>List[performance_indicators.KPI]</code> <p>List of average Throughput and Output KPI values.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.get_aggregated_data","title":"<code>get_aggregated_data(self)</code>","text":"<p>Returns a dictionary with the aggregated data for the simulation results.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Dictionary with the aggregated data for throughput, wip, throughput time and resource states.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.get_aggregated_throughput_data","title":"<code>get_aggregated_throughput_data(self)</code>","text":"<p>Returns a list of the aggregated throughput data.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>List of the aggregated throughput data ordered alphabetically by product type.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.get_aggregated_throughput_time_data","title":"<code>get_aggregated_throughput_time_data(self)</code>","text":"<p>Returns a list of the aggregated throughput time data.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>List of the aggregated throughput time data ordered alphabetically by product type.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.get_aggregated_wip_data","title":"<code>get_aggregated_wip_data(self)</code>","text":"<p>Returns a list of the aggregated WIP data.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>List of the aggregated WIP data ordered alphabetically by product type.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.get_conditions_for_interface_state","title":"<code>get_conditions_for_interface_state(self, df)</code>","text":"<p>This function returns a data frame with the conditions wether a row in the data frame belongs to a interface state or not. Hereby, an interface state belongs to a state, where a resource does not perform a process, i.e. either setup, breakdown or creation (source) or finish (sink) of products. </p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pd.DataFrame</code> <p>Data frame with the simulation results.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the conditions wether a row in the data frame belongs to a process state or not.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.get_conditions_for_process_state","title":"<code>get_conditions_for_process_state(self, df)</code>","text":"<p>This function returns a data frame with the conditions wether a row in the data frame belongs to a process state or not. Hereby, a process state belongs to a state, where a resource performs a process, i.e. either production or transport. </p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pd.DataFrame</code> <p>Data frame with the simulation results.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>Data frame with the conditions wether a row in the data frame belongs to a process state or not.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.get_eventlog_for_product","title":"<code>get_eventlog_for_product(self, product_type='Product_1')</code>","text":"<p>Returns an event log for a specific product type. It can be further anaylzed with the pm4py library.</p> <p>Parameters:</p> Name Type Description Default <code>product_type</code> <code>str</code> <p>Type of product that should be considered in the event log. Defaults to \"Product_1\".</p> <code>'Product_1'</code> <p>Returns:</p> Type Description <code>pm4py.event_log.EventLog</code> <p>Event log for a specific product type.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.read_df_from_csv","title":"<code>read_df_from_csv(self, filepath_input=None)</code>","text":"<p>Reads the simulation results from a csv file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath_input</code> <code>str</code> <p>Path to the csv file with the simulation results. Defaults to None and the at instantiation provided filepath is used.</p> <code>None</code>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.post_processing.PostProcessor.save_inductive_petri_net","title":"<code>save_inductive_petri_net(self)</code>","text":"<p>Saves an inductive petri net for a specific product type, that shows the process model realized in the simulation for finishing the product.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner","title":"<code>runner</code>","text":""},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner","title":"<code> Runner            (BaseModel)         </code>  <code>pydantic-model</code>","text":"<p>Class to represent the simulation runner. It allows to run the simulation based on a provided adapter.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>adapter.ProductionSystemAdapter</code> <p>The adapter containing the production system to simulate.</p> required <p>Attributes:</p> Name Type Description <code>adapter</code> <code>adapter.ProductionSystemAdapter</code> <p>The adapter containing the production system to simulate.</p> <code>env</code> <code>sim.Environment</code> <p>The environment to run the simulation in.</p> <code>time_model_factory</code> <code>time_model_factory.TimeModelFactory</code> <p>The time model factory to create the time models.</p> <code>state_factory</code> <code>state_factory.StateFactory</code> <p>The state factory to create the states.</p> <code>process_factory</code> <code>process_factory.ProcessFactory</code> <p>The process factory to create the processes.</p> <code>queue_factory</code> <code>queue_factory.QueueFactory</code> <p>The queue factory to create the queues.</p> <code>resource_factory</code> <code>resource_factory.ResourceFactory</code> <p>The resource factory to create the resources.</p> <code>sink_factory</code> <code>sink_factory.SinkFactory</code> <p>The sink factory to create the sinks.</p> <code>source_factory</code> <code>source_factory.SourceFactory</code> <p>The source factory to create the sources.</p> <code>product_factory</code> <code>product_factory.ProductFactory</code> <p>The product factory to create the products.</p> <code>event_logger</code> <code>logger.Logger</code> <p>The event logger to log the events.</p> <code>time_stamp</code> <code>str</code> <p>The time stamp of the simulation run.</p> <code>post_processor</code> <code>post_processing.PostProcessor</code> <p>The post processor to process the simulation results.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.env","title":"<code>env: Environment</code>  <code>pydantic-field</code>","text":"<p>The environment to run the simulation in</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.get_aggregated_data_simulation_results","title":"<code>get_aggregated_data_simulation_results(self)</code>","text":"<p>Returns the aggregated simulation results.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The aggregated simulation results.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.get_event_data_of_simulation","title":"<code>get_event_data_of_simulation(self)</code>","text":"<p>Returns the event data of the simulation.</p> <p>Returns:</p> Type Description <code>List[performance_data.Event]</code> <p>The event data of the simulation.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.get_performance_data","title":"<code>get_performance_data(self)</code>","text":"<p>Returns the performance data of the simulation.</p> <p>Returns:</p> Type Description <code>performance_data.Performance</code> <p>The performance data of the simulation.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.get_post_processor","title":"<code>get_post_processor(self)</code>","text":"<p>Returns the post processor to process the simulation results.</p> <p>Returns:</p> Type Description <code>post_processing.PostProcessor</code> <p>The post processor to process the simulation results.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.initialize_simulation","title":"<code>initialize_simulation(self)</code>","text":"<p>Initializes the simulation by creating the factories and all simulation objects. Needs to be done before running the simulation.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.plot_results","title":"<code>plot_results(self)</code>","text":"<p>Plots the aggregated simulation results, comprising the throughput time over time, WIP over time, throughput time distribution and the time per state of the resources.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.print_results","title":"<code>print_results(self)</code>","text":"<p>Prints the aggregated simulation results, comprising the average throughput, WIP, throughput time and the time per state of the resources.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.run","title":"<code>run(self, time_range)</code>","text":"<p>Runs the simulation for the given time range.</p> <p>Parameters:</p> Name Type Description Default <code>time_range</code> <code>int</code> <p>The time range to run the simulation for.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.save_results_as_csv","title":"<code>save_results_as_csv(self, save_folder='data')</code>","text":"<p>Saves the simulation results as .csv-file marked with the time_stamp of simulation and the adapter ID if available.</p> <p>Parameters:</p> Name Type Description Default <code>save_folder</code> <code>str</code> <p>The folder to save the results to. Defaults to \"data\".</p> <code>'data'</code>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.Runner.save_results_as_json","title":"<code>save_results_as_json(self, save_folder='data')</code>","text":"<p>Saves the simulation results as .json-file marked with the time_stamp of simulation and the adapter ID if available.</p> <p>Parameters:</p> Name Type Description Default <code>save_folder</code> <code>str</code> <p>The folder to save the results to. Defaults to \"data\".</p> <code>'data'</code>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.run_simulation","title":"<code>run_simulation(adapter_object, run_length)</code>","text":"<p>Runs the simulation for the given adapter and run length.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_object</code> <code>adapter.ProductionSystemAdapter</code> <p>Adapter containing the production system to simulate.</p> required <code>run_length</code> <code>int</code> <p>Length of the simulation run.</p> required <p>Returns:</p> Type Description <code>Runner</code> <p>The runner object after simulation.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.runner.temp_seed","title":"<code>temp_seed(seed)</code>","text":"<p>Context manager for temporarily setting the seed of the random number generators. Is necessary when optimizing with another random seed but still wanting to use the same seed for the simulation.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>The seed to set for the simulation run.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.statistical_functions","title":"<code>statistical_functions</code>","text":""},{"location":"API_reference/API_reference_8_util/#prodsys.util.statistical_functions.FUNCTION_DICT","title":"<code>FUNCTION_DICT: Dict[str, Callable[[float, float, int], List[float]]]</code>","text":"<p>Dictionary that maps the time model function enum to the corresponding function.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.statistical_functions.get_constant_list","title":"<code>get_constant_list(time_model_data)</code>","text":"<p>Returns a list of constant values.</p> <p>Parameters:</p> Name Type Description Default <code>time_model_data</code> <code>FunctionTimeModelData</code> <p>The time model data.</p> required <p>Returns:</p> Type Description <code>List[float]</code> <p>A list of constant values.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.statistical_functions.get_exponential_list","title":"<code>get_exponential_list(time_model_data)</code>","text":"<p>Returns a list of exponentially distributed values.</p> <p>Parameters:</p> Name Type Description Default <code>time_model_data</code> <code>FunctionTimeModelData</code> <p>The time model data.</p> required <p>Returns:</p> Type Description <code>List[float]</code> <p>A list of exponentially distributed values.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.statistical_functions.get_lognormal_list","title":"<code>get_lognormal_list(time_model_data)</code>","text":"<p>Returns a list of lognormally distributed values.</p> <p>Parameters:</p> Name Type Description Default <code>time_model_data</code> <code>FunctionTimeModelData</code> <p>The time model data.</p> required <p>Returns:</p> Type Description <code>List[float]</code> <p>A list of lognormally distributed values.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.statistical_functions.get_normal_list","title":"<code>get_normal_list(time_model_data)</code>","text":"<p>Returns a list of normally distributed values.</p> <p>Parameters:</p> Name Type Description Default <code>time_model_data</code> <code>FunctionTimeModelData</code> <p>The time model data.</p> required <p>Returns:</p> Type Description <code>List[float]</code> <p>A list of normally distributed values.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.util","title":"<code>util</code>","text":""},{"location":"API_reference/API_reference_8_util/#prodsys.util.util.flatten","title":"<code>flatten(xs)</code>","text":"<p>Flattens a nested Iterable containing at the lowest level only str or bytes.</p> <p>Parameters:</p> Name Type Description Default <code>xs</code> <code>Iterable</code> <p>The nested list.</p> required <p>Yields:</p> Type Description <code>Iterable</code> <p>The flattened list.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.util.flatten_object","title":"<code>flatten_object(xs)</code>","text":"<p>Flattens a nested list.</p> <p>Parameters:</p> Name Type Description Default <code>xs</code> <code>list</code> <p>The nested list.</p> required <p>Yields:</p> Type Description <code>list</code> <p>The flattened list.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.util.get_class_from_str","title":"<code>get_class_from_str(name, cls_dict)</code>","text":"<p>Returns the class for a given name from a dictionary containing classes.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the class.</p> required <code>cls_dict</code> <code>dict</code> <p>Dictionary containing classes.</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the class is not implemented.</p> <p>Returns:</p> Type Description <code>_type_</code> <p>The class.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.util.get_initial_solution_file_pth","title":"<code>get_initial_solution_file_pth(folder_path)</code>","text":"<p>Chooses an initial solution file path from initial solution folder path.</p> <p>Parameters:</p> Name Type Description Default <code>folder_path</code> <code>str</code> <p>The folder path where the initial solutions are stored.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The file path of the initial solution.    </p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.util.prepare_save_folder","title":"<code>prepare_save_folder(file_paths)</code>","text":"<p>Creates a folder if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>file_paths</code> <code>str</code> <p>The file path where the folder should be created.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.util.read_initial_solutions","title":"<code>read_initial_solutions(folder_path, base_configuration)</code>","text":"<p>Reads all initial solutions from a folder and returns them as a list of adapters.</p> <p>Parameters:</p> Name Type Description Default <code>folder_path</code> <code>str</code> <p>The folder path where the initial solutions are stored.</p> required <code>base_configuration</code> <code>adapters.ProductionSystemAdapter</code> <p>The base configuration for optimization containing the scenario data.</p> required <p>Returns:</p> Type Description <code>List[adapters.ProductionSystemAdapter]</code> <p>List of adapters of the initial solutions.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.util.run_from_ipython","title":"<code>run_from_ipython()</code>","text":"<p>Checks if the code is run from an ipython notebook.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if run from ipython notebook, False otherwise.</p>"},{"location":"API_reference/API_reference_8_util/#prodsys.util.util.set_seed","title":"<code>set_seed(seed)</code>","text":"<p>Sets the seed for numpy and random.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>The seed.</p> required"},{"location":"API_reference/API_reference_8_util/#prodsys.util.util.trivial_process","title":"<code>trivial_process(env)</code>","text":"<p>Trivial process that does nothing and is immediately finished.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>simpy.Environment</code> <p>The simulation environment.</p> required <p>Yields:</p> Type Description <code>Generator</code> <p>0 timeout.</p>"},{"location":"Tutorials/tutorial_0_overview/","title":"Tutorials overview","text":"<p>This section contains a series of tutorials that will guide you through the process of modelling and simulating a production system using <code>prodys</code>. The following tutorials are available:</p> <ul> <li>Tutorial 1: Modelling and simulating a production system</li> <li>Tutorial 2: Analyzing simulation results</li> <li>Tutorial 3: Optimizing a production system</li> <li>Tutorial 4: Optimizing production control</li> </ul> <p>All of the tutorials are also on the github page of prodsys in the examples folder as jupyter notebooks available, so that you can run them yourself.</p> <p>In the future, more tutorials will be added to this section. If you have any suggestions for new tutorials, please create an issue on prodsys' github page. For more information about the package's functionality, please see the API reference.</p>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/","title":"Modelling a production system","text":"<p>In this example we explore the modeling functionalities of <code>prodsys</code>. In <code>prodsys</code> we model production systems be specifying the attributes of the following components:</p> <ul> <li>Time model: All relevant timely features of the production system.</li> <li>Processes: Processes give resources the capabilities to perform certain production or transport processes.</li> <li>Resources: Resources perform the production and transport processes.</li> <li>Products: The products that are produced in the production system, requiring a set of processes to be performed.</li> <li>Sources: Sources create products and place them in the production system.</li> <li>Sinks: Sinks store finished products.</li> <li>Production system: The production system is the container for all components and is used to run the simulation.</li> </ul> <p>To make these concepts more understandable, we extend the example from the getting started section. The production system contains a milling machine, a turning lath and a work center that perform processes on aluminium housings. The transport is thereby performed by a worker.</p> <p>We will start by importing the express API:</p> <pre><code>import prodsys.express as psx\n</code></pre> <p>Additionally, since the progress bar can be buggy sometimes in Jupyter notebooks, we can disable it for this example by setting the verbose level of the simulation to 0:</p> <pre><code>from prodsys.simulation import sim\n\nsim.VERBOSE = 0\n</code></pre>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/#time-models","title":"Time models","text":"<p><code>prodsys</code> provides different types of time models to use, the are:</p> <ul> <li>FunctionTimeModel: A time model that is based on a distribution function. Either constant, normal, lognormal or exponential.</li> <li>SequenceTimeModel: A time model that is based on a sequence of time values that are randomly sampled.</li> <li>ManhattanDistanceTimeMOdel: A time model that is based on the manhattan distance between two locations and a constant speed and reaction time.</li> </ul> <p>We will use the <code>FunctionTimeModel</code> to model the time required for milling and turning processes and model the time needed for transport with the <code>ManhattanDistanceTimeModel</code>. We will also model the arrival of housings with the <code>SequentialTimeModel</code>, which could, e.g. be observed inter-arrival times:</p> <pre><code>milling_time = psx.FunctionTimeModel(distribution_function=\"normal\", location=1, scale=0.1, ID=\"milling_time\")\nturning_time = psx.FunctionTimeModel(distribution_function=\"normal\", location=0.5, scale=0.1, ID=\"turning_time\")\ntransport_time = psx.ManhattanDistanceTimeModel(speed=200, reaction_time=0.05, ID=\"transport_time\")\narrival_time_of_housing_1 = psx.SequentialTimeModel([1.6, 1.3, 1.8, 2.0, 1.2, 1.7, 1.3], ID=\"arrival_time_of_housings\")\narrival_time_of_housing_2 = psx.SequentialTimeModel([1.3, 2.3, 2.1, 2.0, 1.4], ID=\"arrival_time_of_housings\")\n</code></pre>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/#processes","title":"Processes","text":"<p>After creating the time models, we can define the processes in the system. We will use the <code>ProductionProcess</code> to model the milling and turning processes and the <code>TransportProcess</code> to model the transport process:</p> <pre><code>milling_process = psx.ProductionProcess(milling_time, ID=\"milling_process\")\nturning_process = psx.ProductionProcess(turning_time, ID=\"turning_process\")\ntransport_process = psx.TransportProcess(transport_time, ID=\"transport_process\")\n</code></pre> <p><code>prodsys</code> also provides the possibility for a <code>CapabilityProcess</code> instead of normal <code>ProductionProcess</code>. These processes are not matched by their ID but by their capability, which gives more flexibility. This extends the typical PPR modeling principle (Product, Process and Resource) of <code>prodsys</code> to the Product, Process, Resource and Skill modelling principle PPRS by considering the capabilities / skills required for performing processes. For more information, refer to the API reference in the documentation.</p>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/#resources","title":"Resources","text":"<p>With this, we can create our resources. The milling machine and turning lath can perform their associated processes and the worker can perform the transport process. However, the work center can perform milling and turning. Milling machine, turning lath and work center are <code>ProductionResource</code>s and the worker is a <code>TransportResource</code>:</p> <pre><code>milling_machine = psx.ProductionResource([milling_process], location=[5, 5], ID=\"milling_machine\")\nturning_lath = psx.ProductionResource([turning_process], location=[10, 10], ID=\"turning_machine\")\nwork_center = psx.ProductionResource([milling_process, turning_process], location=[5, 10], ID=\"work_center\")\nworker = psx.TransportResource([transport_process], location=[0, 0], ID=\"worker\")\n</code></pre>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/#product","title":"Product","text":"<p>Now, with specified resources, we can model our product, the housing. In fact, we don't have only one housing but two different variants for this example. The first product requires milling and afterwards turning, and the second requries turning and afterwards milling:</p> <pre><code>housing_1 = psx.Product([milling_process, turning_process], transport_process, ID=\"housing_1\")\nhousing_2 = psx.Product([turning_process, milling_process], transport_process, ID=\"housing_2\")\n</code></pre>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/#sources-and-sinks","title":"Sources and sinks","text":"<p>At last, we need to model the sources and sinks. The source creates housings and places them in the production system. The sink stores finished housings:</p> <pre><code>source_1 = psx.Source(housing_1, arrival_time_of_housing_1, location=[0,0], ID=\"source_1\")\nsource_2 = psx.Source(housing_2, arrival_time_of_housing_2, location=[0, 1], ID=\"source_2\")\n\nsink_1 = psx.Sink(housing_1, location=[20, 20], ID=\"sink_1\")\nsink_2 = psx.Sink(housing_2, location=[20, 21], ID=\"sink_2\")\n</code></pre>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/#production-system-creation","title":"Production System creation","text":"<p>We now create the production system, validate it and run the simulation for 60 minutes. Afterwards, we print aggregated simulation results:</p> <pre><code>production_system = psx.ProductionSystem([milling_machine, turning_lath, work_center, worker], [source_1, source_2], [sink_1, sink_2])\nproduction_system.validate()\nproduction_system.run(60)\nproduction_system.runner.print_results()\n</code></pre> <p>By validating the production system, we can check if all components are valid and if the production system is consistent in a logical or physical sende. If the production system is not valid, the validation will raise an exception and the simulation cannot be run. However, it easily let's you identify where you made some modelling mistakes.</p>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/#states","title":"States","text":"<p>We can also add different states, such as setups and breakdowns, to resources to model their behavior more accurately. For example, we can add a setup and breakdown to the work center by specifying the time models for breakdown an setup, create states and add them to the work center:</p> <pre><code>breakdwon_time_model = psx.FunctionTimeModel(distribution_function=\"exponential\", location=200, ID=\"breakdown_time_model\")\nrepair_time_model = psx.FunctionTimeModel(distribution_function=\"exponential\", location=10, ID=\"repair_time_model\")\nsetup_time_model_1 = psx.FunctionTimeModel(distribution_function=\"exponential\", location=0.2, ID=\"setup_time_model\")\nsetup_time_model_2 = psx.FunctionTimeModel(distribution_function=\"exponential\", location=0.3, ID=\"setup_time_model\")\n\nbreakdown_state = psx.BreakDownState(breakdwon_time_model, repair_time_model, ID=\"breakdown_state\")\nsetup_state_1 = psx.SetupState(setup_time_model_1, milling_process, turning_process, ID=\"setup_state_1\")\nsetup_state_2 = psx.SetupState(setup_time_model_2, turning_process, milling_process, ID=\"setup_state_2\")\n\nwork_center.states = [breakdown_state, setup_state_1, setup_state_2]\n</code></pre> <p>Note, that we could have given these states to the resource already in the initialization. Again, we simulate the production system and evaluate its performance.</p> <pre><code>production_system.validate()\nproduction_system.run(60)\nproduction_system.runner.print_results()\n</code></pre> <p>The results show that the work center is now for some time in Setup (ST).  However, no time increment for unscheduled downtime due to breakdowns (UD) is visible. This is due to the limited simulation time. If we increase the simulation time to 1000 minutes, we can see that the work center is also in unscheduled downtime for some time:</p> <pre><code>production_system.validate()\nproduction_system.run(1000)\nproduction_system.runner.print_results()\n</code></pre> <p>Now we see, that the work center is 6.1% of the time unavailable due to unscheduled downtime.</p>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/#changing-the-logic-of-the-production-system","title":"Changing the logic of the production system","text":"<p><code>prodsys</code> does not only allow to change the physical configuration of a production system but also the logic. For example, we can change the logic of the work center by changing it's control policy from <code>FIFO</code> (first in first out) to <code>SPT</code> (shortes process time first). BY changing this, the work center will now get products from the queue with bias on the short process, which is in our case the turning process:</p> <pre><code>from prodsys.models.resource_data import ResourceControlPolicy\n\nwork_center.control_policy = ResourceControlPolicy.SPT\n\nproduction_system.validate()\nproduction_system.run(1000)\nproduction_system.runner.print_results()\n</code></pre> <p>Additionally, we can change the routing policy in the production system. A routing policy is not used for heuristically solving a sequencing problem as the control policy but for solving the routing problem for parallel redundant resources. In our example, bot milling machine and work center provide the milling process. While simulating, we need to have some logic how to decide which product is processed on which resource. By default, the routing policy is <code>random</code>, which means that the routing is randomly chosen. However, we can also change the routing policy to <code>shortest_queue</code>, which means that the product is always routed to the resource with the shortest queue:</p> <pre><code>from prodsys.models.source_data import RoutingHeuristic\n\nsource_1.routing_heuristic = RoutingHeuristic.shortest_queue\n\nproduction_system.validate()\nproduction_system.run(1000)\nproduction_system.runner.print_results()\n</code></pre>"},{"location":"Tutorials/tutorial_1_modelling_and_simulating_a_production_system/#prodsysmodels-api","title":"prodsys.models API","text":"<p>So far, we only studied the express API of <code>prodsys</code>. However, <code>prodsys</code> also provides a more detailed API that allows to model more complex production systems with <code>prodsys.models</code>. The models API uses ID references for connecting the different entities (processes, products, resources etc.) that results in a flat data structure instead of nested hierarchical relationsship, as the express API. Whilst the hierarchical structure is easy for programmatically creating production systems, the flat data structure is more convenient for serializing the data, i.e. saving and loading production systems. All algorithms in <code>prodsys</code> use the models API. For luck, all express API objects can be converted to models API objects and vice versa.</p> <pre><code>model_production_system = production_system.to_model()\nprint(model_production_system.process_data[0])\n</code></pre> <p>For now, the express API allows all modeling features as the models API but the creation of products that require processes in a sequence according to an assembly precedence graph. This feature is only available in the models API. For more information, refer to the API reference in the documentation. However, using the algorithms provided by <code>prodsys</code> for optimizing or autonomously controlling a production system requires the models API. For a complete overview of the package's modelling functionalities, please see the API reference.</p>"},{"location":"Tutorials/tutorial_2_analyzing_simulation_results/","title":"Analyzing simulation results","text":"<p>In the following tutorial, we will explore the analysis capabilities of <code>prodsys</code> for examining simulation results. In <code>prodsys</code>, every single of a simulation run get's tracked and logged, thus allowing to review the complete event log of a simulation run, as in the real world. Similarly, all KPIs can be calculated in the post processing. This allows for a very flexible analysis of the simulation results. <code>prodsys</code> allready provides many utility functions for calculating KPIs and plotting the results. In this tutorial, we will explore some of them.</p> <p>For this example, we will use another production system which we will load from a json-file (example_configuration.json), which can be found in the examples folder of prodsys' github page. Download it and store it in the same folder as this notebook. Load the configuration and run a simulation with the following commands:</p> <pre><code>import prodsys\n\nproduction_system = prodsys.adapters.JsonProductionSystemAdapter()\nproduction_system.read_data('example_configuration.json')\n\nrunner = prodsys.runner.Runner(adapter=production_system)\nrunner.initialize_simulation()\nrunner.run(20000)\nrunner.print_results()\n</code></pre> <p>When reviewing the simulation results, we will see that the production system consists of 4 prudction resources (R1, R2, R3, R4) and two transport resources (TR1, TR2). Additionally, we see that three different kind of products are produced (product_1, product_2, product_3). When reviewing the KPIs, there doesn't seem to be any problems with the production system. However, this is hard to tell without knowing something about the production system and we will see that there are some problems with the production system, which we will explore in the following.</p> <p>The basic data structure used for logging all events can be accessed by the <code>EventLogger</code> class, which is an attribute of the runner. The logger stores this data in form of dictionaries but we can transform it to a pandas dataframe for more convenient analysis:</p> <pre><code>df = runner.event_logger.get_data_as_dataframe()\ndf.head(10)\n</code></pre> <p>If we have a look at the dataframe, we will see that it contains 8 columns to describe each event:</p> <ul> <li>Time: The time of the event</li> <li>Resource: The resource on which the event occured</li> <li>State: The state of the resource that changed</li> <li>State Type: The type of the state that changed (e.g. source, transport, breakdwon, etc.)</li> <li>Activity: The activity that was performed</li> <li>Product: The product that was processed or transported (only for Production or Transport states)</li> <li>Expected End Time: The expected end time of the state</li> <li>Target location: The target location of a transport (only for Transport states)</li> </ul> <p>Writing scripts that analysis these event logs can be tydious. We can use powerfull process mining tools to automate the analysis of these event logs to analysis all processes, event durations and so on. However, in this tutorial, we will focus on the analysis of the KPIs. For this, we will use the <code>PostProcessor</code> class, which can be obtained from runner. The <code>PostProcessor</code> class provides many utility functions for calculating KPIs and plotting the results. In this tutorial, we will explore some of them. Let's get a <code>PostProcessor</code> from the runner and have a look at the KPIs:</p> <pre><code>post_processor = runner.get_post_processor()\nprint(\"Throughput per product type:\", post_processor.get_aggregated_throughput_data())\nprint(\"WIP per product type:\", post_processor.get_aggregated_wip_data())\nprint(\"Throughput time per product type:\", post_processor.get_aggregated_throughput_time_data())\n</code></pre> <p><code>prodsys</code> also provides some models for KPIs which can be used more easily in algorithms. For example, we can use the <code>WIP_KPIs</code>property to calculate the KPI values of the production system:</p> <pre><code>for wip_kpi in post_processor.WIP_KPIs:\n    print(\"WIP KPI:\", wip_kpi)\n    print(\"WIP KPI value:\", wip_kpi.value)\n</code></pre> <p>The <code>PostProcessor</code> has some pre-processed data frames, which can be used for custom analyis. For example, we can get a data frame with only products that have been finished during the simulation run:</p> <pre><code>post_processor.df_finished_product.head()\n</code></pre> <p>However, most easiest or fastest method for analysing simulation results is using the plotting functionalities of <code>prodsys</code>. These can be accesses through the <code>kpi_visualization</code> and only require a <code>PostProcessor</code> for instantiation. For example, we can plot the time percentages of resources in different states:</p> <pre><code>from prodsys.util import kpi_visualization\n\nkpi_visualization.plot_time_per_state_of_resources(post_processor)\n</code></pre> <p>We can observe, that the resources in the production system are not really heavily utilized, since their productive (PR) percentage is lower than 50% for all resources but R2. Let's plot the WIP KPI and see if this aligns with our first observations:</p> <pre><code>from prodsys.util import kpi_visualization\n\nkpi_visualization.plot_WIP(post_processor)\n</code></pre> <p>We can see that the production system has at first a stable WIP at around a total of 7 but at roughly 5000 minutes, the WIP starts increasing and does not stabilize anymore. This suggest, that our system is running very full with semi-finished material. We can look more closely at the WIP when considering the WIP at the different resources over time:</p> <pre><code>kpi_visualization.plot_WIP_per_resource(post_processor)\n</code></pre> <p>When observing the WIP per resource, we can observe that WIP at the resources increase steadily until ca. 15500 minutes. Then, suddenly, the WIP curve stops. This is a strong indicator that a Deadlock occured, where all positions of the queues are full and transports are blocked, because their target is blocked. This, is caused as products can have re-entrant flow in this example, thus blocking each other. Let's also look at the throughput time of the products:</p> <pre><code>kpi_visualization.plot_throughput_time_over_time(post_processor)\n</code></pre> <p>Again, we see a divergence of throughput time over simualted time. Here, the Start_time relates to the start of production of a product, i.e. the creation at it's source. These observations suggest, that the system is running to a WIP level which cannot be processed efficiently, similar to a crowded parking space after an event. If we take a look at the queue's of the system and the capacity of production resources, we can determine the maximal number of products in the system:</p> <pre><code>capacity = 0\nfor resource in production_system.resource_data:\n    capacity += resource.capacity\n\nfor queue in production_system.queue_data:\n    capacity += queue.capacity\n\nprint(capacity)\n</code></pre> <p>We see, that at maximum 69 products can be in the production system in parallel. However, when we examine the queues more in detail, we see, that some resource share also queues (R3 and R4):</p> <pre><code>machines = prodsys.adapters.get_machines(production_system)\nfor machine in machines:\n    print(machine.ID, machine.input_queues, machine.output_queues)\n</code></pre> <p>Let's investigate if the production system's storage capacity for products is too low that there is some blocking or if the production system's throughput is not high enough for the arrival processes. To do this, we test how the WIP changes if we make the queues of the production system unlimited (capacity=0).</p> <pre><code>adjusted_production_system = production_system.copy(deep=True)\n\nfor queue in adjusted_production_system.queue_data:\n    queue.capacity = 0\n\nrunner = prodsys.runner.Runner(adapter=adjusted_production_system)\nrunner.initialize_simulation()\nrunner.run(20000)\nnew_post_processor = runner.get_post_processor()\nkpi_visualization.plot_WIP(new_post_processor)\n</code></pre> <p>If we look at the results again, we see that the production system WIP increases not as strong as without limited queues. This suggests that both cases were True. At first, the production system got fuller without limited queues which suggest that some queues overflowed when limited causing some blocking. Additionally, we see that the WIP still increases over time, thus the production system requires more resources or another configuration to satisfy the arrival processes. <code>prodsys</code> provides also some functionality to optimize production system configuration. See the optimization example for more detailed information. For a complete overview of the package's ies for simulation analysis, please see the API reference.</p>"},{"location":"Tutorials/tutorial_3_optimizing_a_production_system/","title":"Optimizing a production system","text":"<p>This tutorial will guide you through the optimization functionalities of <code>prodsys</code> to optimize the configuration of a production system. With the <code>prodsys.optimization</code> package, we can utilize meta-heuristics and mathematical optimization for this task. All algorithms can be conviently used with the <code>prodsys.models</code> API.</p> <p>For this example, we will use a production system which we will load from a json-file (base_configuration.json), which can be found in the examples folder of prodsys' github page. Download it and store it in the same folder as this notebook. Load the configuration and run a simulation with the following commands:</p> <pre><code>import prodsys\nfrom prodsys.simulation import sim\nsim.VERBOSE = 0\n\nproduction_system = prodsys.adapters.JsonProductionSystemAdapter()\nproduction_system.read_data('base_configuration.json')\n\nprodsys.adapters.add_default_queues_to_adapter(production_system)\n\nrunner = prodsys.runner.Runner(adapter=production_system)\nrunner.initialize_simulation()\nrunner.run(2880)\nrunner.print_results()\n</code></pre> <p>As already concluded in the seccond tutorial, production system configurations can be suboptimal for a certain load of products. In this example, we also see that resoures M2, M3, M4 are very heavily utilized, whereas resource M1 has only a productivy of 34.4%. In order to satify the product needs of our customers and to balance the load on the resources more evenly, we want to find a more suitable configuration with the <code>prodsys.optimization</code> package. However, for starting optimization, we also need to provide an optimization scenario, that models constraints, options, information and the objectives. Let's start by creating the constraints of the scenario with the <code>prodsys.models</code> API:</p> <pre><code>from prodsys.models import scenario_data\n\nconstraints = scenario_data.ScenarioConstrainsData(\n    max_reconfiguration_cost=100000,\n    max_num_machines=8,\n    max_num_processes_per_machine=3,\n    max_num_transport_resources=2\n)\n</code></pre> <p>As you can see, the constraints consist of the maximum cost for reconfigruation and the maximumm number of machines, processes per machine and transport resources. Next, we define the options of our scenario for optimization:</p> <pre><code>positions = [[x*4, y*4] for x in range(4) for y in range(10)]\noptions = scenario_data.ScenarioOptionsData(\n    transformations=[scenario_data.ReconfigurationEnum.PRODUCTION_CAPACITY],\n    machine_controllers=[\"FIFO\", \"SPT\"],\n    transport_controllers=[\"FIFO\", \"SPT_transport\"],\n    routing_heuristics=[\"shortest_queue\"],\n    positions=positions\n)\n</code></pre> <p>We specify in the scenario options the transformations that can be performed by the optmizer, which control policies and routing heuristics are available and what kind of positions are available to place resources. By choosing the transformation <code>PRODUCTION_CAPACITY</code>, the optimizer can add, remove or move production resources from the system or processes from single production resources.</p> <p>At last, we need to specify our info for optimization:</p> <pre><code>info = scenario_data.ScenarioInfoData(\n    machine_cost=40000,\n    transport_resource_cost=20000,\n    process_module_cost=4000,\n    time_range=24*60\n)\n</code></pre> <p>The scenario info contains information about the cost for machines, transport resources and process modules. Additionally, we specify a time range. This value is the time used for evalutation of created configurations during simulation. Since many evaluations are performed during optimization, this parameter can significantly influence the optimmization Time. For now, we specified it to one day. Lastly we can define the objectives used for optimization:</p> <pre><code>from prodsys.models.performance_indicators import KPIEnum\nobjectives = [scenario_data.Objective(\n    name=KPIEnum.THROUGHPUT\n)]\n</code></pre> <p>Currently, only reconfiguration cost, throughput time, WIP and throughput can be optimized. Yet, similar logic can also be used for optimizing the productivity. With all this data defined, we can now create our optimization scenario and additionally add it to our production system:</p> <pre><code>scenario = scenario_data.ScenarioData(\n    constraints=constraints,\n    options=options,\n    info=info,\n    objectives=objectives\n)\nproduction_system.scenario_data = scenario\n</code></pre> <p>Next, we define the hyper parameters for our optimization. At first, we will use evolutionary algorithm for our optimization, because it allows parallelization. The hyper parameters for optimization are strongly problem dependant and need to be adjusted accordingly. For this example, we will use the following parameters and run the optimization for 10 generations. Note, that this can take some time...</p> <pre><code>from prodsys.optimization import evolutionary_algorithm_optimization\nfrom prodsys.optimization import evolutionary_algorithm\nfrom prodsys.simulation import sim\nsim.VERBOSE = 0\n\nhyper_parameters = evolutionary_algorithm.EvolutionaryAlgorithmHyperparameters(\n    seed=0,\n    number_of_generations=10,\n    population_size=16,\n    mutation_rate=0.2,\n    crossover_rate=0.1,\n    number_of_processes=4\n)\nevolutionary_algorithm_optimization(\n    production_system,\n    hyper_parameters,\n)\n</code></pre> <p>All algorithms in <code>prodsys</code> can be utilized with the same interface. Also available are the following algorithms:</p> <ul> <li><code>prodsys.optimization.simulated_annealing</code>: simulated annealing optimization for all transformations</li> <li><code>prodsys.optimization.tabu_search</code>: tabu search for all transformations</li> <li><code>prodsys.optimization.math_opt</code>: mathematical optimization with Gurobi, allows only optimization of the production capacity</li> </ul> <p>We see in the output, that the algorithm is running and that new best solutions with a higher performance are found. We can analyze them now and see, if we can find a better configuration for our production system. Optimization core results of the objective for the individual solutions and the solutions themselves are saved as default in a <code>results</code> folder to make sure that interruptions in optimization won't delete all results. We can load them with the following command and search for the best solution:</p> <pre><code>from prodsys.optimization import optimization_analysis\n\ndf = optimization_analysis.read_optimization_results_file_to_df(\"results/optimization_results.json\", \"evolutionary\")\ndf.sort_values(by=[\"agg_fitness\"], ascending=False).head()\n</code></pre> <p><code>prodsys</code> allows us to load the optimization results as a data frame and analyze them. For validation purposes, we simuate the best solution again and compare it to the initial solutions:</p> <pre><code>import os \n\n# Find all files i the result folder that contain the ID of the best individual\nbest_individual_ID = df.sort_values(by=[\"agg_fitness\"], ascending=False).head()[\"ID\"].values[0]\nbest_individual_ID = str(best_individual_ID)\nfiles = os.listdir(\"results\")\nfiles = [file for file in files if best_individual_ID in file]\nnew_production_system = prodsys.adapters.JsonProductionSystemAdapter()\nnew_production_system.read_data(\"results/\" + files[0])\n\nrunner = prodsys.runner.Runner(adapter=new_production_system)\nrunner.initialize_simulation()\nrunner.run(2880)\n\nrunner.print_results()\n</code></pre> <p>When comparing the results from the original production system and the new one, we see that two machines were added. However, the machines are still heavily utilized. Most likely, the optimizer did just not find a good solution, because we only ran it for 10 generations and for a small population size. Increasing these will take longer, but will more likely find better solutions.</p> <p>For a complete overview of the package's functionality, please see the API reference.</p>"},{"location":"Tutorials/tutorial_4_optimizing_production_control/","title":"Optimizing production control","text":"<p>This tutorial will guide you through the optimization functionalities of <code>prodsys</code> to optimize the production control in a production system. With the <code>prodsys.control</code> package, we can utilize reinforcement learning, a kind of machine learning, for this task. All algorithms can be conviently used with the <code>prodsys.models</code> API.</p> <p>For this example, we will use again a production system which we will load from a json-file (control_configuration.json), which can be found in the examples folder of prodsys' github page. It is the same example as in tutorial 2, but with lower arrival rates. Download it and store it in the same folder as this notebook. Load the configuration and run a simulation with the following commands:</p> <p>Let's start at first by loading our production system:</p> <pre><code>import prodsys\nfrom prodsys.simulation import sim\nsim.VERBOSE = 0\n\nproduction_system = prodsys.adapters.JsonProductionSystemAdapter()\nproduction_system.read_data('control_configuration.json')\n\nrunner = prodsys.runner.Runner(adapter=production_system)\nrunner.initialize_simulation()\nrunner.run(2880)\nrunner.print_results()\n</code></pre> <p>When reviewing the performance, we see that resource R2 has the highest productivity. In order to reduce WIP and improve overall performance, we want to optimize the production control concerning R2 with Reinforcement Learning. <code>prodsys.control</code> provides a convenient API to do so, by defining interfaces for training environments for RL agents for production control task. So far, the following elementary control tasks are considered:</p> <ul> <li>Sequencing: The agent has to decide for a resource which product to process next from a list of available products.</li> <li>Routing: The agent determines for a product which resource it processes next, given a list of possible resources to perform this process.</li> </ul> <p>In this tutorial, we will focus on the sequencing task. The routing task is similar and can be used analogously. Note that future versions of <code>prodsys.control</code> will provide more control tasks (e.g. such as product release control) and that it is also possible to define custom control tasks that are a combination of the existing ones.</p>"},{"location":"Tutorials/tutorial_4_optimizing_production_control/#the-training-environment-api","title":"The training environment API","text":"<p>When utilizing reinforcement learning for production control, we need to define a training environment for the RL agent. This environment is responsible for providing the agent with the current state of the production system and for executing the agent's actions. The environment is also responsible for providing the agent with a reward for each action. The gymnasium as RL-framework. The environments provided by <code>prodsys.control</code> are implemented as abstract base classes, specifying the methods that need to be implemented by the user for soving the associated control tasks. To realize a control environment, we need to implement a class that inherits from the abstract base classes and implements it's abstract methods:</p> <pre><code>from gymnasium import spaces\nimport numpy as np\nimport prodsys\nfrom prodsys.simulation import request\nfrom prodsys.control import sequencing_control_env\n\nclass ExampleControlEnv(sequencing_control_env.AbstractSequencingControlEnv):\n    def get_observation(self) -&gt; np.ndarray:\n        # Implement here function that returns the observation that fits to the observation space of the class instances.\n        pass\n\n    def get_info(self) -&gt; dict:\n        # Implement here function that returns a dictionary with information about the environment.\n        pass\n\n    def get_termination_condition(self) -&gt; bool:\n        # Implement here function that returns True if the simulation should be terminated, i.e. an episode ends.\n        pass\n\n    def get_reward(self, processed_request: request.Request, invalid_action: bool = False) -&gt; float:\n        # Implement here function that returns the reward for the current step.\n        pass\n</code></pre> <p>So, only 4 functions have to implemented to start training an RL-agent. These functions define the most critical aspects when training an RL-agent, which makes these environments especially easy to experiment with different RL-agent setups and compare them. Simulation interactions are handled by the environment, so that the user can focus on the RL-agent.</p> <p>Especially definitions of observations and rewards are critical for the performance of the agent. The following sections will show an exemplary implementation of the environment for the sequencing task.</p>"},{"location":"Tutorials/tutorial_4_optimizing_production_control/#example-implementation-of-a-sequencing-environment","title":"Example implementation of a sequencing environment","text":"<p>In this example, we will implement the training environment for an RL-agent that determines the sequence of performed processes for the production resource R2 from the example above.</p> <p>For a simple optimization of performed processes, we want that the RL-agent can observe all running processes and all upcoming processes from the queue. We want to motivate the agent to sequence in a way, that the WIP is low and as few as little setups are performed, since this lower throughput.</p> <p>To do so, we define the observation space, to be a binary tensor of shape CxP, where C is the number of possible running processes and the number of slots in the input queue of the resource and P is the number of possible processes. This tensor shows then which slot from resource or queue is taken by which process type.</p> <p>The reward will be defined by a stepwise reward and a sparse reward:</p> <ul> <li>Stepwise reward: The agent receives a reward of -1 if he selects an invalid action, 1 if he selects a valid action which requires not setup and 0 otherwise.</li> <li>Sparse reward: The agent receives a reward based on the difference of queue capacity and WIP at the resource.</li> </ul> <p>Lastly, termination is defined by 100k minutes passed in simulation time and the info is just a placeholder.</p> <p>The following code shows the implementation of the environment:</p> <pre><code>class ProductionControlEnv(sequencing_control_env.AbstractSequencingControlEnv):\n    def get_observation(self) -&gt; np.ndarray:\n        \"\"\"\n        Function that utilizes the ResourceObserver of the environment class to get an array of observations of processes performed by the resource and in the queue of the resource. The observatino has a dimension CxP, where c is the capacity of resource and queue and P the number of processes.\n\n        Returns:\n            np.ndarray: The observation.\n        \"\"\"\n        processes_observation = self.observer.observe_processes()\n        encoded_processes = []\n        processes = self.resource.data.process_ids\n\n        for process_observation in processes_observation:\n            encoded_process = [0 for _ in range(len(processes))]\n            encoded_process[processes.index(process_observation.process)] = 1\n            encoded_processes.append(encoded_process)\n\n        encoded_process = [0 for _ in range(len(processes))]\n        encoded_processes += [encoded_process] * (\n            self.resource.data.capacity - len(processes_observation)\n        )\n\n        queue_observations = self.observer.observe_input_queue()\n        for queue_observation in queue_observations:\n            encoded_process = [0 for _ in range(len(processes))]\n            encoded_process[processes.index(queue_observation.process)] = 1\n            encoded_processes.append(encoded_process)\n\n        encoded_process = [0 for _ in range(len(processes))]\n        queue_capacity = self.resource.input_queues[0].capacity\n        encoded_processes += [encoded_process] * (\n            queue_capacity - len(queue_observations)\n        )\n\n        return np.array(encoded_processes)\n\n    def get_info(self) -&gt; dict:\n        return {\"info\": 0}\n\n\n    def get_termination_condition(self) -&gt; bool:\n        return self.runner.env.now &gt;= 100000\n\n    def get_reward(self, processed_request: request.Request, invalid_action: bool = False) -&gt; float:\n        if invalid_action:\n            reward = -1\n        else:\n            reward = (\n                self.resource.current_setup is None\n                or processed_request.process.process_data.ID\n                == self.resource.current_setup.process_data.ID\n            )\n        if self.step_count % 10 == 0:\n            reward += self.resource.input_queues[0].capacity - len(self.resource_controller.requests) \n\n        return reward\n</code></pre> <p>Note that we utillize the observer, which is an attribute of the environment. The observer brings handy functions to observe the current state of a resource in the simulation.</p> <p>In order to validate that this environment works, we will at first use just random samping as a agent and step through it. At first, we we define the observation and action space since these are required by the environment and need to fit to our get_observation function:</p> <pre><code>resource_id = \"R2\"\nresource_data = [r for r in production_system.resource_data if r.ID == resource_id][0]\nqueue = [q for q in production_system.queue_data if q.ID == resource_data.input_queues[0]][0]\nshape = (queue.capacity + resource_data.capacity, len(resource_data.process_ids))\nobservation_space = spaces.Box(0, 1, shape=shape, dtype=int)\naction_space = spaces.Box(0, 1, shape=(queue.capacity,), dtype=float)\n</code></pre> <p>Now, we can create an instance of the environment and step through it:</p> <pre><code>env = ProductionControlEnv(production_system, \"R2\", observation_space=observation_space, action_space=action_space, render_mode=\"human\")\nobservation, info = env.reset(seed=42)\nfor step in range(20):\n   action = env.action_space.sample()  # this is where you would insert your policy\n   observation, reward, terminated, truncated, info = env.step(action)\n   print(f\"Step: {step} with a reward of {reward}\")\n\n   if terminated or truncated:\n      observation, info = env.reset()\nenv.close()\n</code></pre> <p>Lastly, we want to use a PPO RL-agent from stable-baselines3 to train the environment. We will use the default hyperparameters for the agent and train it for 20k steps. The following code shows the training:</p> <pre><code>import os\nimport time\nfrom stable_baselines3 import PPO\nfrom stable_baselines3.common.logger import configure\n\ntmp_path = os.getcwd() + \"\\\\tensorboard_log\\\\sequencing\\\\\" + time.strftime(\"%Y%m%d-%H%M%S\")\nnew_logger = configure(tmp_path, [\"stdout\", \"csv\", \"tensorboard\"])\n\nmodel = PPO(env=env, policy='MlpPolicy', verbose=1)\nmodel.set_logger(new_logger)\nmodel.learn(total_timesteps=20000)\n</code></pre> <p>You can review the training progress by looking at the tensorboard logs in the folder <code>tensorboard_log\\sequencing</code> in the current working directory. The following code will show the tensorboard logs in the notebook:</p> <pre><code>tensorboard --logdir tensorboard_log\\sequencing\n</code></pre> <p>This example should only show the required implementation for an RL-agent for production control tasks. The routing control task can be implemented in a similar fashion. For more information on the implementation of the environment, please refer to the documentation of the abstract base classes in the API reference of <code>prodsys.control</code>.</p>"}]}